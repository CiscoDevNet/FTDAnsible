# Introduction to Firepower Threat Defense REST API

* * *

You can use a REST API to programmatically interact with a Firepower Threat Defense device that you are managing locally through Firepower Device Manager.

{% include 'includes/api_compatibility_disclaimer.j2' %}

## Audience for This Programming Guide

This guide is written on the assumption that you have a general knowledge of programming and a specific understanding of REST APIs and JSON. If you are new to these technologies, please first read a general guide on REST APIs.

## About the Firepower Threat Defense REST API

You can use the Firepower Threat Defense REpresentational State Transfer (REST) Application Programming Interface (API), over HTTPS, to interact with a <span>Firepower Threat Defense</span> device through a client program. The REST API uses JavaScript Object Notation (JSON) format to represent objects.

Firepower Device Manager includes an API Explorer that explains all of the resources and JSON objects available for your programmatic use. The Explorer provides detailed information about the attribute-value pairs in each object, and you can experiment with the various HTTP methods to ensure you understand the coding required to use each resource. The API Explorer also provides examples of the URLs required for each resource.

The API is has its own version number. There is no guarantee that a client designed for one version of the API will work for a future version without error or without requiring changes to your program.

### General Process for Using the REST API

In general, your client interacts with a <span>Firepower Threat Defense</span> device using the following iterative process:

1.  Obtain an access token to authenticate your API calls. See [Overview of the API Client Authentication Process](/introduction/auth.md).
1.  Except when simply reading data, build a JSON payload.
1.  Transmit the JSON payload using an HTTPS call for the Universal Resource Locator (URL) for the resource.
1.  Consume the returned JSON response.
1.  If you make configuration changes, deploy the changes. See [Deploying Configuration Changes](/introduction/deploy_config.md).

### Supported HTTP Methods

You can use the following HTTP methods only. The other methods are not supported.

* **GET**—To read data from the system.
* **POST**—To create new objects.
* **PUT**—To modify existing objects. When using PUT, you must include the entire JSON object. You cannot selectively update individual attributes within an object.
* **DELETE**—To remove a user-defined object.

### The Base URL for the API

The easiest way to determine the base URL for a given <span>Firepower Threat Defense</span> device is to try out a GET method in the API Explorer, and simply delete the object part of the URL from the result.

For example, you can do a GET /object/networks, and see something similar to the following in the returned output under Request URL:
```url
https://ftd.example.com{{ base_path }}/object/networks
```
The server name part of the URL is the hostname or IP address of the <span>Firepower Threat Defense</span> device, and will be different for your device in place of "ftd.example.com." In this example, you delete /object/networks from the path to get the base URL:
```url
https://ftd.example.com{{ base_path }}/
```
All resource calls use this URL as the base for the request URL.

In the API Explorer, if you scroll to the bottom of the page, you can see information on the base URL (without the server name) and API version.
