# README FIRST
# 1. replace "NAMESPACE" and "COLLECTION_NAME" with the correct name in the env section (e.g. with 'community' and 'mycollection')
# 2. If you don't have unit tests remove that section
# 3. If your collection depends on other collections ensure they are installed, see "Install collection dependencies"
# If you need help please ask in #ansible-devel on Freenode IRC

name: CI
on:
  # Run CI against all pushes (direct commits, also merged PRs), Pull Requests
  push:
  pull_request:
  # Run CI once per day (at 06:00 UTC)
  # This ensures that even if there haven't been commits that we are still testing against latest version of ansible-test for each ansible-base version
  schedule:
    - cron: '0 6 * * *'
env:
  NAMESPACE: cisco
  COLLECTION_NAME: ftdansible 

jobs:

###
# Sanity tests (REQUIRED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_sanity.html

  sanity:
    name: Sanity (â’¶${{ matrix.ansible }})
    strategy:
      matrix:
        ansible:
          - stable-2.9
          - stable-2.10
          # It's important that Sanity is tested against all stable-X.Y branches
          # Testing against `devel` may fail as new tests are added.
          # - stable-2.9 # Only if your collection supports Ansible 2.9
    runs-on: ubuntu-latest
    steps:

      # ansible-test requires the collection to be in a directory in the form
      # .../ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}/

      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test sanity" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      # Install the head of the given branch (devel, stable-2.10)
      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # Install test requirements
      - name: Install test requirements
        run: pwd && ls -al && find . && pip install -r ./test-requirements.txt

      # Install ansible galaxy community general
      - name: Install ansible galaxy community general
        run: ansible-galaxy collection install community.general

      # Install ansible galaxy community network
      - name: Install ansible galaxy community network
        run: ansible-galaxy collection install community.network

      # Install ansible galaxy cisco nso network
      - name: Install ansible galaxy community network
        run: ansible-galaxy collection install cisco.nso

      # run ansible-test sanity inside of Docker.
      # The docker container has all the pinned dependencies that are required
      # and all python versions ansible supports.
      - name: Run sanity tests on python 3.6
        run: ansible-test sanity --docker -v --color --python 3.6
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      - name: Run sanity tests on python 3.7
        run: ansible-test sanity --docker -v --color --python 3.7
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      - name: Run sanity tests on python 3.8
        run: ansible-test sanity --docker -v --color --python 3.8
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      - name: Run sanity tests on python 3.9
        run: ansible-test sanity --docker -v --color --python 3.9
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      # ansible-test support producing code coverage date
      - name: Generate coverage report
        # run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      # See the reports at https://codecov.io/gh/GITHUBORG/REPONAME
      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false

      # Install units
      - name: Install units
        run: pip install units

      #   # Run the unit tests on python 3.6
      - name: Run unit test
        run: ansible-test units --docker -v --color --python 3.6
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      #   # Run the unit tests on python 3.7
      - name: Run unit test
        run: ansible-test units --docker -v --color --python 3.7
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      #   # Run the unit tests on python 3.8
      - name: Run unit test
        run: ansible-test units --docker -v --color --python 3.8
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      #   # Run the unit tests on python 3.9
      - name: Run unit test
        run: ansible-test units --docker -v --color --python 3.9
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

