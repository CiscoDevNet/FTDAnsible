- hosts: vftd
  connection: httpapi

  tasks:
    - name: 'query_params should contain valid data'
      cisco.ftdansible.ftd_configuration:
        operation: 'getNetworkObjectList'
        query_params:
          offset: True
          sort: 0
          filter: 1.1
      register: result
      ignore_errors: yes
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == true'
          - '"Invalid query_params provided" in result.msg'
          - '3 == result.msg["Invalid query_params provided"]["invalid_type"] | length'
          - '{"actually_value": true, "expected_type": "integer", "path": "offset"}
                              in result.msg["Invalid query_params provided"]["invalid_type"]'
          - '{"actually_value": 0, "expected_type": "string", "path": "sort"}
                              in result.msg["Invalid query_params provided"]["invalid_type"]'
          - '{"actually_value": 1.1, "expected_type": "string", "path": "filter"}
                              in result.msg["Invalid query_params provided"]["invalid_type"]'

    - name: 'query_params should contain valid data'
      cisco.ftdansible.ftd_configuration:
        operation: 'getNetworkObjectList'
        query_params:
          offset: 10
          limit: '2'
          sort: 'name'
      register: result
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == false'

    - name: 'add: path_params should contain all required params'
      cisco.ftdansible.ftd_configuration:
        operation: 'addAccessRule'
        data:
          name: "ansible-test-accessrule"
          type: "accessrule"
          ruleAction: "PERMIT"
          eventLogAction: "LOG_BOTH"
        register_as: "sameRuleObj"
      register: result
      ignore_errors: yes
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == true'
          - 'result.msg == {"Invalid path_params provided": {"required": ["parentId"]}}'

    - name: path_params should contain valid data
      cisco.ftdansible.ftd_configuration:
        operation: 'addAccessRule'
        data:
          name: "ansible-test-accessrule"
          type: "accessrule"
          ruleAction: "PERMIT"
          eventLogAction: "LOG_BOTH"
        path_params:
          parentId: 1
        register_as: "sameRuleObj"
      register: result
      ignore_errors: yes
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == true'
          - '1 == result.msg["Invalid path_params provided"]["invalid_type"] | length'
          - '{"actually_value": 1, "expected_type": "string", "path": "parentId"}
                              in result.msg["Invalid path_params provided"]["invalid_type"]'

    - name: 'edit: path_params should contain all required params'
      cisco.ftdansible.ftd_configuration:
        operation: 'editNetworkObject'
        data:
          name: "ansible-test-network"
        register_as: "updatedTestObj"
      register: result
      ignore_errors: yes
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == true'
          - 'result.msg == {"Invalid path_params provided": {"required": ["objId"]}}'

    - name: 'delete: path_params should contain all required params'
      cisco.ftdansible.ftd_configuration:
        operation: 'deleteNetworkObject'
        path_params:
          test: "testId"
      register: result
      ignore_errors: yes
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == true'
          - 'result.msg == {"Invalid path_params provided": {"required": ["objId"]}}'

    - name: is_not_exist operation should be present in the swagger api
      cisco.ftdansible.ftd_configuration:
        operation: 'is_not_exist'
        data:
          name: "ansible-test-network"
          description: "Ansible Integration tests in action"
          subType: "HOST"
          value: "192.22.22.24"
          type: "networkobject"
        register_as: "testObj"
      register: result
      ignore_errors: yes
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == true'
          - "result.msg == 'Invalid operation name provided: is_not_exist'"

    - name: data should contain all required fields
      cisco.ftdansible.ftd_configuration:
        operation: 'addNetworkObject'
        data:
          description: "Ansible Integration tests in action"
        register_as: "testObj"
      register: result
      ignore_errors: yes
      # ignoring this test as API docs in v6.2.3 do not have required fields for objects;
      tags: skip-on-6.2.3
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == true'
          - 'result.msg == {"Invalid data provided": {"required": ["name", "subType", "type", "value"]}}'
      tags: skip-on-6.2.3

    - name: data should contain valid data
      cisco.ftdansible.ftd_configuration:
        operation: 'addNetworkObject'
        data:
          name: false
          description: true
          subType: "not_enum"
          value: 0
          type: 1
          isSystemDefined: "test"
        register_as: "testObj"
      register: result
      ignore_errors: yes
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == true'
          - '6 == result.msg["Invalid data provided"]["invalid_type"] | length'
          - '{"actually_value": false, "expected_type": "string", "path": "name"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": true, "expected_type": "string", "path": "description"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": "not_enum", "expected_type": "enum", "path": "subType"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": 0, "expected_type": "string", "path": "value"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": "test", "expected_type": "boolean", "path": "isSystemDefined"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": 1, "expected_type": "string", "path": "type"}
                              in result.msg["Invalid data provided"]["invalid_type"]'

    - name: data should contain valid data
      cisco.ftdansible.ftd_configuration:
        operation: 'addNetworkObject'
        data:
          name: 0
          description: 1.2
          subType: 0
          value: 1
          type: 1.1
          isSystemDefined: 1
        register_as: "testObj"
      register: result
      ignore_errors: yes
    - assert:
        that:
          - 'result.changed == false'
          - 'result.failed == true'
          - '6 == result.msg["Invalid data provided"]["invalid_type"] | length'
          - '{"actually_value": 0, "expected_type": "string", "path": "name"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": 1.2, "expected_type": "string", "path": "description"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": 0, "expected_type": "enum", "path": "subType"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": 1, "expected_type": "string", "path": "value"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": 1, "expected_type": "boolean", "path": "isSystemDefined"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
          - '{"actually_value": 1.1, "expected_type": "string", "path": "type"}
                              in result.msg["Invalid data provided"]["invalid_type"]'
