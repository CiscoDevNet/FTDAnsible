- hosts: vftd
  connection: httpapi
  tasks:
    - name: create auxilary network object
      ftd_network_object:
        operation: 'addNetworkObject'
        name: "ansible-test-network"
        description: "Ansible Integration tests in action"
        subType: "HOST"
        value: "192.22.22.24"
        type: "networkobject"
        register_as: "testNetworkObj"


    - name: addAccessRule should create a new access rule
      ftd_access_rule:
        operation: 'addAccessRule'
        name: "ansible-test-accessrule"
        type: "accessrule"
        parentId: "default"
        sourceNetworks:
          - "{{ testNetworkObj }}"
        ruleAction: "PERMIT"
        eventLogAction: "LOG_BOTH"
        register_as: "testRuleObj"
      register: result
    - assert:
        that:
          - result.changed == true
          - testRuleObj['name'] == "ansible-test-accessrule"


    - name: addAccessRule should NOT create an access rule when the rule with the same name exists
      ftd_access_rule:
        operation: 'addAccessRule'
        name: "ansible-test-accessrule"
        type: "accessrule"
        parentId: "default"
        sourceNetworks:
          - "{{ testNetworkObj }}"
        ruleAction: "PERMIT"
        eventLogAction: "LOG_BOTH"
        register_as: "sameRuleObj"
      register: result
    - assert:
        that:
          - result.changed == false
          - testRuleObj['id'] == sameRuleObj['id']
          - testRuleObj['name'] == sameRuleObj['name']


    - name: addAccessRule should raise an error when the rule with the same name but different params exists
      ftd_access_rule:
        operation: 'addAccessRule'
        name: "ansible-test-accessrule"
        type: "accessrule"
        parentId: "default"
        destinationNetworks:
          - "{{ testNetworkObj }}"
        ruleAction: "DENY"
        eventLogAction: "LOG_BOTH"
      register: result
      ignore_errors: yes
    - assert:
        that:
          - result.changed == false
          - result.failed == true
          - "'An object with the same name but different parameters already exists' in result.msg"


    - name: editAccessRule should update the existing rule
      ftd_access_rule:
        operation: 'editAccessRule'
        objId: "{{ testRuleObj['id'] }}"
        ruleId: "{{ testRuleObj['ruleId'] }}"
        version: "{{ testRuleObj['version'] }}"
        name: "ansible-test-accessrule"
        type: "accessrule"
        parentId: "default"
        destinationNetworks:
          - "{{ testNetworkObj }}"
        ruleAction: "DENY"
        eventLogAction: "LOG_BOTH"
        register_as: "updatedRuleObj"
      register: result
    - assert:
        that:
          - result.changed == true
          - updatedRuleObj['id'] == testRuleObj['id']
          - updatedRuleObj['ruleAction'] == "DENY"


    - name: editAccessRule should NOT update the rule if there are no changes
      ftd_access_rule:
        operation: 'editAccessRule'
        objId: "{{ updatedRuleObj['id'] }}"
        ruleId: "{{ updatedRuleObj['ruleId'] }}"
        version: "{{ updatedRuleObj['version'] }}"
        name: "ansible-test-accessrule"
        type: "accessrule"
        parentId: "default"
        destinationNetworks:
          - "{{ testNetworkObj }}"
        ruleAction: "DENY"
        eventLogAction: "LOG_BOTH"
        register_as: "updatedRuleObj"
      register: result
    - assert:
        that:
          - result.changed == false
          - updatedRuleObj['id'] == testRuleObj['id']


    - name: upsertAccessRule should update the existing rule when it exists
      ftd_access_rule:
        operation: 'upsertAccessRule'
        objId: "{{ updatedRuleObj['id'] }}"
        ruleId: "{{ updatedRuleObj['ruleId'] }}"
        version: "{{ updatedRuleObj['version'] }}"
        name: "ansible-test-accessrule"
        type: "accessrule"
        parentId: "default"
        destinationNetworks:
          - "{{ testNetworkObj }}"
        ruleAction: "PERMIT"
        eventLogAction: "LOG_BOTH"
        register_as: "upsertedRuleObj"
      register: result
    - assert:
        that:
          - result.changed == true
          - upsertedRuleObj['id'] == testRuleObj['id']
          - upsertedRuleObj['ruleAction'] == "PERMIT"


    - name: deleteAccessRule should delete the rule
      ftd_access_rule:
        operation: 'deleteAccessRule'
        objId: "{{ testRuleObj['id'] }}"
        parentId: "default"
      register: result
    - assert:
        that:
          - result.changed == true

    - name: delete auxilary network object
      ftd_network_object:
        operation: 'deleteNetworkObject'
        objId: "{{ testNetworkObj['id'] }}"