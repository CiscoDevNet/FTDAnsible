{
  "swagger": "2.0",
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "info": {
    "title": "Firepower Threat Defense REST API",
    "version": "2.0.0"
  },
  "basePath": "/api/fdm/v2",
  "definitions": {
    "AAAIdentitySourceStatus": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "INACTIVE"
      ]
    },
    "AAASetting": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "identitySourceGroup": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "description": {
          "type": "string"
        },
        "protocolType": {
          "type": "object",
          "$ref": "#/definitions/IdentitySourceProtocolType"
        },
        "useLocal": {
          "type": "object",
          "$ref": "#/definitions/UseLocal"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "aaasetting"
        }
      },
      "required": [
        "identitySourceGroup",
        "useLocal",
        "protocolType",
        "type"
      ]
    },
    "AAASettingWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AAASetting"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AccessControlRuleBase$EventLogAction": {
      "type": "string",
      "enum": [
        "LOG_FLOW_START",
        "LOG_FLOW_END",
        "LOG_BOTH",
        "LOG_NONE"
      ]
    },
    "AccessControlRuleBase$AcRuleAction": {
      "type": "string",
      "enum": [
        "PERMIT",
        "TRUST",
        "DENY"
      ]
    },
    "AccessControlRuleDeployInfo": {
      "type": "object",
      "properties": {
        "order": {
          "type": "integer"
        },
        "ruleId": {
          "type": "integer"
        },
        "eventLogAction": {
          "type": "object",
          "$ref": "#/definitions/AccessControlRuleBase$EventLogAction"
        },
        "ruleUuid": {
          "type": "string"
        },
        "numRemarkLines": {
          "type": "integer"
        },
        "aclLineChecksums": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "default": "accesscontrolruledeployinfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "AccessDefaultAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/AccessControlRuleBase$AcRuleAction"
        },
        "eventLogAction": {
          "type": "object",
          "$ref": "#/definitions/AccessControlRuleBase$EventLogAction"
        },
        "intrusionPolicy": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "syslogServer": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "accessdefaultaction"
        }
      },
      "required": [
        "type"
      ]
    },
    "AccessPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "defaultAction": {
          "type": "object",
          "$ref": "#/definitions/AccessDefaultAction"
        },
        "sslPolicy": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "identityPolicySetting": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "securityIntelligence": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "accesspolicy"
        }
      },
      "required": [
        "type"
      ]
    },
    "AccessPolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AccessPolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AccessPolicyDeployInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "ruleContainerUuid": {
          "type": "string"
        },
        "deployedOnDevice": {
          "type": "boolean"
        },
        "ruleDeployInfoEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessControlRuleDeployInfo"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "accesspolicydeployinfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "AccessRule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ruleId": {
          "type": "integer"
        },
        "sourceZones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationZones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "sourceNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "sourcePorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationPorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ruleAction": {
          "type": "object",
          "$ref": "#/definitions/AccessControlRuleBase$AcRuleAction"
        },
        "eventLogAction": {
          "type": "object",
          "$ref": "#/definitions/AccessControlRuleBase$EventLogAction"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "embeddedAppFilter": {
          "type": "object",
          "$ref": "#/definitions/EmbeddedAppFilter"
        },
        "urlFilter": {
          "type": "object",
          "$ref": "#/definitions/EmbeddedURLFilter"
        },
        "intrusionPolicy": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "filePolicy": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "logFiles": {
          "type": "boolean"
        },
        "syslogServer": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "accessrule"
        }
      },
      "required": [
        "type"
      ]
    },
    "AccessRuleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AccessRule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ActiveDirectoryRealm": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "directoryConfigurations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DirectoryConfiguration"
          }
        },
        "enabled": {
          "type": "boolean"
        },
        "systemDefined": {
          "type": "boolean"
        },
        "realmId": {
          "type": "integer"
        },
        "dirUsername": {
          "type": "string"
        },
        "dirPassword": {
          "type": "string",
          "default": "*********"
        },
        "baseDN": {
          "type": "string"
        },
        "adPrimaryDomain": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "activedirectoryrealm"
        }
      },
      "required": [
        "dirUsername",
        "adPrimaryDomain",
        "dirPassword",
        "baseDN",
        "type"
      ]
    },
    "ActiveDirectoryRealmWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ActiveDirectoryRealm"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ActiveUserSessions": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "identitySourceId": {
          "type": "string"
        },
        "issuedAt": {
          "type": "integer"
        },
        "expiresAt": {
          "type": "integer"
        },
        "sessionDuration": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ActiveUserSessions"
        }
      },
      "required": [
        "type"
      ]
    },
    "ActiveUserSessionsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ActiveUserSessions"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "Application": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "appId": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "tagIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "categoryIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "id": {
          "type": "string"
        },
        "applicationTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ApplicationType"
          }
        },
        "productivity": {
          "type": "integer"
        },
        "risk": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "default": "application"
        }
      },
      "required": [
        "appId",
        "type"
      ]
    },
    "ApplicationWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/Application"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ApplicationCategory": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "appId": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "applicationcategory"
        }
      },
      "required": [
        "appId",
        "type"
      ]
    },
    "ApplicationCategoryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationCategory"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ApplicationFilter": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "applications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ApplicationFilterCondition"
          }
        },
        "type": {
          "type": "string",
          "default": "applicationfilter"
        }
      },
      "required": [
        "type"
      ]
    },
    "ApplicationFilterWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationFilter"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ApplicationFilterCondition": {
      "type": "object",
      "properties": {
        "risks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RiskCondition"
          }
        },
        "productivities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProductivityCondition"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "filter": {
          "type": "string"
        },
        "applicationTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/TypeCondition"
          }
        },
        "type": {
          "type": "string",
          "default": "applicationfiltercondition"
        }
      },
      "required": [
        "type"
      ]
    },
    "ApplicationTag": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "appId": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "applicationtag"
        }
      },
      "required": [
        "appId",
        "type"
      ]
    },
    "ApplicationTagWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationTag"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ApplicationType": {
      "type": "string",
      "enum": [
        "SERVER",
        "CLIENT",
        "WEBAPP"
      ]
    },
    "ArchivedBackup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "fileSize": {
          "type": "integer"
        },
        "archiveName": {
          "type": "string"
        },
        "originalScheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "backupLocation": {
          "type": "object",
          "$ref": "#/definitions/BackupLocation"
        },
        "model": {
          "type": "string"
        },
        "softwareVersion": {
          "type": "string"
        },
        "vdbVersion": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "modelNumber": {
          "type": "string"
        },
        "modelId": {
          "type": "string"
        },
        "buildVersion": {
          "type": "string"
        },
        "schemaVersion": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "archivedbackup"
        }
      },
      "required": [
        "type"
      ]
    },
    "ArchivedBackupWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ArchivedBackup"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AuthAction": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "PASSIVE",
        "NO_AUTH"
      ]
    },
    "AuthType": {
      "type": "string",
      "enum": [
        "HTTP_BASIC",
        "NTLM",
        "HTTP_NEGOTIATE",
        "HTTP_RESPONSE_PAGE"
      ]
    },
    "BackupFile": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "BackupFile"
        }
      },
      "required": [
        "type"
      ]
    },
    "BackupFileWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/BackupFile"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "BackupImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "backupLocation": {
          "type": "object",
          "$ref": "#/definitions/BackupLocation"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "backupimmediate"
        }
      },
      "required": [
        "type"
      ]
    },
    "BackupImmediateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/BackupImmediate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "BackupScheduled": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "runTimes": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "backupLocation": {
          "type": "object",
          "$ref": "#/definitions/BackupLocation"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "backupscheduled"
        }
      },
      "required": [
        "type"
      ]
    },
    "BackupScheduledWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/BackupScheduled"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "BreakHAStatus": {
      "type": "object",
      "properties": {
        "statusMessage": {
          "type": "string"
        },
        "cliErrorMessage": {
          "type": "string"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/DeploymentStatus$DeploymentState"
        },
        "queuedTime": {
          "type": "integer"
        },
        "startTime": {
          "type": "integer"
        },
        "endTime": {
          "type": "integer"
        },
        "statusMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "modifiedObjects": {
          "type": "object"
        }
      }
    },
    "BreakHAStatusWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/BreakHAStatus"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "BridgeGroupInterface": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hardwareName": {
          "type": "string"
        },
        "monitorInterface": {
          "type": "boolean"
        },
        "ipv4": {
          "type": "object",
          "$ref": "#/definitions/InterfaceIPv4"
        },
        "ipv6": {
          "type": "object",
          "$ref": "#/definitions/InterfaceIPv6"
        },
        "selectedInterfaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "bridgeGroupId": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "bridgegroupinterface"
        }
      },
      "required": [
        "monitorInterface",
        "type"
      ]
    },
    "BridgeGroupInterfaceWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/BridgeGroupInterface"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "BridgeGroupInterfaceIdInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "bridgeGroupIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "recycledBridgeGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "bridgegroupinterfaceidinfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "CertFileUploadStatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "cert": {
          "type": "string"
        },
        "privateKey": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "certfileuploadstatus"
        }
      },
      "required": [
        "type"
      ]
    },
    "CertFileUploadStatusWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/CertFileUploadStatus"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "CertFileUploadStatus$CertFileUploadType": {},
    "CliDeploymentError": {
      "type": "object",
      "properties": {
        "deploymentStatusUuid": {
          "type": "string"
        },
        "cliErrorMessage": {
          "type": "string"
        },
        "blockType": {
          "type": "string",
          "enum": [
            "FDM_CLI_DEFAULT",
            "FDM_CLI",
            "SMART_CLI",
            "FLEX_CLI"
          ]
        },
        "blockUuid": {
          "type": "string"
        },
        "errorLineId": {
          "type": "integer"
        },
        "negateLine": {
          "type": "boolean"
        },
        "blockStartLineId": {
          "type": "integer"
        },
        "blockEndLineId": {
          "type": "integer"
        },
        "cliLines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "CliDeploymentError"
        }
      },
      "required": [
        "type"
      ]
    },
    "CliDeploymentErrorWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/CliDeploymentError"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "Clipboard": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "Clipboard"
        }
      },
      "required": [
        "type"
      ]
    },
    "ClipboardWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/Clipboard"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "CloudCommunicationSettings": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "telemetryEnabled": {
          "type": "boolean"
        },
        "defenseOrchestratorEnabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "cloudcommunicationsettings"
        }
      },
      "required": [
        "type"
      ]
    },
    "CloudCommunicationSettingsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudCommunicationSettings"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "CloudConfig": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "enableAutomaticUpdates": {
          "type": "boolean"
        },
        "queryCloudUnknown": {
          "type": "boolean"
        },
        "urlCacheReloadTTL": {
          "type": "object",
          "$ref": "#/definitions/URLCacheReloadTTL"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "cloudconfig"
        }
      },
      "required": [
        "type"
      ]
    },
    "CloudConfigWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudConfig"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "CloudServicesInfo": {
      "type": "object",
      "properties": {
        "servicesPortalURL": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "statusDescription": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "CloudServicesInfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "CloudServicesInfoWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudServicesInfo"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "Command": {
      "type": "object",
      "properties": {
        "commandInput": {
          "type": "string"
        },
        "commandOutput": {
          "type": "string"
        },
        "timeOut": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "Command"
        }
      },
      "required": [
        "type",
        "commandInput"
      ]
    },
    "CommandWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/Command"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "CommandAutoComplete": {
      "type": "object",
      "properties": {
        "autoCompleteCommands": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "CommandAutoComplete"
        }
      },
      "required": [
        "type"
      ]
    },
    "CommandAutoCompleteWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/CommandAutoComplete"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ConnectivitySetting": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tcpMaxSegmentSize": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "connectivitysetting"
        }
      },
      "required": [
        "tcpMaxSegmentSize",
        "type"
      ]
    },
    "Continent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "integer"
        },
        "deprecated": {
          "type": "boolean"
        },
        "countries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "countryCodes": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "continent"
        }
      },
      "required": [
        "code",
        "type"
      ]
    },
    "ContinentWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/Continent"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "Country": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "integer"
        },
        "deprecated": {
          "type": "boolean"
        },
        "iso2": {
          "type": "string"
        },
        "iso3": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "country"
        }
      },
      "required": [
        "code",
        "type"
      ]
    },
    "CountryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/Country"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DHCPServer": {
      "type": "object",
      "properties": {
        "enableDHCP": {
          "type": "boolean"
        },
        "addressPool": {
          "type": "string"
        },
        "interface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "dhcpserver"
        }
      },
      "required": [
        "enableDHCP",
        "addressPool",
        "interface",
        "type"
      ]
    },
    "DHCPServerContainer": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "autoConfig": {
          "type": "boolean"
        },
        "primaryDNS": {
          "type": "string"
        },
        "secondaryDNS": {
          "type": "string"
        },
        "primaryWINS": {
          "type": "string"
        },
        "secondaryWINS": {
          "type": "string"
        },
        "servers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DHCPServer"
          }
        },
        "id": {
          "type": "string"
        },
        "interface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "dhcpservercontainer"
        }
      },
      "required": [
        "autoConfig",
        "type"
      ]
    },
    "DHCPServerContainerWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DHCPServerContainer"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DatabaseInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "softwareVersion": {
          "type": "string"
        },
        "buildVersion": {
          "type": "string"
        },
        "restoredFromBackup": {
          "type": "object",
          "$ref": "#/definitions/BackupStateType"
        },
        "schemaVersion": {
          "type": "string"
        },
        "configDBVersion": {
          "type": "string"
        },
        "firewallConfigChecksum": {
          "type": "string"
        },
        "isBootstrapSuccessFul": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "databaseinfo"
        }
      },
      "required": [
        "buildVersion",
        "schemaVersion",
        "type",
        "softwareVersion"
      ]
    },
    "DbCacheEntityBase$DbCacheState": {
      "type": "string",
      "enum": [
        "DEPLOYING",
        "DEPLOYED",
        "HISTORIC"
      ]
    },
    "DefaultIdentityRule": {
      "type": "object",
      "properties": {
        "authAction": {
          "type": "object",
          "$ref": "#/definitions/AuthAction"
        },
        "type": {
          "type": "string",
          "default": "defaultidentityrule"
        }
      },
      "required": [
        "type"
      ]
    },
    "DeployedConfigChecksum": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "checksum": {
          "type": "string"
        },
        "lastUpdatedTimestamp": {
          "type": "integer"
        },
        "updatedFrom": {
          "type": "object",
          "$ref": "#/definitions/DeployedConfigChecksumType"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "deployedconfigchecksum"
        }
      },
      "required": [
        "type"
      ]
    },
    "DeployedConfigChecksumType": {
      "type": "string",
      "enum": [
        "DEPLOYED_LOCALLY",
        "SYNCED_FROM_PEER"
      ]
    },
    "DeploymentData": {
      "type": "object",
      "properties": {
        "numberOfObjectsToDeploy": {
          "type": "integer"
        },
        "deployedConfigChecksum": {
          "type": "object",
          "$ref": "#/definitions/DeployedConfigChecksum"
        },
        "forceDeployment": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "DeploymentData"
        }
      },
      "required": [
        "type"
      ]
    },
    "DeploymentDataWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentData"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DeploymentInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "lastDeployedConfigChecksum": {
          "type": "string"
        },
        "isEasySetupDeployment": {
          "type": "boolean"
        },
        "forceDeployment": {
          "type": "boolean"
        },
        "requiresCacheRefresh": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "deploymentinfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "DeploymentSchedule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "runTimes": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "deploymentId": {
          "type": "integer"
        },
        "deploymentStatusUuid": {
          "type": "string"
        },
        "deploymentType": {
          "type": "object",
          "$ref": "#/definitions/DeploymentSchedule$DeploymentType"
        },
        "resumeDeployment": {
          "type": "boolean"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "deploymentschedule"
        }
      },
      "required": [
        "type"
      ]
    },
    "DeploymentSchedule$DeploymentType": {
      "type": "string",
      "enum": [
        "NEW",
        "EASY_SETUP_DEPLOYMENT",
        "HA_JOIN_DEPLOYMENT",
        "HA_BREAK_DEPLOYMENT"
      ]
    },
    "DeploymentStatus": {
      "type": "object",
      "properties": {
        "statusMessage": {
          "type": "string"
        },
        "cliErrorMessage": {
          "type": "string"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/DeploymentStatus$DeploymentState"
        },
        "queuedTime": {
          "type": "integer"
        },
        "startTime": {
          "type": "integer"
        },
        "endTime": {
          "type": "integer"
        },
        "statusMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "modifiedObjects": {
          "type": "object"
        }
      }
    },
    "DeploymentStatusWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentStatus"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DeploymentStatus$DeploymentState": {
      "type": "string",
      "enum": [
        "QUEUED",
        "DEPLOYING",
        "DEPLOYED",
        "DEPLOY_FAILED",
        "DEPLOY_TIMEOUT"
      ]
    },
    "Device": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "device"
        }
      },
      "required": [
        "type"
      ]
    },
    "DirectoryConfiguration": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "encryptionProtocol": {
          "type": "object",
          "$ref": "#/definitions/EncryptionProtocol"
        },
        "encryptionCert": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "directoryconfiguration"
        }
      },
      "required": [
        "hostname",
        "port",
        "type"
      ]
    },
    "DirectoryUserDownloadImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "directoryuserdownloadimmediate"
        }
      },
      "required": [
        "type"
      ]
    },
    "DirectoryUserImportImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "directoryuserimportimmediate"
        }
      },
      "required": [
        "type"
      ]
    },
    "EmbeddedAppFilter": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "applicationFilters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ApplicationFilterCondition"
          }
        },
        "type": {
          "type": "string",
          "default": "embeddedappfilter"
        }
      },
      "required": [
        "type"
      ]
    },
    "EmbeddedAppFilterBase": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ApplicationFilterCondition"
          }
        },
        "type": {
          "type": "string",
          "default": "embeddedappfilterbase"
        }
      },
      "required": [
        "type"
      ]
    },
    "EmbeddedURLFilter": {
      "type": "object",
      "properties": {
        "urlObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "urlCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/URLCategoryMatcher"
          }
        },
        "type": {
          "type": "string",
          "default": "embeddedurlfilter"
        }
      },
      "required": [
        "type"
      ]
    },
    "EncryptionProtocol": {
      "type": "string",
      "enum": [
        "STARTTLS",
        "LDAPS",
        "NONE"
      ]
    },
    "EntryAction": {
      "type": "string",
      "enum": [
        "PERMIT",
        "DENY"
      ]
    },
    "ExportConfigFile": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ExportConfigFile"
        }
      },
      "required": [
        "type"
      ]
    },
    "ExportConfigJobHistory": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "exportconfigjobhistory"
        }
      },
      "required": [
        "type"
      ]
    },
    "ExportConfigJobHistoryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ExportConfigJobHistory"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ExternalCACertificate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "cert": {
          "type": "string",
          "default": "*********"
        },
        "privateKey": {
          "type": "string",
          "default": "*********"
        },
        "passPhrase": {
          "type": "string"
        },
        "issuerCommonName": {
          "type": "string"
        },
        "issuerCountry": {
          "type": "string"
        },
        "issuerLocality": {
          "type": "string"
        },
        "issuerOrganization": {
          "type": "string"
        },
        "issuerOrganizationUnit": {
          "type": "string"
        },
        "issuerState": {
          "type": "string"
        },
        "subjectCommonName": {
          "type": "string"
        },
        "subjectCountry": {
          "type": "string"
        },
        "subjectDistinguishedName": {
          "type": "string"
        },
        "subjectLocality": {
          "type": "string"
        },
        "subjectOrganization": {
          "type": "string"
        },
        "subjectOrganizationUnit": {
          "type": "string"
        },
        "subjectState": {
          "type": "string"
        },
        "validityStartDate": {
          "type": "string"
        },
        "validityEndDate": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "externalcacertificate"
        }
      },
      "required": [
        "type"
      ]
    },
    "ExternalCACertificateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ExternalCACertificate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ExternalCACertificateGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "type": {
          "type": "string",
          "default": "externalcacertificategroup"
        }
      },
      "required": [
        "type"
      ]
    },
    "ExternalCertificate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "cert": {
          "type": "string",
          "default": "*********"
        },
        "privateKey": {
          "type": "string",
          "default": "*********"
        },
        "passPhrase": {
          "type": "string"
        },
        "issuerCommonName": {
          "type": "string"
        },
        "issuerCountry": {
          "type": "string"
        },
        "issuerLocality": {
          "type": "string"
        },
        "issuerOrganization": {
          "type": "string"
        },
        "issuerOrganizationUnit": {
          "type": "string"
        },
        "issuerState": {
          "type": "string"
        },
        "subjectCommonName": {
          "type": "string"
        },
        "subjectCountry": {
          "type": "string"
        },
        "subjectDistinguishedName": {
          "type": "string"
        },
        "subjectLocality": {
          "type": "string"
        },
        "subjectOrganization": {
          "type": "string"
        },
        "subjectOrganizationUnit": {
          "type": "string"
        },
        "subjectState": {
          "type": "string"
        },
        "validityStartDate": {
          "type": "string"
        },
        "validityEndDate": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "externalcertificate"
        }
      },
      "required": [
        "type"
      ]
    },
    "ExternalCertificateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ExternalCertificate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "FQDNDNSResolution": {
      "type": "string",
      "enum": [
        "IPV4_ONLY",
        "IPV6_ONLY",
        "IPV4_AND_IPV6"
      ]
    },
    "FQDNId": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "currentFqdnId": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "fqdnid"
        }
      },
      "required": [
        "type"
      ]
    },
    "FQDNSupportedPolicyEnum": {
      "type": "string",
      "enum": [
        "AC_POLICY"
      ]
    },
    "FeatureInformation": {
      "type": "object",
      "properties": {
        "featureList": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/FeatureInformation$Feature"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "FeatureInformation"
        }
      },
      "required": [
        "type"
      ]
    },
    "FeatureInformationWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/FeatureInformation"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "FeatureInformation$Feature": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FileEntity": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "FileEntity"
        }
      },
      "required": [
        "type"
      ]
    },
    "FilePolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "policyType": {
          "type": "object",
          "$ref": "#/definitions/CannedFilePolicy"
        },
        "type": {
          "type": "string",
          "default": "filepolicy"
        }
      },
      "required": [
        "description",
        "type"
      ]
    },
    "FilePolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/FilePolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "FileUploadStatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "fileuploadstatus"
        }
      },
      "required": [
        "type"
      ]
    },
    "FileUploadStatusWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/FileUploadStatus"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "GeoLocation": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "geolocation"
        }
      },
      "required": [
        "type"
      ]
    },
    "GeoLocationWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoLocation"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "GeolocationUpdateImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "geolocationupdateimmediate"
        }
      },
      "required": [
        "type"
      ]
    },
    "GeolocationUpdateImmediateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/GeolocationUpdateImmediate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "GeolocationUpdateSchedule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "runTimes": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "geolocationupdateschedule"
        }
      },
      "required": [
        "type"
      ]
    },
    "GeolocationUpdateScheduleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/GeolocationUpdateSchedule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "GeolocationVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "geolocationDbVersion": {
          "type": "string"
        },
        "lastSuccessGeolocationDate": {
          "type": "string"
        },
        "countryCodeMapVersion": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "geolocationversion"
        }
      },
      "required": [
        "type"
      ]
    },
    "HAIPv4Address": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "netmask": {
          "type": "string"
        },
        "standbyIpAddress": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "haipv4address"
        }
      },
      "required": [
        "type"
      ]
    },
    "HAIPv6Address": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "standbyIpAddress": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "haipv6address"
        }
      },
      "required": [
        "type"
      ]
    },
    "HaBreakCleanupImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "habreakcleanupimmediate"
        }
      },
      "required": [
        "type"
      ]
    },
    "HaConfigSyncImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "restore": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "haconfigsyncimmediate"
        }
      },
      "required": [
        "type"
      ]
    },
    "ICMPv4Codes": {
      "type": "string",
      "enum": [
        "ANY_IPV4",
        "NET_UNREACHABLE",
        "HOST_UNREACHABLE",
        "PROTOCOL_UNREACHABLE",
        "PORT_UNREACHABLE",
        "FRAGMENTATION_NEEDED",
        "SOURCE_ROUTE_FAILED",
        "DEST_NETWORK_UNKNOWN",
        "DEST_HOST_UNKNOWN",
        "SRC_HOST_ISOLATED",
        "COMMUNICATION_DEST_NET_PROHIBITED",
        "COMMUNICATION_DEST_HOST_PROHIBITED",
        "DEST_NET_UNREACHABLE_FOR_TOS",
        "DEST_HOST_UNREACHABLE_FOR_TOS",
        "COMM_ADMINISTRATIVELY_PROHIBITED",
        "HOST_PRECEDENCE_VIOLATION",
        "PRECEDENCE_CUTOFF",
        "REDIRECT_DATAGRAM_NETWORK",
        "REDIRECT_DATAGRAM_HOST",
        "REDIRECT_DATAGRAM_SERVICE_NETWORK",
        "REDIRECT_DATAGRAM_SERVICE_HOST",
        "ALTERNATE_HOST_ADDR",
        "NORMAL_ROUTER_ADV",
        "DO_NOT_ROUTE_COMMON_TRAFFIC",
        "TTL_EXPIRED_TRANSIT",
        "FRAG_ASSEMBLY",
        "PTR_ERROR",
        "MISSING_REQD_OPTION",
        "BAD_LENGTH",
        "BAD_SPI",
        "AUTH_FAILED",
        "DECOMPRESSION_FAILED",
        "DECRYPTION_FAILED",
        "NEED_AUTHENTICATION",
        "NEED_AUTHORIZATION"
      ]
    },
    "ICMPv4PortObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "icmpv4Type": {
          "type": "object",
          "$ref": "#/definitions/ICMPv4Types"
        },
        "icmpv4Code": {
          "type": "object",
          "$ref": "#/definitions/ICMPv4Codes"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "icmpv4portobject"
        }
      },
      "required": [
        "icmpv4Type",
        "type"
      ]
    },
    "ICMPv4PortObjectWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ICMPv4PortObject"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ICMPv4Types": {
      "type": "string",
      "enum": [
        "ANY",
        "ECHO_REPLY",
        "DESTINATION_UNREACHABLE",
        "SOURCE_QUENCH",
        "REDIRECT_MESSAGE",
        "ALTERNATE_HOST_ADDRESS",
        "ECHO_REQUEST",
        "ROUTER_ADVERTISEMENT",
        "ROUTER_SOLICITATION",
        "TIME_EXCEEDED",
        "PARAMETER_PROBLEM",
        "TIMESTAMP",
        "TIMESTAMP_REPLY",
        "INFO_REQUEST",
        "INFO_REPLY",
        "ADDR_MASK_REQUEST",
        "ADDR_MASK_REPLY",
        "TRACEROUTE",
        "DATAGRAM_CONVERSION_ERROR",
        "MOBILE_HOST_REDIRECT",
        "WHERE_ARE_YOU",
        "HERE_I_AM",
        "MOBILE_REG_REQUEST",
        "MOBILE_REG_REPLY",
        "DOMAIN_NAME_REQUEST",
        "DOMAIN_NAME_REPLY",
        "SKIP_ALGORITHM_DISCOVERY_PROTOCOL",
        "PHOTURIS",
        "EXPERIMENTAL_MOB_PROTOCOLS"
      ]
    },
    "ICMPv6Codes": {
      "type": "string",
      "enum": [
        "ANY_IPV6",
        "NO_ROUTE_DEST",
        "COMMUNICATION_PROHIBITED",
        "BEYOND_SCOPE_SRC_ADDR",
        "ADDRESS_UNREACHABLE",
        "PORT_UNREACHABLE",
        "SOURCE_ADDRESS_FAILED",
        "REJECT_ROUTE",
        "ERROR_SRC_ROUTING_HEADER",
        "HOP_LIMIT_EXCEEDED",
        "FRAGMENT_REASSEMBLY_TIME_EXCEEDED",
        "ERRONEOUS_HEADER_ENCOUNTERED",
        "UNRECOGNIZED_NEXT_HEADER_TYPE_ENCOUNTERED",
        "UNRECOGNIZED_IPv6_OPTION_ENCOUNTERED",
        "ROUTER_RENUMBERING_COMMAND",
        "ROUTER_RENUMBERING_RESULT",
        "SEQUENCE_NUMBER_RESET",
        "DATA_CONTAINS_IPv6",
        "DATA_CONTAINS_NAME",
        "DATA_CONTAINS_IPv4",
        "SUCCESSFUL_REPLY",
        "RESPONDER_REFUSES_ANSWER",
        "QTYPE_UNKNOWN"
      ]
    },
    "ICMPv6PortObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "icmpv6Type": {
          "type": "object",
          "$ref": "#/definitions/ICMPv6Types"
        },
        "icmpv6Code": {
          "type": "object",
          "$ref": "#/definitions/ICMPv6Codes"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "icmpv6portobject"
        }
      },
      "required": [
        "icmpv6Type",
        "type"
      ]
    },
    "ICMPv6PortObjectWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ICMPv6PortObject"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ICMPv6Types": {
      "type": "string",
      "enum": [
        "ANY",
        "DESTINATION_UNREACHABLE",
        "PACKET_TOO_BIG",
        "TIME_EXCEEDED",
        "PARAMETER_PROBLEM",
        "ECHO_REQUEST",
        "ECHO_REPLY",
        "MULTICAST_LISTENER_QUERY",
        "MULTICAST_LISTENER_REPORT",
        "MULTICAST_LISTENER_DONE",
        "ROUTER_SOLICITATION",
        "ROUTER_ADVERTISEMENT",
        "NEIGHBOUR_SOLICITATION",
        "NEIGHBOUR_ADVERTISEMENT",
        "REDIRECT_MESSAGE",
        "ROUTER_RENUMBERING",
        "ICMP_NODE_INFO_QUERY",
        "ICMP_NODE_INFO_RESPONSE",
        "INVERSE_NEIGHBOR_DISCOVERY_SOLICITATION",
        "INVERSE_NEIGHBOR_DISCOVERY_ADVERTISEMENT",
        "VER2_MULTICAST_LISTENER_REPORT",
        "HOME_AGENT_ADDR_DISCOVERY_REQ",
        "HOME_AGENT_ADDR_DISCOVERY_REPLY",
        "MOBILE_PREFIX_SOLICITATION",
        "MOBILE_PREFIX_ADVERTISEMENT",
        "CERT_PATH_SOLICITATION",
        "CERT_PATH_ADVERTISEMENT",
        "ICMP_EXP_MOBILITY_PROTOCOLS",
        "MULTICAST_ROUTER_ADVERTISEMENT",
        "MULTICAST_ROUTER_SOLICITATION",
        "MULTICAST_ROUTER_TERMINATION",
        "FMIPv6_MSG",
        "RPL_CTRL_MSG",
        "PRIVATE_EXPERIMENTATION",
        "PRIVATE_EXPERIMENTATION_EXTENDED"
      ]
    },
    "IPSRuleClassification": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "ordinal": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ipsruleclassification"
        }
      },
      "required": [
        "description",
        "type",
        "revision"
      ]
    },
    "IPv4Address": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "netmask": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ipv4address"
        }
      },
      "required": [
        "type"
      ]
    },
    "IPv4Type": {
      "type": "string",
      "enum": [
        "DHCP",
        "STATIC"
      ]
    },
    "IPv6Address": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ipv6address"
        }
      },
      "required": [
        "type"
      ]
    },
    "IPv6Prefix": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ipv6prefix"
        }
      },
      "required": [
        "type"
      ]
    },
    "ISEObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "iseobject"
        }
      },
      "required": [
        "type"
      ]
    },
    "IdentityPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "activeAuthPort": {
          "type": "integer"
        },
        "defaultIdentityRule": {
          "type": "object",
          "$ref": "#/definitions/DefaultIdentityRule"
        },
        "id": {
          "type": "string"
        },
        "activeAuthCertificate": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "identitypolicy"
        }
      },
      "required": [
        "type",
        "activeAuthPort"
      ]
    },
    "IdentityPolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IdentityPolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IdentityRule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ruleId": {
          "type": "integer"
        },
        "sourceZones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationZones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "sourceNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "sourcePorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationPorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "realm": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "guestAccessFallback": {
          "type": "boolean"
        },
        "authType": {
          "type": "object",
          "$ref": "#/definitions/AuthType"
        },
        "action": {
          "type": "object",
          "$ref": "#/definitions/AuthAction"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "identityrule"
        }
      },
      "required": [
        "type"
      ]
    },
    "IdentityRuleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IdentityRule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IdentityServicesEngine": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ftdCertificate": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "pxGridCertificate": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "mntCertificate": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "iseNetworkFilters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "enabled": {
          "type": "boolean"
        },
        "primaryIseServer": {
          "type": "string"
        },
        "secondaryIseServer": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "identityservicesengine"
        }
      },
      "required": [
        "pxGridCertificate",
        "mntCertificate",
        "ftdCertificate",
        "type",
        "enabled"
      ]
    },
    "IdentityServicesEngineWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IdentityServicesEngine"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IdentitySourceBase": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "identitysourcebase"
        }
      },
      "required": [
        "type"
      ]
    },
    "IdentitySourceCapabilities": {
      "type": "string",
      "enum": [
        "AUTHENTICATION",
        "AUTHORIZATION",
        "ACCOUNTING",
        "DIRECTORY_SERVICES",
        "PASSIVE_IDENTITY"
      ]
    },
    "InterfaceDuplexType": {
      "type": "string",
      "enum": [
        "AUTO",
        "HALF",
        "FULL",
        "IGNORE"
      ]
    },
    "InterfaceIPv4": {
      "type": "object",
      "properties": {
        "ipType": {
          "type": "object",
          "$ref": "#/definitions/IPv4Type"
        },
        "defaultRouteUsingDHCP": {
          "type": "boolean"
        },
        "dhcpRouteMetric": {
          "type": "integer"
        },
        "ipAddress": {
          "type": "object",
          "$ref": "#/definitions/HAIPv4Address"
        },
        "addressNull": {
          "type": "boolean"
        },
        "dhcp": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "default": "interfaceipv4"
        }
      },
      "required": [
        "type"
      ]
    },
    "InterfaceIPv6": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "autoConfig": {
          "type": "boolean"
        },
        "dhcpForManagedConfig": {
          "type": "boolean"
        },
        "dhcpForOtherConfig": {
          "type": "boolean"
        },
        "enableRA": {
          "type": "boolean"
        },
        "dadAttempts": {
          "type": "integer"
        },
        "linkLocalAddress": {
          "type": "object",
          "$ref": "#/definitions/IPv6Address"
        },
        "ipAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/HAIPv6Address"
          }
        },
        "prefixes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IPv6Prefix"
          }
        },
        "type": {
          "type": "string",
          "default": "interfaceipv6"
        }
      },
      "required": [
        "type"
      ]
    },
    "InterfaceInfo": {
      "type": "object",
      "properties": {
        "interfaceInfoList": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InterfaceInfoEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "InterfaceInfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "InterfaceInfoWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/InterfaceInfo"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "InterfaceInfoEntry": {
      "type": "object",
      "properties": {
        "interfaceId": {
          "type": "string"
        },
        "hardwareName": {
          "type": "string"
        },
        "speedCapability": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InterfaceSpeedType"
          }
        },
        "duplexCapability": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InterfaceDuplexType"
          }
        },
        "interfacePresent": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "InterfaceInfoEntry"
        }
      },
      "required": [
        "type"
      ]
    },
    "InterfaceModeType": {
      "type": "string",
      "enum": [
        "PASSIVE",
        "ROUTED"
      ]
    },
    "InterfaceSpeedType": {
      "type": "string",
      "enum": [
        "AUTO",
        "TEN",
        "HUNDRED",
        "THOUSAND",
        "TEN_THOUSAND",
        "NO_NEGOTIATE",
        "IGNORE"
      ]
    },
    "InternalCACertificate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "cert": {
          "type": "string",
          "default": "*********"
        },
        "privateKey": {
          "type": "string",
          "default": "*********"
        },
        "passPhrase": {
          "type": "string"
        },
        "issuerCommonName": {
          "type": "string"
        },
        "issuerCountry": {
          "type": "string"
        },
        "issuerLocality": {
          "type": "string"
        },
        "issuerOrganization": {
          "type": "string"
        },
        "issuerOrganizationUnit": {
          "type": "string"
        },
        "issuerState": {
          "type": "string"
        },
        "subjectCommonName": {
          "type": "string"
        },
        "subjectCountry": {
          "type": "string"
        },
        "subjectDistinguishedName": {
          "type": "string"
        },
        "subjectLocality": {
          "type": "string"
        },
        "subjectOrganization": {
          "type": "string"
        },
        "subjectOrganizationUnit": {
          "type": "string"
        },
        "subjectState": {
          "type": "string"
        },
        "validityStartDate": {
          "type": "string"
        },
        "validityEndDate": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "certType": {
          "type": "object",
          "$ref": "#/definitions/InternalCertificateType"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "internalcacertificate"
        }
      },
      "required": [
        "type"
      ]
    },
    "InternalCACertificateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/InternalCACertificate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "InternalCertificate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "cert": {
          "type": "string",
          "default": "*********"
        },
        "privateKey": {
          "type": "string",
          "default": "*********"
        },
        "passPhrase": {
          "type": "string"
        },
        "issuerCommonName": {
          "type": "string"
        },
        "issuerCountry": {
          "type": "string"
        },
        "issuerLocality": {
          "type": "string"
        },
        "issuerOrganization": {
          "type": "string"
        },
        "issuerOrganizationUnit": {
          "type": "string"
        },
        "issuerState": {
          "type": "string"
        },
        "subjectCommonName": {
          "type": "string"
        },
        "subjectCountry": {
          "type": "string"
        },
        "subjectDistinguishedName": {
          "type": "string"
        },
        "subjectLocality": {
          "type": "string"
        },
        "subjectOrganization": {
          "type": "string"
        },
        "subjectOrganizationUnit": {
          "type": "string"
        },
        "subjectState": {
          "type": "string"
        },
        "validityStartDate": {
          "type": "string"
        },
        "validityEndDate": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "certType": {
          "type": "object",
          "$ref": "#/definitions/InternalCertificateType"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "internalcertificate"
        }
      },
      "required": [
        "type"
      ]
    },
    "InternalCertificateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/InternalCertificate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "InternalCertificateType": {
      "type": "string",
      "enum": [
        "UPLOAD",
        "SELFSIGNED"
      ]
    },
    "IntrusionRuleInfo": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer"
        },
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "integer"
        },
        "preProcessorDependencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "intrusionruleinfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "IntrusionRuleMetaData": {
      "type": "object",
      "properties": {
        "defaultState": {
          "type": "object",
          "$ref": "#/definitions/IntrusionRuleState"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/IntrusionRuleState"
        },
        "enabledDueToDependency": {
          "type": "boolean"
        },
        "preProcessorDependencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "JobHistoryBackup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "archiveName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistorybackup"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryBackupWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/JobHistoryBackup"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "JobHistoryDeployment": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "deploymentStatusUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistorydeployment"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryDeploymentWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/JobHistoryDeployment"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "JobHistoryDirectoryUserDownload": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistorydirectoryuserdownload"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryDirectoryUserImport": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistorydirectoryuserimport"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryEntity": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistoryentity"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryEntityWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/JobHistoryEntity"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "JobHistoryEntity$JobHistoryStatus": {
      "type": "string",
      "enum": [
        "QUEUED",
        "IN_PROGRESS",
        "FAILED",
        "SUCCESS"
      ]
    },
    "JobHistoryGeolocation": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistorygeolocation"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryGeolocationWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/JobHistoryGeolocation"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "JobHistoryHaBreakCleanup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistoryhabreakcleanup"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryHaConfigSync": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "dataBaseFileName": {
          "type": "string"
        },
        "sruWorkingTgz": {
          "type": "string"
        },
        "transactionId": {
          "type": "integer"
        },
        "restore": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistoryhaconfigsync"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryHaConfigSyncWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/JobHistoryHaConfigSync"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "JobHistoryRestore": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistoryrestore"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistorySecurityIntelligenceFeedDownload": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistorysecurityintelligencefeeddownload"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistorySruUpdate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistorysruupdate"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistorySruUpdateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/JobHistorySruUpdate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "JobHistoryUpgrade": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistoryupgrade"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryVDBUpdate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistoryvdbupdate"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryVDBUpdateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/JobHistoryVDBUpdate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "JoinHAStatus": {
      "type": "object",
      "properties": {
        "statusMessage": {
          "type": "string"
        },
        "cliErrorMessage": {
          "type": "string"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/DeploymentStatus$DeploymentState"
        },
        "queuedTime": {
          "type": "integer"
        },
        "startTime": {
          "type": "integer"
        },
        "endTime": {
          "type": "integer"
        },
        "statusMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "modifiedObjects": {
          "type": "object"
        }
      }
    },
    "JoinHAStatusWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/JoinHAStatus"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "LDAPRealm": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "directoryConfigurations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DirectoryConfiguration"
          }
        },
        "enabled": {
          "type": "boolean"
        },
        "systemDefined": {
          "type": "boolean"
        },
        "realmId": {
          "type": "integer"
        },
        "dirUsername": {
          "type": "string"
        },
        "dirPassword": {
          "type": "string",
          "default": "*********"
        },
        "baseDN": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ldaprealm"
        }
      },
      "required": [
        "dirUsername",
        "dirPassword",
        "baseDN",
        "type"
      ]
    },
    "LinkState": {
      "type": "string",
      "enum": [
        "UP",
        "DOWN"
      ]
    },
    "LocalIdentitySource": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "localidentitysource"
        }
      },
      "required": [
        "type"
      ]
    },
    "LocalIdentitySourceWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/LocalIdentitySource"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ManagementIP": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "ipv4Mode": {
          "type": "object",
          "$ref": "#/definitions/ManagementIP$ipMode"
        },
        "ipv4Address": {
          "type": "string"
        },
        "ipv4NetMask": {
          "type": "string"
        },
        "ipv4Gateway": {
          "type": "string"
        },
        "ipv6Mode": {
          "type": "object",
          "$ref": "#/definitions/ManagementIP$ipMode"
        },
        "ipv6Address": {
          "type": "string"
        },
        "ipv6Prefix": {
          "type": "integer"
        },
        "ipv6Gateway": {
          "type": "string"
        },
        "dhcpServerEnabled": {
          "type": "boolean"
        },
        "dhcpServerAddressPool": {
          "type": "string"
        },
        "linkState": {
          "type": "object",
          "$ref": "#/definitions/LinkState"
        },
        "routeInternally": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "managementip"
        }
      },
      "required": [
        "routeInternally",
        "type"
      ]
    },
    "ManagementIPWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ManagementIP"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ManagementIP$ipMode": {
      "type": "string",
      "enum": [
        "STATIC",
        "DHCP"
      ]
    },
    "ManualNatRule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "sourceInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "destinationInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "natType": {
          "type": "object",
          "$ref": "#/definitions/NatRuleBase$NatType"
        },
        "patOptions": {
          "type": "object",
          "$ref": "#/definitions/PatOptions"
        },
        "netToNet": {
          "type": "boolean"
        },
        "noProxyArp": {
          "type": "boolean"
        },
        "dns": {
          "type": "boolean"
        },
        "interfaceIPv6": {
          "type": "boolean"
        },
        "routeLookup": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "interfaceInOriginalDestination": {
          "type": "boolean"
        },
        "interfaceInTranslatedSource": {
          "type": "boolean"
        },
        "originalSource": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "originalDestination": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "originalSourcePort": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "originalDestinationPort": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "translatedSource": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "translatedDestination": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "translatedSourcePort": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "translatedDestinationPort": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "unidirectional": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "manualnatrule"
        }
      },
      "required": [
        "natType",
        "type"
      ]
    },
    "ManualNatRuleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ManualNatRule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ManualNatRuleContainer": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "afterAuto": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "manualnatrulecontainer"
        }
      },
      "required": [
        "type"
      ]
    },
    "ManualNatRuleContainerWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ManualNatRuleContainer"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ManualNatRuleContainerDeployInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "deployedNodeUuids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "containerUuid": {
          "type": "string"
        },
        "deployed": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "manualnatrulecontainerdeployinfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "ModelClassDependency": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "sortedModelClassNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "modelclassdependency"
        }
      },
      "required": [
        "type"
      ]
    },
    "NTP": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "ntpServers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ntp"
        }
      },
      "required": [
        "ntpServers",
        "type"
      ]
    },
    "NTPWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/NTP"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "NTPStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "NTPStatus"
        }
      },
      "required": [
        "type"
      ]
    },
    "NTPStatusWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/NTPStatus"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "NatRuleBase$NatType": {
      "type": "string",
      "enum": [
        "STATIC",
        "DYNAMIC"
      ]
    },
    "NestedEntity": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "default": "nestedentity"
        }
      },
      "required": [
        "type"
      ]
    },
    "NetworkObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "subType": {
          "type": "object",
          "$ref": "#/definitions/NetworkObjectType"
        },
        "value": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "dnsResolution": {
          "type": "object",
          "$ref": "#/definitions/FQDNDNSResolution"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "networkobject"
        }
      },
      "required": [
        "subType",
        "type",
        "value"
      ]
    },
    "NetworkObjectWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/NetworkObject"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "NetworkObjectGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "type": {
          "type": "string",
          "default": "networkobjectgroup"
        }
      },
      "required": [
        "type"
      ]
    },
    "NetworkObjectGroupWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/NetworkObjectGroup"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "NetworkObjectType": {
      "type": "string",
      "enum": [
        "HOST",
        "NETWORK",
        "IPRANGE",
        "FQDN"
      ]
    },
    "ObjectNatRule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "sourceInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "destinationInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "natType": {
          "type": "object",
          "$ref": "#/definitions/NatRuleBase$NatType"
        },
        "patOptions": {
          "type": "object",
          "$ref": "#/definitions/PatOptions"
        },
        "netToNet": {
          "type": "boolean"
        },
        "noProxyArp": {
          "type": "boolean"
        },
        "dns": {
          "type": "boolean"
        },
        "interfaceIPv6": {
          "type": "boolean"
        },
        "routeLookup": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "originalNetwork": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "translatedNetwork": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "originalPort": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "translatedPort": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "interfaceInTranslatedNetwork": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "objectnatrule"
        }
      },
      "required": [
        "natType",
        "type"
      ]
    },
    "ObjectNatRuleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ObjectNatRule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ObjectNatRuleContainer": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "objectnatrulecontainer"
        }
      },
      "required": [
        "type"
      ]
    },
    "ObjectNatRuleContainerWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ObjectNatRuleContainer"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ObjectRevisionDbCache": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/DbCacheEntityBase$DbCacheState"
        },
        "revisionMapEntries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "objectrevisiondbcache"
        }
      },
      "required": [
        "type"
      ]
    },
    "ObjectUuidMapDbCache": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/DbCacheEntityBase$DbCacheState"
        },
        "uuidToNameMapEntries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "objectuuidmapdbcache"
        }
      },
      "required": [
        "type"
      ]
    },
    "PatOptions": {
      "type": "object",
      "properties": {
        "patPoolAddress": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "interfacePat": {
          "type": "boolean"
        },
        "roundRobin": {
          "type": "boolean"
        },
        "flat": {
          "type": "boolean"
        },
        "extended": {
          "type": "boolean"
        },
        "includeReserve": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "default": "patoptions"
        }
      },
      "required": [
        "type"
      ]
    },
    "Permission": {
      "type": "object",
      "properties": {
        "permissionType": {
          "type": "object",
          "$ref": "#/definitions/PermissionType"
        },
        "permittedResource": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "permission"
        }
      },
      "required": [
        "type"
      ]
    },
    "PermissionType": {
      "type": "string",
      "enum": [
        "READ",
        "WRITE",
        "NONE"
      ]
    },
    "PhysicalInterface": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hardwareName": {
          "type": "string"
        },
        "monitorInterface": {
          "type": "boolean"
        },
        "ipv4": {
          "type": "object",
          "$ref": "#/definitions/InterfaceIPv4"
        },
        "ipv6": {
          "type": "object",
          "$ref": "#/definitions/InterfaceIPv6"
        },
        "managementOnly": {
          "type": "boolean"
        },
        "linkState": {
          "type": "object",
          "$ref": "#/definitions/LinkState"
        },
        "mtu": {
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "macAddress": {
          "type": "string"
        },
        "standbyMacAddress": {
          "type": "string"
        },
        "speedType": {
          "type": "object",
          "$ref": "#/definitions/InterfaceSpeedType"
        },
        "duplexType": {
          "type": "object",
          "$ref": "#/definitions/InterfaceDuplexType"
        },
        "mode": {
          "type": "object",
          "$ref": "#/definitions/InterfaceModeType"
        },
        "managementInterface": {
          "type": "boolean"
        },
        "tenGigabitInterface": {
          "type": "boolean"
        },
        "gigabitInterface": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "physicalinterface"
        }
      },
      "required": [
        "mode",
        "monitorInterface",
        "type",
        "enabled",
        "mtu"
      ]
    },
    "PhysicalInterfaceWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/PhysicalInterface"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "PolicyRuleIdInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "accessRuleIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "recycledAccessRuleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tunnelRuleIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "recycledTunnelRuleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recycledSSLRuleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sslRuleIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "policyruleidinfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "PolicyRuleIdMapDbCache": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/DbCacheEntityBase$DbCacheState"
        },
        "accessRuleIdToRuleUuidMapEntries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tunnelRuleIdToRuleUuidMapEntries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sslRuleIdToRuleUuidMapEntries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "policyruleidmapdbcache"
        }
      },
      "required": [
        "type"
      ]
    },
    "PolicyTypeEnum": {
      "type": "string",
      "enum": [
        "AC_POLICY",
        "FLEX_POLICY",
        "IDENTITY_RULE_POLICY",
        "SECURITY_INTELLIGENCE",
        "MANAGEMENT_ACCESS"
      ]
    },
    "PortObjectGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "type": {
          "type": "string",
          "default": "portobjectgroup"
        }
      },
      "required": [
        "type"
      ]
    },
    "PortObjectGroupWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/PortObjectGroup"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "PostUpgradeFlags": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "showPostUpgradeDialog": {
          "type": "boolean"
        },
        "featureList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "postupgradeflags"
        }
      },
      "required": [
        "type"
      ]
    },
    "PostUpgradeFlagsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/PostUpgradeFlags"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ProductivityCondition": {
      "type": "object",
      "properties": {
        "productivity": {
          "type": "object",
          "$ref": "#/definitions/ProductivityRank"
        },
        "type": {
          "type": "string",
          "default": "productivitycondition"
        }
      },
      "required": [
        "type"
      ]
    },
    "ProductivityRank": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VERY_LOW",
        "LOW",
        "MEDIUM",
        "HIGH",
        "VERY_HIGH"
      ]
    },
    "ProtocolObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "protocol": {
          "type": "object",
          "$ref": "#/definitions/ProtocolType"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "protocolobject"
        }
      },
      "required": [
        "protocol",
        "type"
      ]
    },
    "ProtocolObjectWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ProtocolObject"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ProtocolType": {
      "type": "string",
      "enum": [
        "IGMP",
        "GGP",
        "ST2",
        "TCP",
        "CBT",
        "EGP",
        "IGP",
        "BBNRCCMON",
        "NVP2",
        "PUP",
        "ARGUS",
        "EMCON",
        "XNET",
        "CHAOS",
        "UDP",
        "MUX",
        "DCNMEAS",
        "HMP",
        "PRM",
        "XNSIDP",
        "TRUNK1",
        "TRUNK2",
        "LEAF1",
        "LEAF2",
        "RDP",
        "IRTP",
        "ISOTP4",
        "NETBLT",
        "MFENSP",
        "MERITINP",
        "SEP",
        "THREEPC",
        "IDPR",
        "XTP",
        "DDP",
        "IDPRCMTP",
        "TPPLUSPLUS",
        "IL",
        "SDRP",
        "IDRP",
        "RSVP",
        "GRE",
        "MHRP",
        "BNA",
        "ESP",
        "AH",
        "INLSP",
        "SWIPE",
        "NARP",
        "MOBILE",
        "TLSP",
        "SKIP",
        "IPv6NONXT",
        "CFTP",
        "SATEXPAK",
        "KRYPTOLAN",
        "RVD",
        "IPPC",
        "SATMON",
        "VISA",
        "IPCV",
        "CPNX",
        "CPHB",
        "WSN",
        "PVP",
        "BRSATMON",
        "SUNND",
        "WBMON",
        "WBEXPAK",
        "ISOIP",
        "VMTP",
        "SECUREVMTP",
        "VINES",
        "TTP",
        "NSFNETIGP",
        "DGP",
        "TCF",
        "EIGRP",
        "OSPFIGP",
        "SPRITERPC",
        "LARP",
        "MTP",
        "AX25",
        "IPIP",
        "MICP",
        "SCCSP",
        "ETHERIP",
        "ENCAP",
        "GMTP",
        "IFMP",
        "PNNI",
        "PIM",
        "ARIS",
        "SCPS",
        "QNX",
        "AN",
        "IPCOMP",
        "SNP",
        "COMPAQPEER",
        "IPXINIP",
        "VRRP",
        "PGM",
        "L2TP",
        "DDX",
        "IATP",
        "ST",
        "SRP",
        "UTI",
        "SMP",
        "SM",
        "PTP",
        "ISIS",
        "FIRE",
        "CRTP",
        "CRUDP",
        "SSCOPMCE",
        "IPLT",
        "SPS",
        "PIPE",
        "SCTP",
        "FC",
        "DIVERT"
      ]
    },
    "RBACResource": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependentResources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "rbacresource"
        }
      },
      "required": [
        "type"
      ]
    },
    "RBACResourceGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "rbacresourcegroup"
        }
      },
      "required": [
        "type"
      ]
    },
    "RadiusIdentitySource": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "timeout": {
          "type": "integer"
        },
        "serverAuthenticationPort": {
          "type": "integer"
        },
        "serverSecretKey": {
          "type": "string",
          "default": "*********"
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IdentitySourceCapabilities"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "radiusidentitysource"
        }
      },
      "required": [
        "name",
        "host",
        "type"
      ]
    },
    "RadiusIdentitySourceWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/RadiusIdentitySource"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "RadiusIdentitySourceGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "maxFailedAttempts": {
          "type": "integer"
        },
        "deadTime": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "radiusIdentitySources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "activeDirectoryRealm": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "radiusidentitysourcegroup"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "RadiusIdentitySourceGroupWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/RadiusIdentitySourceGroup"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ResourcePermission": {
      "type": "object",
      "properties": {
        "resourceName": {
          "type": "string"
        },
        "resourceUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceType": {
          "type": "string"
        },
        "permissionType": {
          "type": "object",
          "$ref": "#/definitions/PermissionType"
        }
      }
    },
    "RestoreImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "archiveName": {
          "type": "string"
        },
        "preserveArchive": {
          "type": "boolean"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "restoreimmediate"
        }
      },
      "required": [
        "archiveName",
        "type"
      ]
    },
    "RestoreImmediateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/RestoreImmediate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "RiskCondition": {
      "type": "object",
      "properties": {
        "risk": {
          "type": "object",
          "$ref": "#/definitions/RiskRank"
        },
        "type": {
          "type": "string",
          "default": "riskcondition"
        }
      },
      "required": [
        "type"
      ]
    },
    "RiskRank": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VERY_LOW",
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL"
      ]
    },
    "RolePermission": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string"
        },
        "rolePermissionSet": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ResourcePermission"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "RolePermission"
        }
      },
      "required": [
        "type"
      ]
    },
    "RolePermissionWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/RolePermission"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SRUImmediateJobType": {
      "type": "string",
      "enum": [
        "SRU_UPDATE",
        "SRU_OOB_UPDATE"
      ]
    },
    "SRUUpdateImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "sruImmediateJobType": {
          "type": "object",
          "$ref": "#/definitions/SRUImmediateJobType"
        },
        "forceUpdate": {
          "type": "boolean"
        },
        "deployAfterUpdate": {
          "type": "boolean"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "sruupdateimmediate"
        }
      },
      "required": [
        "type"
      ]
    },
    "SRUUpdateImmediateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SRUUpdateImmediate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SRUUpdateSchedule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "runTimes": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "deployAfterUpdate": {
          "type": "boolean"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "sruupdateschedule"
        }
      },
      "required": [
        "type"
      ]
    },
    "SRUUpdateScheduleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SRUUpdateSchedule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SRUVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "sruVersion": {
          "type": "string"
        },
        "lastSuccessSRUDate": {
          "type": "string"
        },
        "soMd5Checksum": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "sruversion"
        }
      },
      "required": [
        "type"
      ]
    },
    "ScheduleExportConfig": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "masked": {
          "type": "boolean"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "scheduleexportconfig"
        }
      },
      "required": [
        "type"
      ]
    },
    "ScheduleExportConfigWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleExportConfig"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ScheduleTroubleshoot": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "scheduletroubleshoot"
        }
      },
      "required": [
        "type"
      ]
    },
    "ScheduleTroubleshootWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleTroubleshoot"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SearchCondition": {
      "type": "object",
      "properties": {
        "search": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "searchcondition"
        }
      },
      "required": [
        "type"
      ]
    },
    "SecurityIntelligenceFeedsInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "lastFeedsUpdateDate": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "securityintelligencefeedsinfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "SecurityIntelligenceUpdateFeedsImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "securityintelligenceupdatefeedsimmediate"
        }
      },
      "required": [
        "type"
      ]
    },
    "SecurityIntelligenceUpdateFeedsImmediateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsImmediate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SecurityIntelligenceUpdateFeedsSchedule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "runTimes": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "securityintelligenceupdatefeedsschedule"
        }
      },
      "required": [
        "type"
      ]
    },
    "SecurityIntelligenceUpdateFeedsScheduleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsSchedule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SecurityZone": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "mode": {
          "type": "object",
          "$ref": "#/definitions/InterfaceModeType"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "securityzone"
        }
      },
      "required": [
        "mode",
        "type"
      ]
    },
    "SecurityZoneWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SecurityZone"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SerialNumber": {
      "type": "object",
      "properties": {
        "serial": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "SerialNumber"
        }
      },
      "required": [
        "type"
      ]
    },
    "SerializationKey": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "serializationkey"
        }
      },
      "required": [
        "type",
        "key"
      ]
    },
    "SnortVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "snortVersion": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "snortversion"
        }
      },
      "required": [
        "type"
      ]
    },
    "SpecialRealm": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "directoryConfigurations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DirectoryConfiguration"
          }
        },
        "enabled": {
          "type": "boolean"
        },
        "systemDefined": {
          "type": "boolean"
        },
        "realmId": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "specialrealm"
        }
      },
      "required": [
        "type"
      ]
    },
    "SpecialRealmWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SpecialRealm"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "StaticRouteEntry": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "iface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "gateway": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "metricValue": {
          "type": "integer"
        },
        "ipType": {
          "type": "object",
          "$ref": "#/definitions/StaticRouteEntry$IPType"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "staticrouteentry"
        }
      },
      "required": [
        "iface",
        "networks",
        "type",
        "gateway",
        "ipType"
      ]
    },
    "StaticRouteEntryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/StaticRouteEntry"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "StaticRouteEntry$IPType": {
      "type": "string",
      "enum": [
        "IPv4",
        "IPv6"
      ]
    },
    "StaticRouteEntryContainer": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "staticrouteentrycontainer"
        }
      },
      "required": [
        "type"
      ]
    },
    "StaticRouteEntryContainerWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/StaticRouteEntryContainer"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SubInterface": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hardwareName": {
          "type": "string"
        },
        "monitorInterface": {
          "type": "boolean"
        },
        "ipv4": {
          "type": "object",
          "$ref": "#/definitions/InterfaceIPv4"
        },
        "ipv6": {
          "type": "object",
          "$ref": "#/definitions/InterfaceIPv6"
        },
        "managementOnly": {
          "type": "boolean"
        },
        "linkState": {
          "type": "object",
          "$ref": "#/definitions/LinkState"
        },
        "mtu": {
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "macAddress": {
          "type": "string"
        },
        "standbyMacAddress": {
          "type": "string"
        },
        "managementInterface": {
          "type": "boolean"
        },
        "tenGigabitInterface": {
          "type": "boolean"
        },
        "gigabitInterface": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "subIntfId": {
          "type": "integer"
        },
        "vlanId": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "default": "subinterface"
        }
      },
      "required": [
        "subIntfId",
        "monitorInterface",
        "type",
        "enabled",
        "mtu"
      ]
    },
    "SubInterfaceWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SubInterface"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SystemInformation": {
      "type": "object",
      "properties": {
        "ipv4": {
          "type": "string"
        },
        "ipv6": {
          "type": "string"
        },
        "softwareVersion": {
          "type": "string"
        },
        "vdbVersion": {
          "type": "object",
          "$ref": "#/definitions/VDBVersion"
        },
        "sruVersion": {
          "type": "object",
          "$ref": "#/definitions/SRUVersion"
        },
        "snortVersion": {
          "type": "object",
          "$ref": "#/definitions/SnortVersion"
        },
        "databaseInfo": {
          "type": "object",
          "$ref": "#/definitions/DatabaseInfo"
        },
        "platformModel": {
          "type": "string"
        },
        "currentTime": {
          "type": "integer"
        },
        "serialNumber": {
          "type": "string"
        },
        "geolocationVersion": {
          "type": "object",
          "$ref": "#/definitions/GeolocationVersion"
        },
        "securityIntelligenceFeedsInfo": {
          "type": "object",
          "$ref": "#/definitions/SecurityIntelligenceFeedsInfo"
        },
        "modelId": {
          "type": "string"
        },
        "modelNumber": {
          "type": "string"
        },
        "applianceUuid": {
          "type": "string"
        },
        "managementInterfaceName": {
          "type": "string"
        },
        "systemUptime": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "SystemInformation"
        }
      },
      "required": [
        "type"
      ]
    },
    "SystemInformationWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SystemInformation"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TCPPortObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "port": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "tcpportobject"
        }
      },
      "required": [
        "port",
        "type"
      ]
    },
    "TCPPortObjectWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TCPPortObject"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TagType": {
      "type": "string",
      "enum": [
        "tag",
        "category"
      ]
    },
    "Telemetry": {
      "type": "object",
      "properties": {
        "telemetryData": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "Telemetry"
        }
      },
      "required": [
        "type"
      ]
    },
    "TelemetryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/Telemetry"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TelemetryJobHistory": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "telemetryjobhistory"
        }
      },
      "required": [
        "type"
      ]
    },
    "TelemetrySchedule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "runTimes": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "telemetryschedule"
        }
      },
      "required": [
        "type"
      ]
    },
    "TestDirectory": {
      "type": "object",
      "properties": {
        "realmUUID": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "directoryUsername": {
          "type": "string"
        },
        "directoryPassword": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "object",
          "$ref": "#/definitions/EncryptionProtocol"
        },
        "sslCertUUID": {
          "type": "string"
        },
        "sslCertString": {
          "type": "string"
        },
        "baseDN": {
          "type": "string"
        },
        "statusCode": {
          "type": "string"
        },
        "statusMessage": {
          "type": "string"
        },
        "linaStatusMessage": {
          "type": "string"
        },
        "linaStatusCode": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "TestDirectory"
        }
      },
      "required": [
        "directoryPassword",
        "hostname",
        "port",
        "directoryUsername",
        "baseDN",
        "type"
      ]
    },
    "TestDirectoryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TestDirectory"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TestIdentityServicesEngineConnectivity": {
      "type": "object",
      "properties": {
        "ftdCertificateUUID": {
          "type": "string"
        },
        "pxGridCertificateUUID": {
          "type": "string"
        },
        "mntCertificateUUID": {
          "type": "string"
        },
        "statusCode": {
          "type": "string"
        },
        "statusMessage": {
          "type": "string"
        },
        "iseLogMessage": {
          "type": "string"
        },
        "secondaryStatusCode": {
          "type": "string"
        },
        "secondaryStatusMessage": {
          "type": "string"
        },
        "primaryIseServer": {
          "type": "string"
        },
        "secondaryIseServer": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "TestIdentityServicesEngineConnectivity"
        }
      },
      "required": [
        "pxGridCertificateUUID",
        "ftdCertificateUUID",
        "mntCertificateUUID",
        "type"
      ]
    },
    "TestIdentityServicesEngineConnectivityWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TestIdentityServicesEngineConnectivity"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TestIdentitySource": {
      "type": "object",
      "properties": {
        "identitySource": {
          "type": "object",
          "$ref": "#/definitions/IdentitySourceBase"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "default": "*********"
        },
        "statusCode": {
          "type": "integer"
        },
        "statusMessage": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "TestIdentitySource"
        }
      },
      "required": [
        "identitySource",
        "password",
        "type",
        "username"
      ]
    },
    "TestIdentitySourceWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TestIdentitySource"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "Time": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer"
        },
        "timeUnit": {
          "type": "string",
          "enum": [
            "NANOSECONDS",
            "MICROSECONDS",
            "MILLISECONDS",
            "SECONDS",
            "MINUTES",
            "HOURS",
            "DAYS"
          ]
        },
        "type": {
          "type": "string",
          "default": "time"
        }
      },
      "required": [
        "type"
      ]
    },
    "TimeZones": {
      "type": "object",
      "properties": {
        "timeZones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "TimeZones"
        }
      },
      "required": [
        "type"
      ]
    },
    "TimeZonesWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TimeZones"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TrafficUser": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "realmId": {
          "type": "integer"
        },
        "realmName": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "trafficuser"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "realmId",
        "realmName",
        "id",
        "type"
      ]
    },
    "TrafficUserWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TrafficUser"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TrafficUserGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "realmId": {
          "type": "integer"
        },
        "realmName": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "trafficusergroup"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "realmId",
        "realmName",
        "id",
        "type"
      ]
    },
    "TrafficUserGroupWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TrafficUserGroup"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TroubleshootFile": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "TroubleshootFile"
        }
      },
      "required": [
        "type"
      ]
    },
    "TroubleshootFileWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TroubleshootFile"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TroubleshootJobHistory": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "troubleshootjobhistory"
        }
      },
      "required": [
        "type"
      ]
    },
    "TroubleshootJobHistoryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TroubleshootJobHistory"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "TunnelPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "tunnelpolicy"
        }
      },
      "required": [
        "type"
      ]
    },
    "TunnelPolicyDeployInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "ruleContainerUuid": {
          "type": "string"
        },
        "deployedOnDevice": {
          "type": "boolean"
        },
        "ruleDeployInfoEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessControlRuleDeployInfo"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "tunnelpolicydeployinfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "TunnelRule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ruleId": {
          "type": "integer"
        },
        "sourceZones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationZones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "sourceNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "sourcePorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationPorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ruleAction": {
          "type": "object",
          "$ref": "#/definitions/AccessControlRuleBase$AcRuleAction"
        },
        "eventLogAction": {
          "type": "object",
          "$ref": "#/definitions/AccessControlRuleBase$EventLogAction"
        },
        "bidirectional": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "tunnelrule"
        }
      },
      "required": [
        "type"
      ]
    },
    "TunnelZone": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "tunnelzone"
        }
      },
      "required": [
        "type"
      ]
    },
    "TypeCondition": {
      "type": "object",
      "properties": {
        "applicationType": {
          "type": "object",
          "$ref": "#/definitions/ApplicationType"
        },
        "type": {
          "type": "string",
          "default": "typecondition"
        }
      },
      "required": [
        "type"
      ]
    },
    "UDPPortObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "port": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "udpportobject"
        }
      },
      "required": [
        "port",
        "type"
      ]
    },
    "UDPPortObjectWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/UDPPortObject"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "URLCacheReloadTTL": {
      "type": "string",
      "enum": [
        "NEVER",
        "TWO_HRS",
        "FOUR_HRS",
        "EIGHT_HRS",
        "TWELVE_HRS",
        "TWENTY_FOUR_HRS",
        "FOURTY_EIGHT_HRS",
        "ONE_WEEK"
      ]
    },
    "URLCategory": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "urlCategoryId": {
          "type": "integer"
        },
        "deprecated": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "urlcategory"
        }
      },
      "required": [
        "urlCategoryId",
        "type"
      ]
    },
    "URLCategoryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/URLCategory"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "URLCategoryMatcher": {
      "type": "object",
      "properties": {
        "urlCategory": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "urlReputation": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "urlcategorymatcher"
        }
      },
      "required": [
        "type"
      ]
    },
    "URLObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "urlobject"
        }
      },
      "required": [
        "type",
        "url"
      ]
    },
    "URLObjectWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/URLObject"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "URLObjectGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "type": {
          "type": "string",
          "default": "urlobjectgroup"
        }
      },
      "required": [
        "type"
      ]
    },
    "URLObjectGroupWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/URLObjectGroup"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "URLReputation": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "index": {
          "type": "integer"
        },
        "startPercentage": {
          "type": "integer"
        },
        "endPercentage": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "urlreputation"
        }
      },
      "required": [
        "index",
        "endPercentage",
        "type",
        "startPercentage"
      ]
    },
    "URLReputationWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/URLReputation"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "UpgradeFile": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "uploadDate": {
          "type": "string"
        },
        "fileSize": {
          "type": "integer"
        },
        "upgradeFileName": {
          "type": "string"
        },
        "updateVersion": {
          "type": "string"
        },
        "upgradeFrom": {
          "type": "string"
        },
        "rebootRequired": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "upgradeType": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "upgradefile"
        }
      },
      "required": [
        "type"
      ]
    },
    "UpgradeFileWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/UpgradeFile"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "UploadBackupStatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "uploadbackupstatus"
        }
      },
      "required": [
        "type"
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "default": "*********"
        },
        "newPassword": {
          "type": "string",
          "default": "*********"
        },
        "userPreferences": {
          "type": "object",
          "$ref": "#/definitions/UserPreferences"
        },
        "userRole": {
          "type": "string"
        },
        "identitySourceId": {
          "type": "string"
        },
        "userServiceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UserServiceType"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "user"
        }
      },
      "required": [
        "identitySourceId",
        "userServiceTypes",
        "type"
      ]
    },
    "UserWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/User"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "UserBase": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "userbase"
        }
      },
      "required": [
        "type"
      ]
    },
    "UserPreferences": {
      "type": "object",
      "properties": {
        "preferredTimeZone": {
          "type": "string"
        },
        "colorTheme": {
          "type": "object",
          "$ref": "#/definitions/UserPreferences$ColorTheme"
        },
        "type": {
          "type": "string",
          "default": "userpreferences"
        }
      },
      "required": [
        "colorTheme",
        "type"
      ]
    },
    "UserPreferences$ColorTheme": {
      "type": "string",
      "enum": [
        "NORMAL_CISCO_IDENTITY",
        "NORMAL_ORANGE",
        "NORMAL_BLUE",
        "HIGH_CONTRAST_MODE",
        "FILTERED_COLORS"
      ]
    },
    "UserRole": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Permission"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "userrole"
        }
      },
      "required": [
        "type"
      ]
    },
    "UserServiceType": {
      "type": "string",
      "enum": [
        "RA_VPN",
        "MGMT"
      ]
    },
    "VDBUpdateImmediate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "deployAfterUpdate": {
          "type": "boolean"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "vdbupdateimmediate"
        }
      },
      "required": [
        "type"
      ]
    },
    "VDBUpdateImmediateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/VDBUpdateImmediate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "VDBUpdateSchedule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "runTimes": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "deployAfterUpdate": {
          "type": "boolean"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "vdbupdateschedule"
        }
      },
      "required": [
        "type"
      ]
    },
    "VDBUpdateScheduleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/VDBUpdateSchedule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "VDBVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastSuccessVDBDate": {
          "type": "string"
        },
        "vdbCurrentVersion": {
          "type": "string"
        },
        "vdbCurrentBuild": {
          "type": "string"
        },
        "vdbReleaseDate": {
          "type": "string"
        },
        "appIDRevision": {
          "type": "string"
        },
        "navlRevision": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "vdbversion"
        }
      },
      "required": [
        "type"
      ]
    },
    "VlanTag": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "vlantag"
        }
      },
      "required": [
        "type"
      ]
    },
    "VlanTagGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "vlanTags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "vlantaggroup"
        }
      },
      "required": [
        "type"
      ]
    },
    "WebAnalyticsSetting": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "webanalyticssetting"
        }
      },
      "required": [
        "type"
      ]
    },
    "WebAnalyticsSettingWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/WebAnalyticsSetting"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AccessEntryBase": {
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "type": {
          "type": "string",
          "default": "accessentrybase"
        }
      },
      "required": [
        "action",
        "type"
      ]
    },
    "ExtendedAccessEntry": {
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "sourceNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "sourcePorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationPorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "logging": {
          "type": "object",
          "$ref": "#/definitions/LoggingOption"
        },
        "logLevel": {
          "type": "object",
          "$ref": "#/definitions/LogLevel"
        },
        "logInterval": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "default": "extendedaccessentry"
        }
      },
      "required": [
        "logging",
        "action",
        "type"
      ]
    },
    "ExtendedAccessList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ExtendedAccessEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "extendedaccesslist"
        }
      },
      "required": [
        "entries",
        "type"
      ]
    },
    "ExtendedAccessListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ExtendedAccessList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "LogLevel": {
      "type": "string",
      "enum": [
        "ALERT",
        "CRITICAL",
        "DEBUGGING",
        "EMERGENCY",
        "ERROR",
        "INFORMATIONAL",
        "NOTIFICATION",
        "WARNING"
      ]
    },
    "LoggingOption": {
      "type": "string",
      "enum": [
        "DEFAULT",
        "DISABLED",
        "PER_ACCESS_LIST_ENTRY"
      ]
    },
    "StandardAccessEntry": {
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "type": {
          "type": "string",
          "default": "standardaccessentry"
        }
      },
      "required": [
        "action",
        "networks",
        "type"
      ]
    },
    "StandardAccessList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StandardAccessEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "standardaccesslist"
        }
      },
      "required": [
        "entries",
        "type"
      ]
    },
    "StandardAccessListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/StandardAccessList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ASPathEntry": {
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "regularExpression": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "aspathentry"
        }
      },
      "required": [
        "regularExpression",
        "action",
        "type"
      ]
    },
    "ASPathList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ASPathEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "aspathlist"
        }
      },
      "required": [
        "entries",
        "type"
      ]
    },
    "ASPathListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ASPathList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AuditDeploymentEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "eventData": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "entityId": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditdeploymentevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditDiscardPendingChangesEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditdiscardpendingchangesevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditEntityCreateEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "entityId": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditentitycreateevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditEntityDeleteEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "entityId": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditentitydeleteevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditEntityUpdateEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "entityId": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditentityupdateevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "eventData": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditEventWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AuditEvent"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AuditFailedLoginEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditfailedloginevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditHaActionEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "eventData": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "audithaactionevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditJobExecutionEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "eventData": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "entityId": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditjobexecutionevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditLoginEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditloginevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditLogoutEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditlogoutevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditOutOfBandChangeEvent": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer"
        },
        "entityId": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditoutofbandchangeevent"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditEntityChange": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "auditEventId": {
          "type": "string"
        },
        "entityDiff": {
          "type": "object",
          "$ref": "#/definitions/BaseEntityDiff"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "auditentitychange"
        }
      },
      "required": [
        "type"
      ]
    },
    "AuditEntityChangeWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AuditEntityChange"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AuditBaseEventData": {},
    "AuditDeploymentData": {
      "type": "object",
      "properties": {
        "startTimeStamp": {
          "type": "integer"
        },
        "endTimeStamp": {
          "type": "integer"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/AuditProcessStatus"
        },
        "errorMessage": {
          "type": "string"
        },
        "deploymentStatusUuid": {
          "type": "string"
        }
      }
    },
    "AuditHAActionData": {
      "type": "object",
      "properties": {
        "haAction": {
          "type": "string"
        }
      }
    },
    "AuditJobExecutionData": {
      "type": "object",
      "properties": {
        "jobHistoryUuid": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "jobVersion": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/AuditProcessStatus"
        }
      }
    },
    "AuditProcessStatus": {
      "type": "string",
      "enum": [
        "STARTED",
        "COMPLETED",
        "FAILED"
      ]
    },
    "AuthenticationStatus": {
      "type": "string",
      "enum": [
        "SUCCESSFUL",
        "FAILED"
      ]
    },
    "IdentitySourceProtocolType": {
      "type": "string",
      "enum": [
        "HTTPS",
        "SSH"
      ]
    },
    "OAuthTokenInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "customTokenInfo": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customTokenInfoEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/OAuthTokenInfo$TokenInfoEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "oauthtokeninfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "OAuthTokenInfo$TokenInfoEntry": {
      "type": "object",
      "properties": {
        "tokenId": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "issuedAt": {
          "type": "integer"
        },
        "expireAt": {
          "type": "integer"
        },
        "refreshExpireAt": {
          "type": "integer"
        },
        "userUuid": {
          "type": "string"
        },
        "userRole": {
          "type": "string"
        }
      }
    },
    "UseLocal": {
      "type": "string",
      "enum": [
        "BEFORE",
        "AFTER",
        "NEVER",
        "NOT_APPLICABLE"
      ]
    },
    "Secret": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "default": "*********"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "secret"
        }
      },
      "required": [
        "password",
        "type"
      ]
    },
    "SecretWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/Secret"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "VariableBase": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "variableType": {
          "type": "object",
          "$ref": "#/definitions/VariableType"
        },
        "value": {
          "type": "string"
        },
        "entityValue": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "variablebase"
        }
      },
      "required": [
        "variableType",
        "name",
        "type"
      ]
    },
    "VariableType": {
      "type": "string",
      "enum": [
        "OBJECT_NAME",
        "STRING",
        "NUMERIC",
        "BOOLEAN",
        "IP",
        "IPV6",
        "MULTI_ENUM",
        "NETWORK",
        "NETWORK_OBJECT",
        "PORT",
        "INTERFACE",
        "SECRET",
        "ASPATH",
        "COMMUNITY_LIST",
        "STANDARD_COMMUNITY_LIST",
        "EXPANDED_COMMUNITY_LIST",
        "ACCESS_LIST",
        "STANDARD_ACCESS_LIST",
        "EXTENDED_ACCESS_LIST",
        "PREFIX_LIST",
        "IPV4_PREFIX_LIST",
        "IPV6_PREFIX_LIST",
        "POLICY_LIST",
        "ROUTE_MAP",
        "ENUM",
        "MULTI_NETWORK",
        "MULTI_PORT",
        "MULTI_INTERFACE",
        "MULTI_ASPATH",
        "MULTI_COMMUNITY_LIST",
        "MULTI_POLICY_LIST",
        "MULTI_ACCESS_LIST",
        "MULTI_IPV4_PREFIX_LIST",
        "MULTI_STANDARD_ACCESS_LIST"
      ]
    },
    "VariableType$Metatype": {
      "type": "string",
      "enum": [
        "VALUE",
        "ENTITY",
        "CONSTANT",
        "ENTITIES",
        "UNKNOWN"
      ]
    },
    "FlexConfigObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "negateLines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isBlacklisted": {
          "type": "boolean"
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/FlexVariable"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "flexconfigobject"
        }
      },
      "required": [
        "isBlacklisted",
        "type"
      ]
    },
    "FlexConfigObjectWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/FlexConfigObject"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "FlexConfigPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "flexConfigObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "flexconfigpolicy"
        }
      },
      "required": [
        "type"
      ]
    },
    "FlexConfigPolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/FlexConfigPolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "FlexVariable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "variableType": {
          "type": "object",
          "$ref": "#/definitions/VariableType"
        },
        "value": {
          "type": "string"
        },
        "entityValue": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "flexvariable"
        }
      },
      "required": [
        "variableType",
        "name",
        "type"
      ]
    },
    "SmartCLIEntity": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "smartclientity"
        }
      },
      "required": [
        "type"
      ]
    },
    "CloudActionType": {
      "type": "string",
      "enum": [
        "TOKEN_ENROLL_CDO",
        "AUTO_ENROLL_NETWORK_PARTICIPATION"
      ]
    },
    "CloudManagement": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "scheduleType": {
          "type": "object",
          "$ref": "#/definitions/JobExecutionType"
        },
        "user": {
          "type": "string"
        },
        "forceOperation": {
          "type": "boolean"
        },
        "jobHistoryUuid": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "authToken": {
          "type": "string"
        },
        "action": {
          "type": "object",
          "$ref": "#/definitions/CloudActionType"
        },
        "jobName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "cloudmanagement"
        }
      },
      "required": [
        "type"
      ]
    },
    "CloudManagementWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudManagement"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "JobHistoryCloudManagement": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "jobhistorycloudmanagement"
        }
      },
      "required": [
        "type"
      ]
    },
    "JobHistoryCloudManagementWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/JobHistoryCloudManagement"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "CommunityEntryBase": {
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "type": {
          "type": "string",
          "default": "communityentrybase"
        }
      },
      "required": [
        "action",
        "type"
      ]
    },
    "ExpandedCommunityEntry": {
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "regularExpression": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "expandedcommunityentry"
        }
      },
      "required": [
        "regularExpression",
        "action",
        "type"
      ]
    },
    "ExpandedCommunityList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ExpandedCommunityEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "expandedcommunitylist"
        }
      },
      "required": [
        "entries",
        "type"
      ]
    },
    "ExpandedCommunityListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ExpandedCommunityList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "StandardCommunityEntry": {
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "communities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "internet": {
          "type": "boolean"
        },
        "noAdvertise": {
          "type": "boolean"
        },
        "noExport": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "default": "standardcommunityentry"
        }
      },
      "required": [
        "noExport",
        "action",
        "type",
        "internet",
        "noAdvertise"
      ]
    },
    "StandardCommunityList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StandardCommunityEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "standardcommunitylist"
        }
      },
      "required": [
        "entries",
        "type"
      ]
    },
    "StandardCommunityListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/StandardCommunityList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DeviceHostname": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "devicehostname"
        }
      },
      "required": [
        "type"
      ]
    },
    "DeviceHostnameWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DeviceHostname"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "HTTPAccessList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "httpaccesslist"
        }
      },
      "required": [
        "type"
      ]
    },
    "HTTPAccessListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/HTTPAccessList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SSHAccessList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "sshaccesslist"
        }
      },
      "required": [
        "type"
      ]
    },
    "SSHAccessListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SSHAccessList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "WebUICertificate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "certificate": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "webuicertificate"
        }
      },
      "required": [
        "certificate",
        "type"
      ]
    },
    "ConsoleLogFilter": {
      "type": "object",
      "properties": {
        "loggingEnabled": {
          "type": "boolean"
        },
        "severityLogLevel": {
          "type": "object",
          "$ref": "#/definitions/SeverityLogLevelType"
        },
        "type": {
          "type": "string",
          "default": "consolelogfilter"
        }
      },
      "required": [
        "type"
      ]
    },
    "DNSServer": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "dnsserver"
        }
      },
      "required": [
        "ipAddress",
        "type"
      ]
    },
    "DNSServerGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "dnsServers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DNSServer"
          }
        },
        "timeout": {
          "type": "integer"
        },
        "retries": {
          "type": "integer"
        },
        "searchDomain": {
          "type": "string"
        },
        "systemDefined": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "dnsservergroup"
        }
      },
      "required": [
        "dnsServers",
        "type"
      ]
    },
    "DNSServerGroupWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DNSServerGroup"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DataDNSSettings": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pollTimer": {
          "type": "integer"
        },
        "expiryEntryTimer": {
          "type": "integer"
        },
        "dnsServerGroup": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "type": {
          "type": "string",
          "default": "datadnssettings"
        }
      },
      "required": [
        "type"
      ]
    },
    "DataDNSSettingsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DataDNSSettings"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DataInterfaceManagementAccess": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "networkInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DataInterfaceAccessProtocol"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "datainterfacemanagementaccess"
        }
      },
      "required": [
        "networkObjects",
        "networkInterface",
        "protocols",
        "type"
      ]
    },
    "DataInterfaceManagementAccessWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DataInterfaceManagementAccess"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DeviceDNSSettings": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "dnsServerGroup": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "devicednssettings"
        }
      },
      "required": [
        "type"
      ]
    },
    "DeviceDNSSettingsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DeviceDNSSettings"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DeviceLogSettings": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "deviceLoggingEnabled": {
          "type": "boolean"
        },
        "consoleLogFilter": {
          "type": "object",
          "$ref": "#/definitions/ConsoleLogFilter"
        },
        "syslogServerLogFilter": {
          "type": "object",
          "$ref": "#/definitions/SyslogServerLogFilter"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "devicelogsettings"
        }
      },
      "required": [
        "type"
      ]
    },
    "DeviceLogSettingsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DeviceLogSettings"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SyslogServer": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "deviceInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "useManagementInterface": {
          "type": "boolean"
        },
        "protocol": {
          "type": "object",
          "$ref": "#/definitions/SyslogServerProtocolType"
        },
        "id": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "syslogserver"
        }
      },
      "required": [
        "protocol",
        "host",
        "type"
      ]
    },
    "SyslogServerWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SyslogServer"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SyslogServerLogFilter": {
      "type": "object",
      "properties": {
        "loggingEnabled": {
          "type": "boolean"
        },
        "severityLogLevel": {
          "type": "object",
          "$ref": "#/definitions/SeverityLogLevelType"
        },
        "syslogServers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "type": {
          "type": "string",
          "default": "syslogserverlogfilter"
        }
      },
      "required": [
        "type"
      ]
    },
    "DataInterfaceAccessProtocol": {
      "type": "string",
      "enum": [
        "HTTPS",
        "SSH"
      ]
    },
    "SeverityLogLevelType": {
      "type": "string",
      "enum": [
        "EMERGENCY",
        "ALERT",
        "CRITICAL",
        "ERROR",
        "WARNING",
        "NOTIFICATION",
        "INFORMATIONAL",
        "DEBUG"
      ]
    },
    "SyslogServerProtocolType": {
      "type": "string",
      "enum": [
        "TCP",
        "UDP"
      ]
    },
    "BaseDiff": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "BaseDiff"
        }
      },
      "required": [
        "type"
      ]
    },
    "BaseEntityDiff": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "BaseEntityDiff"
        }
      },
      "required": [
        "type"
      ]
    },
    "BaseEntityDiffWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntityDiff"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "EntityCreate": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "referencesAdded": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceUpdate"
          }
        },
        "valuesAdded": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ValueAdd"
          }
        },
        "type": {
          "type": "string",
          "default": "EntityCreate"
        }
      },
      "required": [
        "type"
      ]
    },
    "EntityDelete": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "referencesDeleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceUpdate"
          }
        },
        "valuesDeleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ValueDelete"
          }
        },
        "type": {
          "type": "string",
          "default": "EntityDelete"
        }
      },
      "required": [
        "type"
      ]
    },
    "EntityDiffAnalyserResult": {
      "type": "object",
      "properties": {
        "created": {
          "type": "object",
          "$ref": "#/definitions/EntityCreate"
        },
        "updated": {
          "type": "object",
          "$ref": "#/definitions/EntityUpdate"
        },
        "deleted": {
          "type": "object",
          "$ref": "#/definitions/EntityDelete"
        },
        "type": {
          "type": "string",
          "default": "EntityDiffAnalyserResult"
        }
      },
      "required": [
        "type"
      ]
    },
    "EntityUpdate": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "referencesDeleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceUpdate"
          }
        },
        "referencesAdded": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceUpdate"
          }
        },
        "valuesDeleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ValueDelete"
          }
        },
        "valuesAdded": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ValueAdd"
          }
        },
        "valuesUpdated": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ValueUpdate"
          }
        },
        "type": {
          "type": "string",
          "default": "EntityUpdate"
        }
      },
      "required": [
        "type"
      ]
    },
    "ReferenceUpdate": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ReferenceUpdate"
        }
      },
      "required": [
        "type"
      ]
    },
    "ValueAdd": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "newValue": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ValueAdd"
        }
      },
      "required": [
        "type"
      ]
    },
    "ValueDelete": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "oldValue": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ValueDelete"
        }
      },
      "required": [
        "type"
      ]
    },
    "ValueUpdate": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "oldValue": {
          "type": "string"
        },
        "newValue": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ValueUpdate"
        }
      },
      "required": [
        "type"
      ]
    },
    "ChangePasswordStatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "nextPage": {
          "type": "string"
        },
        "currentPage": {
          "type": "string"
        },
        "taskComplete": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "changepasswordstatus"
        }
      },
      "required": [
        "type"
      ]
    },
    "EasySetupBase": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "nextPage": {
          "type": "string"
        },
        "currentPage": {
          "type": "string"
        },
        "taskComplete": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "easysetupbase"
        }
      },
      "required": [
        "type"
      ]
    },
    "EasySetupPages": {
      "type": "string",
      "enum": [
        "EULA",
        "PASSWORD",
        "NETWORK",
        "DASHBOARD"
      ]
    },
    "EasySetupStatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "nextPage": {
          "type": "string"
        },
        "currentPage": {
          "type": "string"
        },
        "taskComplete": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "easysetupstatus"
        }
      },
      "required": [
        "type"
      ]
    },
    "InitialProvision": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "acceptEULA": {
          "type": "boolean"
        },
        "eulaText": {
          "type": "string"
        },
        "currentPassword": {
          "type": "string",
          "default": "*********"
        },
        "newPassword": {
          "type": "string",
          "default": "*********"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "initialprovision"
        }
      },
      "required": [
        "type"
      ]
    },
    "InitialProvisionWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/InitialProvision"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "BackupLocation": {
      "type": "string",
      "enum": [
        "DEFAULT",
        "SDCARD"
      ]
    },
    "BackupStateType": {
      "type": "string",
      "enum": [
        "BACKUP_NEW",
        "BACKUP_RESTORED",
        "BACKUP_RESTORED_NEW",
        "NONE"
      ]
    },
    "CannedFilePolicy": {
      "type": "string",
      "enum": [
        "BLOCK_MALWARE_ALL",
        "CLOUD_LOOKUP_ALL",
        "BLOCK_OFFICE_DOCUMENTS_PDF_UPLOAD_BLOCK_MALWARE_OTHERS",
        "BLOCK_OFFICE_DOCUMENTS_UPLOAD_BLOCK_MALWARE_OTHERS"
      ]
    },
    "JobExecutionType": {
      "type": "string",
      "enum": [
        "NONE",
        "IMMEDIATE",
        "DAILY",
        "WEEKLY",
        "MONTHLY",
        "SINGLE",
        "CRON",
        "HOURLY"
      ]
    },
    "HABreakStatus": {
      "type": "object",
      "properties": {
        "statusMessage": {
          "type": "string"
        },
        "cliErrorMessage": {
          "type": "string"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/DeploymentStatus$DeploymentState"
        },
        "queuedTime": {
          "type": "integer"
        },
        "startTime": {
          "type": "integer"
        },
        "endTime": {
          "type": "integer"
        },
        "statusMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "modifiedObjects": {
          "type": "object"
        }
      }
    },
    "HAConfigStatus": {
      "type": "string",
      "enum": [
        "IN_SYNC",
        "PRIMARY_IMPORTING_CONFIG",
        "SECONDARY_IMPORTING_CONFIG",
        "OUT_OF_SYNC",
        "UNKNOWN"
      ]
    },
    "HAConfiguration": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nodeRole": {
          "type": "object",
          "$ref": "#/definitions/HANodeRole"
        },
        "failoverInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "failoverName": {
          "type": "string"
        },
        "primaryFailoverIPv4": {
          "type": "object",
          "$ref": "#/definitions/IPv4Address"
        },
        "secondaryFailoverIPv4": {
          "type": "object",
          "$ref": "#/definitions/IPv4Address"
        },
        "primaryFailoverIPv6": {
          "type": "object",
          "$ref": "#/definitions/IPv6Address"
        },
        "secondaryFailoverIPv6": {
          "type": "object",
          "$ref": "#/definitions/IPv6Address"
        },
        "statefulFailoverInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "statefulFailoverName": {
          "type": "string"
        },
        "primaryStatefulFailoverIPv4": {
          "type": "object",
          "$ref": "#/definitions/IPv4Address"
        },
        "secondaryStatefulFailoverIPv4": {
          "type": "object",
          "$ref": "#/definitions/IPv4Address"
        },
        "primaryStatefulFailoverIPv6": {
          "type": "object",
          "$ref": "#/definitions/IPv6Address"
        },
        "secondaryStatefulFailoverIPv6": {
          "type": "object",
          "$ref": "#/definitions/IPv6Address"
        },
        "sharedKey": {
          "type": "string",
          "default": "*********"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "haconfiguration"
        }
      },
      "required": [
        "statefulFailoverInterface",
        "nodeRole",
        "failoverName",
        "statefulFailoverName",
        "failoverInterface",
        "type"
      ]
    },
    "HAConfigurationWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/HAConfiguration"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "HAFailoverConfiguration": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "peerPollTime": {
          "type": "object",
          "$ref": "#/definitions/Time"
        },
        "peerHoldTime": {
          "type": "object",
          "$ref": "#/definitions/Time"
        },
        "interfacePollTime": {
          "type": "object",
          "$ref": "#/definitions/Time"
        },
        "interfaceHoldTime": {
          "type": "object",
          "$ref": "#/definitions/Time"
        },
        "interfaceFailureThreshold": {
          "type": "integer"
        },
        "interfaceFailureUnit": {
          "type": "object",
          "$ref": "#/definitions/HAFailoverConfiguration$InterfaceFailureUnits"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "hafailoverconfiguration"
        }
      },
      "required": [
        "peerPollTime",
        "interfaceFailureThreshold",
        "interfaceHoldTime",
        "peerHoldTime",
        "type",
        "interfaceFailureUnit",
        "interfacePollTime"
      ]
    },
    "HAFailoverConfigurationWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/HAFailoverConfiguration"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "HAFailoverConfiguration$InterfaceFailureUnits": {
      "type": "string",
      "enum": [
        "NUMBER",
        "PERCENTAGE"
      ]
    },
    "HAHealthStatus": {
      "type": "string",
      "enum": [
        "HEALTHY",
        "PROCESSING",
        "UNHEALTHY",
        "CRITICAL"
      ]
    },
    "HAJoinStatus": {
      "type": "object",
      "properties": {
        "statusMessage": {
          "type": "string"
        },
        "cliErrorMessage": {
          "type": "string"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/DeploymentStatus$DeploymentState"
        },
        "queuedTime": {
          "type": "integer"
        },
        "startTime": {
          "type": "integer"
        },
        "endTime": {
          "type": "integer"
        },
        "statusMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "modifiedObjects": {
          "type": "object"
        }
      }
    },
    "HANodeRole": {
      "type": "string",
      "enum": [
        "HA_PRIMARY",
        "HA_SECONDARY"
      ]
    },
    "HANodeState": {
      "type": "string",
      "enum": [
        "SINGLE_NODE",
        "HA_ACTIVE_NODE",
        "HA_STANDBY_NODE",
        "HA_SUSPENDED_NODE",
        "HA_FAILED_NODE",
        "HA_CONFIGURATION_SYNC",
        "HA_NEGOTIATING_NODE",
        "HA_DISABLED_NODE",
        "HA_UNKNOWN_NODE"
      ]
    },
    "HAStatus": {
      "type": "object",
      "properties": {
        "nodeRole": {
          "type": "object",
          "$ref": "#/definitions/HANodeRole"
        },
        "nodeState": {
          "type": "object",
          "$ref": "#/definitions/HANodeState"
        },
        "peerNodeState": {
          "type": "object",
          "$ref": "#/definitions/HANodeState"
        },
        "configStatus": {
          "type": "object",
          "$ref": "#/definitions/HAConfigStatus"
        },
        "haHealthStatus": {
          "type": "object",
          "$ref": "#/definitions/HAHealthStatus"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "HAStatus"
        }
      },
      "required": [
        "type"
      ]
    },
    "HAStatusWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/HAStatus"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "DiskUsage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "DiskUsage"
        },
        "used": {
          "type": "integer"
        },
        "free": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        }
      },
      "required": [
        "type"
      ]
    },
    "DiskUsageWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/DiskUsage"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "EpsReportItem": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer"
        },
        "avgEps": {
          "type": "integer"
        }
      }
    },
    "PercentUsageReportItem": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer"
        },
        "avgUsage": {
          "type": "number"
        }
      }
    },
    "ReportItem": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer"
        }
      }
    },
    "ReportItemAttribute": {
      "type": "object",
      "properties": {
        "attribute": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "reportitemattribute"
        },
        "units": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "ThroughputReportItem": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer"
        },
        "interfaceThroughput": {
          "type": "integer"
        },
        "interfaceName": {
          "type": "string"
        }
      }
    },
    "TrendingReport": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "TrendingReport"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          }
        },
        "metadata": {
          "type": "object"
        }
      },
      "required": [
        "type"
      ]
    },
    "TrendingReportWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TrendingReport"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IPPrefixEntry": {
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "sequence": {
          "type": "integer"
        },
        "ipAddress": {
          "type": "string"
        },
        "minPrefixLength": {
          "type": "integer"
        },
        "maxPrefixLength": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "default": "ipprefixentry"
        }
      },
      "required": [
        "sequence",
        "ipAddress",
        "action",
        "type"
      ]
    },
    "IPV4PrefixList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IPPrefixEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ipv4prefixlist"
        }
      },
      "required": [
        "entries",
        "type"
      ]
    },
    "IPV4PrefixListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IPV4PrefixList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IPV6PrefixList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IPPrefixEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ipv6prefixlist"
        }
      },
      "required": [
        "entries",
        "type"
      ]
    },
    "IPV6PrefixListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IPV6PrefixList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "Links": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        }
      }
    },
    "LinksReference": {
      "type": "object",
      "properties": {
        "links": {
          "type": "object",
          "$ref": "#/definitions/Links"
        }
      }
    },
    "PolicyList": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "standardAccessListAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv4PrefixListAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "standardAccessListNextHops": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv4PrefixListNextHops": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "standardAccessListRouteSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv4PrefixListRouteSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "asPathLists": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "communityLists": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "matchCommunityExactly": {
          "type": "boolean"
        },
        "metric": {
          "type": "integer"
        },
        "tag": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "policylist"
        }
      },
      "required": [
        "matchCommunityExactly",
        "action",
        "type"
      ]
    },
    "PolicyListWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/PolicyList"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "EntryOriginType": {
      "type": "string",
      "enum": [
        "LOCAL_IGP",
        "INCOMPLETE"
      ]
    },
    "IPV4NextHopType": {
      "type": "string",
      "enum": [
        "USE_PEER_ADDRESS",
        "SPECIFIC_IP"
      ]
    },
    "IPV6NextHopType": {
      "type": "string",
      "enum": [
        "USE_PEER_ADDRESS",
        "SPECIFIC_IP"
      ]
    },
    "RouteMap": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RouteMapEntry"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "routemap"
        }
      },
      "required": [
        "entries",
        "type"
      ]
    },
    "RouteMapWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/RouteMap"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "RouteMapEntry": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "integer"
        },
        "action": {
          "type": "object",
          "$ref": "#/definitions/EntryAction"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv4AccessListAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv4PrefixListAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv4AccessListNextHops": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv4PrefixListNextHops": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv4AccessListRouteSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv4PrefixListRouteSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ipv6AccessListAddress": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "ipv6PrefixListAddress": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "ipv6AccessListNextHop": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "ipv6PrefixListNextHop": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "ipv6AccessListRouteSource": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "ipv6PrefixListRouteSource": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "asPathLists": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "communityLists": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "policyLists": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "metricRouteValues": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "tagValues": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "routeTypeExternal1": {
          "type": "boolean"
        },
        "routeTypeExternal2": {
          "type": "boolean"
        },
        "routeTypeInternal": {
          "type": "boolean"
        },
        "routeTypeLocal": {
          "type": "boolean"
        },
        "routeTypeNSSAExternal1": {
          "type": "boolean"
        },
        "routeTypeNSSAExternal2": {
          "type": "boolean"
        },
        "metricBandwidth": {
          "type": "integer"
        },
        "metricType": {
          "type": "object",
          "$ref": "#/definitions/RouteMetricType"
        },
        "asPathPrependASPath": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "asPathPrependLastASToASPath": {
          "type": "integer"
        },
        "asPathConvertRouteTagIntoASPath": {
          "type": "boolean"
        },
        "communityListSetting": {
          "type": "integer"
        },
        "communityListSettingInternet": {
          "type": "boolean"
        },
        "communityListSettingNoAdvertise": {
          "type": "boolean"
        },
        "communityListSettingNoExport": {
          "type": "boolean"
        },
        "automaticTagSetting": {
          "type": "boolean"
        },
        "localPreferenceSetting": {
          "type": "integer"
        },
        "weightSetting": {
          "type": "integer"
        },
        "originSetting": {
          "type": "object",
          "$ref": "#/definitions/EntryOriginType"
        },
        "nextHopIPV4Setting": {
          "type": "object",
          "$ref": "#/definitions/IPV4NextHopType"
        },
        "specificIPsIPV4Setting": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prefixListIPV4Setting": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "nextHopIPV6Setting": {
          "type": "object",
          "$ref": "#/definitions/IPV6NextHopType"
        },
        "specificIPsIPV6Setting": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prefixListIPV6Setting": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "routemapentry"
        }
      },
      "required": [
        "communityListSettingNoExport",
        "routeTypeNSSAExternal1",
        "automaticTagSetting",
        "type",
        "routeTypeNSSAExternal2",
        "sequence",
        "routeTypeExternal2",
        "routeTypeExternal1",
        "communityListSettingNoAdvertise",
        "action",
        "routeTypeInternal",
        "routeTypeLocal",
        "asPathConvertRouteTagIntoASPath",
        "communityListSettingInternet"
      ]
    },
    "RouteMetricType": {
      "type": "string",
      "enum": [
        "INTERNAL",
        "TYPE1",
        "TYPE2"
      ]
    },
    "BGP": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "asNumber": {
          "type": "string",
          "description": "Unique Autonomous number that enables bgp process. Valid values for autonomous number are from 1-4294967295 and 1.0-XX.YY."
        },
        "maxasLimit": {
          "type": "integer",
          "description": "Specifies the maximum number of Autonomous system segments allowed. Valid values are from 1 to 254."
        },
        "logNeighborChanges": {
          "type": "boolean",
          "description": "Logs the neighbor status. If true, enables the logging of neighbor change messages. Default value is true."
        },
        "transportPathMtuDiscovery": {
          "type": "boolean",
          "description": "If true, enables BGP to automatically discover the best TCP path MTU for each BGP session. Default value is true."
        },
        "fastExternalFallOver": {
          "type": "boolean",
          "description": "Enable BGP to terminate external BGP sessions of any directly adjacent peer if the link used to reach the peer goes down; without waiting for the hold-down timer to expire. Default value is true."
        },
        "enforceFirstAs": {
          "type": "boolean",
          "description": "Allow a BGP routing process to discard updates received from an external BGP (eBGP) peers that do not list their autonomous system (AS) number as the first AS path segment in the AS_PATH attribute of the incoming route. Default value is true."
        },
        "asnotationDot": {
          "type": "boolean",
          "description": "Change the default display and regular expression match format of BGP 4-byte autonomous system numbers from asplain (decimal values) to dot notation. Default value is false."
        },
        "bgpTimers": {
          "type": "object",
          "$ref": "#/definitions/BGPTimers",
          "description": "An instance of type BGPTimers that represents the configuration of timer values for this process."
        },
        "bgpGracefulRestart": {
          "type": "object",
          "$ref": "#/definitions/BGPGracefulRestart",
          "description": "An instance of type BGPGracefulRestart that enable or disable the BGP graceful restart capability for a BGP neighbor."
        },
        "bgpBestPath": {
          "type": "object",
          "$ref": "#/definitions/BGPBestPath",
          "description": "An instance of type BGPBestPath that represents comparision between similar routes received from external BGP (eBGP) peers during the best path selection process and switch the best path to the route with the lowest router ID."
        },
        "routerId": {
          "type": "string",
          "description": "Represents a fixed router ID for the local BGP routing process."
        },
        "addressFamilyIPv4": {
          "type": "object",
          "$ref": "#/definitions/AFIPv4",
          "description": "An instance of type AFIPv4 that represents the address family configuration to configure a routing session using standard IPv4 address prefixes"
        },
        "addressFamilyIPv6": {
          "type": "object",
          "$ref": "#/definitions/AFIPv6",
          "description": "An instance of type AFIPv6 that represents the address family configuration to configure a routing session using standard IPv6 address prefixes"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "bgp"
        }
      },
      "required": [
        "transportPathMtuDiscovery",
        "bgpBestPath",
        "asNumber",
        "asnotationDot",
        "fastExternalFallOver",
        "logNeighborChanges",
        "type",
        "enforceFirstAs",
        "bgpTimers"
      ]
    },
    "BGPWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/BGP"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "BGPBestPath": {
      "type": "object",
      "properties": {
        "defaultLocalPreferenceValue": {
          "type": "integer",
          "description": "Value indicates the local preference number. Higher value indicates higher preference.Ranges from 0 to 4294967295. Default is 100"
        },
        "alwaysCompareMed": {
          "type": "boolean",
          "description": "If true, enables Multi Exit Discriminator (MED) comparison among paths learned from neighbors in different autonomous systems. Default is false."
        },
        "bestPathCompareRouterId": {
          "type": "boolean",
          "description": "If true, compares between similar routes received from external BGP (eBGP) peers during the best path selection process and switch the best path to the route with the lowest router ID. Default is false. Default value is false."
        },
        "deterministicMed": {
          "type": "boolean",
          "description": "If true, selects the best MED path advertised from the neighboring AS. Default is false."
        },
        "bestPathMedMissingAsWorst": {
          "type": "boolean",
          "description": "If true, sets a path with a missing MED attribute as the least preferred path. Default is false."
        },
        "type": {
          "type": "string",
          "default": "bgpbestpath"
        }
      },
      "required": [
        "deterministicMed",
        "defaultLocalPreferenceValue",
        "alwaysCompareMed",
        "type",
        "bestPathCompareRouterId",
        "bestPathMedMissingAsWorst"
      ]
    },
    "BGPGracefulRestart": {
      "type": "object",
      "properties": {
        "gracefulRestart": {
          "type": "boolean",
          "description": "If true, enables BGP graceful restart capability. Default value is false"
        },
        "gracefulRestartRestartTime": {
          "type": "integer",
          "description": "Maximum time period (in seconds) that the device will wait for a graceful-restart-capable neighbor to return to normal operation after arestart event occurs. Ranges from 1 to 3600. Default value is 120 seconds."
        },
        "gracefulRestartStalePathTime": {
          "type": "integer",
          "description": "Maximum time period (in seconds) that the device will hold stale paths for a restarting peer. All stale paths are deleted after this timer expires. Ranges from 1 to 3600. The default value is 360 seconds."
        },
        "type": {
          "type": "string",
          "default": "bgpgracefulrestart"
        }
      },
      "required": [
        "gracefulRestart",
        "type"
      ]
    },
    "BGPTimers": {
      "type": "object",
      "properties": {
        "keepAlive": {
          "type": "integer",
          "description": "Frequency (in seconds) with which the device sends keepalive messages to its peer. Ranges from 0 to 65535 The default value is 60 seconds."
        },
        "holdTime": {
          "type": "integer",
          "description": "Interval (in seconds) after not receiving a keepalive message that the device declares a peer dead. Ranges from 0 to 65535 The default value is 180 seconds."
        },
        "minHoldTime": {
          "type": "integer",
          "description": "Interval (in seconds) after not receiving a keepalive message from a neighbor, that the device declares a neighbor dead. Ranges from 0 to 65535 The default value is 0 seconds."
        },
        "type": {
          "type": "string",
          "default": "bgptimers"
        }
      },
      "required": [
        "keepAlive",
        "type",
        "minHoldTime",
        "holdTime"
      ]
    },
    "AFAggregateAddressIPv4": {
      "type": "object",
      "properties": {
        "advertiseMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents the name of the route map used to select the routes to create AS_SET origin communities."
        },
        "attributeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents the name of the route map used to set the attribute of the aggregate route."
        },
        "suppressMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents the name of the route map used to select the routes to be suppressed."
        },
        "asSet": {
          "type": "boolean",
          "description": "Generates autonomous system set path information. If true, enables asSet command. Default value is false."
        },
        "summaryOnly": {
          "type": "boolean",
          "description": "Filters all more-specific routes from updates. If true, enables summaryOnly command.  Default value is false."
        },
        "ipv4AggregateNetwork": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type NetworkObject that represents the IPv4 aggregate address."
        },
        "type": {
          "type": "string",
          "default": "afaggregateaddressipv4"
        }
      },
      "required": [
        "summaryOnly",
        "ipv4AggregateNetwork",
        "asSet",
        "type"
      ]
    },
    "AFAggregateAddressIPv6": {
      "type": "object",
      "properties": {
        "advertiseMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents the name of the route map used to select the routes to create AS_SET origin communities."
        },
        "attributeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents the name of the route map used to set the attribute of the aggregate route."
        },
        "suppressMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents the name of the route map used to select the routes to be suppressed."
        },
        "asSet": {
          "type": "boolean",
          "description": "Generates autonomous system set path information. If true, enables asSet command. Default value is false."
        },
        "summaryOnly": {
          "type": "boolean",
          "description": "Filters all more-specific routes from updates. If true, enables summaryOnly command.  Default value is false."
        },
        "ipv6AggregateNetwork": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type NetworkObject that represents the IPv6 aggregate address."
        },
        "type": {
          "type": "string",
          "default": "afaggregateaddressipv6"
        }
      },
      "required": [
        "summaryOnly",
        "ipv6AggregateNetwork",
        "asSet",
        "type"
      ]
    },
    "AFBGPDistance": {
      "type": "object",
      "properties": {
        "externalDistance": {
          "type": "integer",
          "description": "Administrative distance for external BGP routes. Ranges from 1 to 255. Default value is 20"
        },
        "internalDistance": {
          "type": "integer",
          "description": "Administrative distance for internal BGP routes. Ranges from 1 to 255. Default value is 200"
        },
        "localDistance": {
          "type": "integer",
          "description": "Administrative distance for local BGP routes. Ranges from 1 to 255. Default value is 200"
        },
        "type": {
          "type": "string",
          "default": "afbgpdistance"
        }
      },
      "required": [
        "externalDistance",
        "internalDistance",
        "type",
        "localDistance"
      ]
    },
    "AFIPv4": {
      "type": "object",
      "properties": {
        "distance": {
          "type": "object",
          "$ref": "#/definitions/AFBGPDistance",
          "description": "An instance of type AFBGPDistance that represents an administrative distance."
        },
        "defaultInformationOrginate": {
          "type": "boolean",
          "description": "If true, configures a BGP routing process to distribute a default route. Default is false."
        },
        "bgpSupressInactive": {
          "type": "boolean",
          "description": "If true, suppress the advertisement of routes that are not installed in the routing information base (RIB). Default is false."
        },
        "synchronization": {
          "type": "boolean",
          "description": "If true, synchronize between BGP and your Interior Gateway Protocol (IGP) system. Default is false."
        },
        "bgpRedistributeInternal": {
          "type": "boolean",
          "description": "If true, configures iBGP redistribution into an IGP, such as OSPF. Default is false."
        },
        "scanTime": {
          "type": "integer",
          "description": "Scanning intervals of BGP routers for next hop validation. Valid values are from 5 to 60 seconds. The default is 60 seconds."
        },
        "aggregateTimer": {
          "type": "integer",
          "description": "Represents interval at which BGP routes will be aggregated. Valid values are from 6 to 60 seconds. The default is 30 seconds."
        },
        "maximumPaths": {
          "type": "object",
          "$ref": "#/definitions/AFMaximumPaths",
          "description": "An instance of type AFMaximumPaths that controls the maximum number of parallel iBGP routes that can be installed in a routing table. If the ibgp keyword is not used, then the number_of_paths argument controls the maximum number of parallel EBGP routes."
        },
        "redistributeProtocols": {
          "type": "array",
          "description": "Represents redistribute routes from another routing domain into a BGP autonomous system.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RedistributeProtocol"
          }
        },
        "injectMaps": {
          "type": "array",
          "description": "Represents injectMaps for injecting more specific routes into a BGP routing table.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AFInjectMap"
          }
        },
        "afTableMap": {
          "type": "object",
          "$ref": "#/definitions/AFTableMap",
          "description": "An instance of type AFTableMap that modifies metric and tag values when the IP routing table is updated with BGP learned routes"
        },
        "autoSummary": {
          "type": "boolean",
          "description": "If true, enables automatic summarization of subnet routes into network-level routes.Default is false."
        },
        "bgpNextHopTriggerDelay": {
          "type": "integer",
          "description": "Sets the delay to trigger nexthop address tracking. Range is from 0 to 100. Default is 5"
        },
        "bgpNextHopTriggerEnable": {
          "type": "boolean",
          "description": "If true, enables BGP next-hop address tracking immediately. Default is true."
        },
        "aggregateAddressesIPv4s": {
          "type": "array",
          "description": "Represents aggregateAddressesIPv4s for aggregation of specific routes into one route.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AFAggregateAddressIPv4"
          }
        },
        "distributeLists": {
          "type": "array",
          "description": "Represents distributeLists for the configuration of filtering incoming or outgoing routes using access control lists",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DistributeList"
          }
        },
        "neighbors": {
          "type": "array",
          "description": "Represents neighbors configured for this process",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NeighborIPv4"
          }
        },
        "networks": {
          "type": "array",
          "description": "Represents networks to be advertised by the BGP routing processes.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AFIPv4Network"
          }
        },
        "type": {
          "type": "string",
          "default": "afipv4"
        }
      },
      "required": [
        "distance",
        "defaultInformationOrginate",
        "aggregateTimer",
        "bgpRedistributeInternal",
        "scanTime",
        "bgpSupressInactive",
        "synchronization",
        "bgpNextHopTriggerDelay",
        "autoSummary",
        "type",
        "bgpNextHopTriggerEnable"
      ]
    },
    "AFIPv4Network": {
      "type": "object",
      "properties": {
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents the identifier of a configured route map. The route map should be examined to filter the networks to be advertised. If not specified, all networks are advertised."
        },
        "ipv4Network": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type NetworkObject that represents the network that BGP will advertise."
        },
        "type": {
          "type": "string",
          "default": "afipv4network"
        }
      },
      "required": [
        "ipv4Network",
        "type"
      ]
    },
    "AFIPv6": {
      "type": "object",
      "properties": {
        "distance": {
          "type": "object",
          "$ref": "#/definitions/AFBGPDistance",
          "description": "An instance of type AFBGPDistance that represents an administrative distance."
        },
        "defaultInformationOrginate": {
          "type": "boolean",
          "description": "If true, configures a BGP routing process to distribute a default route. Default is false."
        },
        "bgpSupressInactive": {
          "type": "boolean",
          "description": "If true, suppress the advertisement of routes that are not installed in the routing information base (RIB). Default is false."
        },
        "synchronization": {
          "type": "boolean",
          "description": "If true, synchronize between BGP and your Interior Gateway Protocol (IGP) system. Default is false."
        },
        "bgpRedistributeInternal": {
          "type": "boolean",
          "description": "If true, configures iBGP redistribution into an IGP, such as OSPF. Default is false."
        },
        "scanTime": {
          "type": "integer",
          "description": "Scanning intervals of BGP routers for next hop validation. Valid values are from 5 to 60 seconds. The default is 60 seconds."
        },
        "aggregateTimer": {
          "type": "integer",
          "description": "Represents interval at which BGP routes will be aggregated. Valid values are from 6 to 60 seconds. The default is 30 seconds."
        },
        "maximumPaths": {
          "type": "object",
          "$ref": "#/definitions/AFMaximumPaths",
          "description": "An instance of type AFMaximumPaths that controls the maximum number of parallel iBGP routes that can be installed in a routing table. If the ibgp keyword is not used, then the number_of_paths argument controls the maximum number of parallel EBGP routes."
        },
        "redistributeProtocols": {
          "type": "array",
          "description": "Represents redistribute routes from another routing domain into a BGP autonomous system.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RedistributeProtocol"
          }
        },
        "injectMaps": {
          "type": "array",
          "description": "Represents injectMaps for injecting more specific routes into a BGP routing table.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AFInjectMap"
          }
        },
        "aggregateAddressesIPv6": {
          "type": "array",
          "description": "Represents aggregateAddressesIPv6s for  aggregation of specific routes into one route.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AFAggregateAddressIPv6"
          }
        },
        "neighbors": {
          "type": "array",
          "description": "Represents neighbors configured for this process",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NeighborIPv6"
          }
        },
        "networks": {
          "type": "array",
          "description": "Represents networks to be advertised by the BGP routing processes.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AFIPv6Network"
          }
        },
        "type": {
          "type": "string",
          "default": "afipv6"
        }
      },
      "required": [
        "distance",
        "defaultInformationOrginate",
        "aggregateTimer",
        "bgpRedistributeInternal",
        "scanTime",
        "bgpSupressInactive",
        "synchronization",
        "type"
      ]
    },
    "AFIPv6Network": {
      "type": "object",
      "properties": {
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents the identifier of a configured route map. The route map should be examined to filter the networks to be advertised. If not specified, all networks are advertised."
        },
        "prefixName": {
          "type": "string",
          "description": "Represents prefix name to be advertised."
        },
        "ipv6Network": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type NetworkObject that represents the network that BGP will advertise."
        },
        "type": {
          "type": "string",
          "default": "afipv6network"
        }
      },
      "required": [
        "ipv6Network",
        "type"
      ]
    },
    "AFInjectMap": {
      "type": "object",
      "properties": {
        "injectMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that contains the prefixes to inject into the local BGP routing table."
        },
        "existMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that contains the prefixes that the BGP speaker will track."
        },
        "copyAttributes": {
          "type": "boolean",
          "description": "Configures the injected route to inherit attributes of the aggregate route. Value True indicates the presence of copyAttributes in the command. False indicates otherwise. Default is false."
        },
        "type": {
          "type": "string",
          "default": "afinjectmap"
        }
      },
      "required": [
        "injectMap",
        "copyAttributes",
        "existMap",
        "type"
      ]
    },
    "AFMaximumPaths": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "description": "Maximum number of parallel EBGP routes that can be installed in a routing table. Valid value is from 1 to 8."
        },
        "ibgpValue": {
          "type": "integer",
          "description": "Maximum number of parallel iBGP routes that can be installed in a routing table. Valid value is from 1 to 8."
        },
        "type": {
          "type": "string",
          "default": "afmaximumpaths"
        }
      },
      "required": [
        "type"
      ]
    },
    "AFTableMap": {
      "type": "object",
      "properties": {
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap"
        },
        "filter": {
          "type": "boolean",
          "description": "If true, enables the route map name. Default value is false."
        },
        "type": {
          "type": "string",
          "default": "aftablemap"
        }
      },
      "required": [
        "filter",
        "routeMap",
        "type"
      ]
    },
    "NeighborAdvanced": {
      "type": "object",
      "properties": {
        "neighborSecret": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type Secret that enables Message Digest 5 (MD5) authentication on a TCP connection between two BGP peers."
        },
        "neighborHops": {
          "type": "object",
          "$ref": "#/definitions/NeighborHops",
          "description": "Represents either  neighborTtlSecurityHops or maxHopCount and disableConnectedCheck. maxHopCount: Accept and attempt BGP connections to external peers residing on networks that are not directly connected. disableConnectedCheck: Disable connection verification to establish an eBGP peering session with a single-hop peer that uses a loopback interfaceneighborTtlSecurityHops: Secure a BGP peering session and configures the maximum number of hops that separate two external BGP (eBGP) peers."
        },
        "neighborVersion": {
          "type": "integer",
          "description": "Specifies the BGP version number. Valid value is 4. The default is to use Version 4."
        },
        "nextHopSelf": {
          "type": "boolean",
          "description": "If true, enables router as the next hop for a BGP-speaking neighbor or peer group. Default value is false"
        },
        "neighborWeight": {
          "type": "integer",
          "description": "Assign a weight to a neighbor connection. Valid range is from 0 to 65535."
        },
        "sendCommunity": {
          "type": "boolean",
          "description": "Specifies that communities attributes should be sent to a BGP neighbor.If true, standard communities are sent to neighbors. Default value is false."
        },
        "neighborTransportConnectionMode": {
          "type": "object",
          "$ref": "#/definitions/NeighborTransportConnectionMode",
          "description": "An instance of type NeighborTransportConnectionMode that enables TCP transport session option for a BGP session. Type of connection can be active or passive."
        },
        "neighborTransportPathMTUDiscovery": {
          "type": "object",
          "$ref": "#/definitions/NeighborTransportPathMTUDiscovery",
          "description": "An instance of type NeighborTransportPathMTUDiscovery that enables TCP transport path maximum transmission unit (MTU) discovery. TCP path MTU discovery is enabled by default."
        },
        "type": {
          "type": "string",
          "default": "neighboradvanced"
        }
      },
      "required": [
        "nextHopSelf",
        "type",
        "sendCommunity"
      ]
    },
    "NeighborAdvertiseMap": {
      "type": "object",
      "properties": {
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type {RouteMap that represents the route map that will be advertised if the conditions of the exist map or non-exist map are met."
        },
        "existMap": {
          "type": "boolean",
          "description": "Value True selects exist map and value false specifies non-exist map.. Default value is false."
        },
        "existRouteMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents exist or non exist map. The name is compared with the routes in the BGP table to determine whether the advertise-map route is advertised or not."
        },
        "type": {
          "type": "string",
          "default": "neighboradvertisemap"
        }
      },
      "required": [
        "routeMap",
        "existRouteMap",
        "existMap",
        "type"
      ]
    },
    "NeighborDefaultOriginate": {
      "type": "object",
      "properties": {
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap that represents name of the route-map that allows route 0.0.0.0 to be injected conditionally."
        },
        "type": {
          "type": "string",
          "default": "neighbordefaultoriginate"
        }
      },
      "required": [
        "type"
      ]
    },
    "NeighborDistributeList": {
      "type": "object",
      "properties": {
        "accessListName": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type StandardAccessList that represents the name of a standard access list."
        },
        "filterUpdateAction": {
          "type": "object",
          "$ref": "#/definitions/FilterDirection",
          "description": "Applies access list to either incoming or outgoing routes. IN applies access list to incoming advertisements from that neighbor. OUT applies access list to outgoing advertisements from that neighbor."
        },
        "type": {
          "type": "string",
          "default": "neighbordistributelist"
        }
      },
      "required": [
        "filterUpdateAction",
        "accessListName",
        "type"
      ]
    },
    "NeighborEBGPMultiHop": {
      "type": "object",
      "properties": {
        "maxHopCount": {
          "type": "integer",
          "description": "Specifies time-to-live in the range from 1 to 255 hops. Default value is 255."
        },
        "disableConnectedCheck": {
          "type": "boolean",
          "description": "If true, disables connection verification to establish an eBGP peering session with a single-hop peer that uses a loopback interface. Default value is false"
        },
        "type": {
          "type": "string",
          "default": "neighborebgpmultihop"
        }
      },
      "required": [
        "maxHopCount",
        "disableConnectedCheck",
        "type"
      ]
    },
    "NeighborFallOverBFD": {
      "type": "object",
      "properties": {
        "fallOverBFD": {
          "type": "boolean",
          "description": "If true, enables BFD support for fall-over. Default value is false."
        },
        "neighborFallOverBFDOption": {
          "type": "object",
          "$ref": "#/definitions/NeighborFallOverBFDOption",
          "description": "Enables BGP to monitor the peering session of a specified neighbor for adjacency changes and to deactivate the peering session."
        },
        "type": {
          "type": "string",
          "default": "neighborfalloverbfd"
        }
      },
      "required": [
        "fallOverBFD",
        "type"
      ]
    },
    "NeighborFallOverBFDOption": {
      "type": "string",
      "enum": [
        "SINGLEHOP",
        "MULTIHOP"
      ]
    },
    "NeighborFilterList": {
      "type": "object",
      "properties": {
        "asPathList": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type ASPathList that represents the number of an autonomous system path access list."
        },
        "filterUpdateAction": {
          "type": "object",
          "$ref": "#/definitions/FilterDirection",
          "description": "Applies access list to either incoming or outgoing routes. IN applies access list to incoming advertisements from that neighbor. OUT applies access list to outgoing advertisements from that neighbor."
        },
        "type": {
          "type": "string",
          "default": "neighborfilterlist"
        }
      },
      "required": [
        "filterUpdateAction",
        "asPathList",
        "type"
      ]
    },
    "NeighborGeneral": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the neighbor. Maximum character count is 80."
        },
        "shutdown": {
          "type": "boolean",
          "description": "If true, disables a neighbor or peer group. Default value is false"
        },
        "fallOverBFD": {
          "type": "object",
          "$ref": "#/definitions/NeighborFallOverBFD",
          "description": "An instance of type NeighborFallOverBFD that enables or disables BFD support for fall-over."
        },
        "type": {
          "type": "string",
          "default": "neighborgeneral"
        }
      },
      "required": [
        "type",
        "shutdown"
      ]
    },
    "NeighborHAMode": {
      "type": "object",
      "properties": {
        "disable": {
          "type": "boolean",
          "description": "If true, specifies if the Neighbor HA graceful restart is disabled. Default value is false"
        },
        "type": {
          "type": "string",
          "default": "neighborhamode"
        }
      },
      "required": [
        "disable",
        "type"
      ]
    },
    "NeighborIPv4": {
      "type": "object",
      "properties": {
        "remoteAs": {
          "type": "string",
          "description": "Represents remote Autonomous number for BGP neighbor."
        },
        "activate": {
          "type": "boolean",
          "description": "If true, exchange information with a BGP neighbor. Default value is false."
        },
        "neighborGeneral": {
          "type": "object",
          "$ref": "#/definitions/NeighborGeneral",
          "description": "Represents settings of type NeighborGeneral such as BFD support for fall-over"
        },
        "neighborAdvanced": {
          "type": "object",
          "$ref": "#/definitions/NeighborAdvanced",
          "description": "Represents settings of type NeighborAdvanced such as NeighborHops support for neighborTtlSecurityHops, maxHopCount and disableConnectedCheck"
        },
        "neighborRoutes": {
          "type": "object",
          "$ref": "#/definitions/NeighborRoutes",
          "description": "Represents settings of type NeighborRoutes such as Neighbor Default Originate, Neighbor Advertise Map"
        },
        "neighborRouteMap": {
          "type": "array",
          "description": "Represents neighbor route-maps for applying a route map to incoming or outgoing routes.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NeighborRouteMap"
          }
        },
        "neighborFilterList": {
          "type": "array",
          "description": "Represents neighbor filter-list for establishing BGP filters.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NeighborFilterList"
          }
        },
        "neighborMaximumPrefix": {
          "type": "object",
          "$ref": "#/definitions/NeighborMaximumPrefix",
          "description": "An instance of type NeighborMaximumPrefix that controls the number of prefixes that can be received from a neighbor."
        },
        "haModeGracefulRestart": {
          "type": "boolean",
          "description": "If true, enables the graceful restart configuration when the system is configured in HA mode. Default value is false."
        },
        "neighborTimers": {
          "type": "object",
          "$ref": "#/definitions/NeighborTimers",
          "description": "An instance of type NeighborTimers that sets the timers for a specific BGP peer or peer group."
        },
        "neighborLocalAs": {
          "type": "object",
          "$ref": "#/definitions/NeighborLocalAs",
          "description": "An instance of type NeighborLocalAs that customizes the AS_PATH attribute for routes received from an external Border Gateway Protocol (eBGP) neighbor."
        },
        "ipv4Address": {
          "type": "string",
          "description": "Represents neighbor ipv4 address."
        },
        "neighborDistributeLists": {
          "type": "array",
          "description": "Represents neighbor distribute-lists for distributing BGP neighbor information as specified in an access list.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NeighborDistributeList"
          }
        },
        "ipv4PrefixListFilter": {
          "type": "array",
          "description": "Represents neighbor distribute-lists for distributing BGP neighbor information as specified in an prefix list.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IPV4PrefixListFilter"
          }
        },
        "neighborHAMode": {
          "type": "object",
          "$ref": "#/definitions/NeighborHAMode",
          "description": "An instance of type NeighborHAMode that enables or disables Neighbor HA graceful restart mode."
        },
        "type": {
          "type": "string",
          "default": "neighboripv4"
        }
      },
      "required": [
        "haModeGracefulRestart",
        "remoteAs",
        "activate",
        "type"
      ]
    },
    "NeighborIPv6": {
      "type": "object",
      "properties": {
        "remoteAs": {
          "type": "string",
          "description": "Represents remote Autonomous number for BGP neighbor."
        },
        "activate": {
          "type": "boolean",
          "description": "If true, exchange information with a BGP neighbor. Default value is false."
        },
        "neighborGeneral": {
          "type": "object",
          "$ref": "#/definitions/NeighborGeneral",
          "description": "Represents settings of type NeighborGeneral such as BFD support for fall-over"
        },
        "neighborAdvanced": {
          "type": "object",
          "$ref": "#/definitions/NeighborAdvanced",
          "description": "Represents settings of type NeighborAdvanced such as NeighborHops support for neighborTtlSecurityHops, maxHopCount and disableConnectedCheck"
        },
        "neighborRoutes": {
          "type": "object",
          "$ref": "#/definitions/NeighborRoutes",
          "description": "Represents settings of type NeighborRoutes such as Neighbor Default Originate, Neighbor Advertise Map"
        },
        "neighborRouteMap": {
          "type": "array",
          "description": "Represents neighbor route-maps for applying a route map to incoming or outgoing routes.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NeighborRouteMap"
          }
        },
        "neighborFilterList": {
          "type": "array",
          "description": "Represents neighbor filter-list for establishing BGP filters.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NeighborFilterList"
          }
        },
        "neighborMaximumPrefix": {
          "type": "object",
          "$ref": "#/definitions/NeighborMaximumPrefix",
          "description": "An instance of type NeighborMaximumPrefix that controls the number of prefixes that can be received from a neighbor."
        },
        "haModeGracefulRestart": {
          "type": "boolean",
          "description": "If true, enables the graceful restart configuration when the system is configured in HA mode. Default value is false."
        },
        "neighborTimers": {
          "type": "object",
          "$ref": "#/definitions/NeighborTimers",
          "description": "An instance of type NeighborTimers that sets the timers for a specific BGP peer or peer group."
        },
        "neighborLocalAs": {
          "type": "object",
          "$ref": "#/definitions/NeighborLocalAs",
          "description": "An instance of type NeighborLocalAs that customizes the AS_PATH attribute for routes received from an external Border Gateway Protocol (eBGP) neighbor."
        },
        "ipv6Address": {
          "type": "string",
          "description": "Represents neighbor ipv6 address."
        },
        "ipv6Prefix": {
          "type": "integer",
          "description": "Represents prefix of the IPv6 address."
        },
        "ipv6PrefixListFilter": {
          "type": "array",
          "description": "Represents neighbor distribute-lists for distributing BGP neighbor information as specified in an prefix list.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IPV6PrefixListFilter"
          }
        },
        "type": {
          "type": "string",
          "default": "neighboripv6"
        }
      },
      "required": [
        "haModeGracefulRestart",
        "remoteAs",
        "activate",
        "type"
      ]
    },
    "NeighborLocalAs": {
      "type": "object",
      "properties": {
        "localAsNumber": {
          "type": "string",
          "description": "Represents the number of an autonomous system to prepend to the AS_PATH attribute. The range of values for this argument is any valid autonomous system number from 1 to 4294967295 or 1.0 to XX.YY."
        },
        "neighborLocalAsOption": {
          "type": "object",
          "$ref": "#/definitions/NeighborLocalAsOption",
          "description": "Allows a router to appear to be a member of AS. Setting NO_PREPEND  does not prepend local-as to updates from ebgp neighbor. Setting REPLACE_AS replaces real AS with local AS in the EBGP updates also includes no-prepend. Setting DUAL_AS accepts either real AS or local AS from the ebgp neighbor also includes no-prepend and replace-as."
        },
        "type": {
          "type": "string",
          "default": "neighborlocalas"
        }
      },
      "required": [
        "neighborLocalAsOption",
        "type",
        "localAsNumber"
      ]
    },
    "NeighborLocalAsOption": {
      "type": "string",
      "enum": [
        "NONE",
        "NO_PREPEND",
        "REPLACE_AS",
        "DUAL_AS"
      ]
    },
    "NeighborMaximumPrefix": {
      "type": "object",
      "properties": {
        "maxPrefixLimit": {
          "type": "integer",
          "description": "Represents maximum number of prefixes allowed from this neighbor. Valid range is 1 to 2147483647."
        },
        "thresholdValue": {
          "type": "integer",
          "description": "Specifies at what percentage of maximum the router starts to generate a warning message. Valid range is 1 to 100. Default value is 75."
        },
        "restartInterval": {
          "type": "integer",
          "description": "Specifies the time interval after which the BGP neighbor restarts. Valid range is 1 to 65535."
        },
        "neighborMaximumPrefixOption": {
          "type": "object",
          "$ref": "#/definitions/NeighborMaximumPrefixOption",
          "description": "Represents configuration to control the number of prefixes that can be received from a neighbor. WARNING_ONLY specifies the time interval after which the BGP neighbor restarts.RESTART allows the router to generate a log message when the maximum number of prefixes is exceeded, instead of terminating the peering."
        },
        "type": {
          "type": "string",
          "default": "neighbormaximumprefix"
        }
      },
      "required": [
        "maxPrefixLimit",
        "thresholdValue",
        "type"
      ]
    },
    "NeighborMaximumPrefixOption": {
      "type": "string",
      "enum": [
        "WARNING_ONLY",
        "RESTART"
      ]
    },
    "NeighborRouteMap": {
      "type": "object",
      "properties": {
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type RouteMap."
        },
        "filterUpdateAction": {
          "type": "object",
          "$ref": "#/definitions/FilterDirection",
          "description": "Applies a route map to either incoming or outgoing routes. IN applies a route map to incoming routes. OUT applies a route map to outgoing routes."
        },
        "type": {
          "type": "string",
          "default": "neighborroutemap"
        }
      },
      "required": [
        "routeMap",
        "filterUpdateAction",
        "type"
      ]
    },
    "NeighborRoutes": {
      "type": "object",
      "properties": {
        "advertisementInterval": {
          "type": "integer",
          "description": "Sets the minimum interval between the sending of BGP routing updates. Valid values are from 0 to 600."
        },
        "neighborAdvertiseMaps": {
          "type": "array",
          "description": "Represents  neighbor advertise-maps for BGP conditional advertisement feature. The condition is defined by a route map called non-exist-map for conditions that do not exist or by a route map called exist-map for conditions that do exist.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NeighborAdvertiseMap"
          }
        },
        "neighborDefaultOriginate": {
          "type": "object",
          "$ref": "#/definitions/NeighborDefaultOriginate",
          "description": "An instance of type NeighborDefaultOriginate that allows a BGP speaker (the local router) to send the default route 0.0.0.0 to a neighbor for use as a default route."
        },
        "removePrivateAs": {
          "type": "boolean",
          "description": "If true, removes private autonomous system numbers from outbound routing updates. Default value is false."
        },
        "type": {
          "type": "string",
          "default": "neighborroutes"
        }
      },
      "required": [
        "removePrivateAs",
        "type"
      ]
    },
    "NeighborTTLSecurityHop": {
      "type": "object",
      "properties": {
        "neighborTtlSecurityHops": {
          "type": "integer",
          "description": "Represents the number of hops that separate the eBGP peers.The TTL value is calculated by the router from the configured hop-count argument. Valid values are from 1 to 254."
        },
        "type": {
          "type": "string",
          "default": "neighborttlsecurityhop"
        }
      },
      "required": [
        "neighborTtlSecurityHops",
        "type"
      ]
    },
    "NeighborTimers": {
      "type": "object",
      "properties": {
        "keepAliveInterval": {
          "type": "integer",
          "description": "Represents the frequency (in seconds) with which the device sends keepalive messages to its peer. Valid values are from 0 to 65535. Default value is 60 seconds."
        },
        "holdTime": {
          "type": "integer",
          "description": "Represents the interval (in seconds) after not receiving a keepalive message that the device declares a peer dead. Valid values are from 0 to 65535. Default value is 180 seconds."
        },
        "minimumHoldTime": {
          "type": "integer",
          "description": "Represents the minimum interval (in seconds) after not receiving a keepalive message that the device declares a peer dead. Valid values are from 0 to 65535. Default value is 0 seconds."
        },
        "type": {
          "type": "string",
          "default": "neighbortimers"
        }
      },
      "required": [
        "keepAliveInterval",
        "minimumHoldTime",
        "type",
        "holdTime"
      ]
    },
    "NeighborTransportConnectionMode": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "PASSIVE"
      ]
    },
    "NeighborTransportPathMTUDiscovery": {
      "type": "object",
      "properties": {
        "disable": {
          "type": "boolean",
          "description": "If true, disables TCP path MTU discovery. Default value is false"
        },
        "type": {
          "type": "string",
          "default": "neighbortransportpathmtudiscovery"
        }
      },
      "required": [
        "disable",
        "type"
      ]
    },
    "FilterProtocol": {
      "type": "string",
      "enum": [
        "CONNECTED",
        "STATIC",
        "RIP",
        "BGP",
        "OSPF",
        "EIGRP"
      ]
    },
    "IncomingRouteFilter": {
      "type": "object",
      "properties": {
        "accessList": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An object of type standard access list that defines which networks are to be received and which are to be suppressed in routing updates"
        },
        "inInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "Optional, specifies an interface to limit the filter to updates received on that interface"
        },
        "type": {
          "type": "string",
          "default": "incomingroutefilter"
        }
      },
      "required": [
        "accessList",
        "type"
      ]
    },
    "OutgoingRouteFilter": {
      "type": "object",
      "properties": {
        "accessList": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An object of type standard access list that defines which networks are to be received and which are to be suppressed in routing updates"
        },
        "protocol": {
          "type": "object",
          "$ref": "#/definitions/FilterProtocol",
          "description": "Optional, if specified filters peers and networks learned through the routes of the specified protocol"
        },
        "processId": {
          "type": "string",
          "description": "The identifier of the process if the specified protocol is either OSPF, BGP, or EIGRP"
        },
        "type": {
          "type": "string",
          "default": "outgoingroutefilter"
        }
      },
      "required": [
        "accessList",
        "type"
      ]
    },
    "DetectionMechanism": {
      "type": "string",
      "enum": [
        "DEAD_INTERVAL",
        "HELLO_MULTIPLIER"
      ]
    },
    "OSPFDeadIntervalMechanism": {
      "type": "object",
      "properties": {
        "helloInterval": {
          "type": "integer",
          "description": "Specifies the time in seconds in between the hello packets being sent. Ranges from 1 to 8192, default is 10"
        },
        "deadInterval": {
          "type": "integer",
          "description": "Specifies the time in seconds that the hello packets are not seen before a neighbor indicates that the router is down. Ranges from 1 to 8192, default is 4 times hello interval or 40"
        },
        "type": {
          "type": "string",
          "default": "ospfdeadintervalmechanism"
        }
      },
      "required": [
        "deadInterval",
        "helloInterval",
        "type"
      ]
    },
    "OSPFHelloMultiplierMechanism": {
      "type": "object",
      "properties": {
        "helloMultiplier": {
          "type": "integer",
          "description": "Specifies the number of hello packets to send in one second. Ranges from 3 to 20"
        },
        "type": {
          "type": "string",
          "default": "ospfhellomultipliermechanism"
        }
      },
      "required": [
        "helloMultiplier",
        "type"
      ]
    },
    "OSPFInterfaceSettings": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "deviceInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "The interface for which ospf settings has to be configured. The interface must not be a BVI interface, member of BVI interface, or be passive, or used at high availability configuration and should be in enabled state"
        },
        "ospfProtocolConfiguration": {
          "type": "object",
          "$ref": "#/definitions/OSPFProtocolConfiguration",
          "description": "Represents the configuration to be made for OSPF protocol"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ospfinterfacesettings"
        }
      },
      "required": [
        "deviceInterface",
        "ospfProtocolConfiguration",
        "type"
      ]
    },
    "OSPFInterfaceSettingsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/OSPFInterfaceSettings"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "OSPFProtocolConfiguration": {
      "type": "object",
      "properties": {
        "authentication": {
          "type": "object",
          "$ref": "#/definitions/AuthenticationBase",
          "description": "The authentication to set for the OSPF protocol. If null, considered as no authentication"
        },
        "packetCost": {
          "type": "integer",
          "description": "Specifies the cost of sending a packet on the given OSPF interface. Ranges from 1 to 65535."
        },
        "priority": {
          "type": "integer",
          "description": "Specifies the priority to help determine the OSPF designated router for a network. Ranges from 0 to 255"
        },
        "ptpNonBroadcast": {
          "type": "boolean",
          "description": "If true, configures the interface network type as point-to-point non-broadcast"
        },
        "filterOutgoingLSA": {
          "type": "boolean",
          "description": "If true, configures the interface to filter outgoing LSAs"
        },
        "ignoreMtuMismatch": {
          "type": "boolean",
          "description": "If true, ignores the MTU mismatch among OSPF neighbors during the database description(DBD) exchange"
        },
        "lostNeighborDetectionMechanism": {
          "type": "object",
          "$ref": "#/definitions/OSPFLostNeighborDetectionMechanism",
          "description": "Represents the configuration for lost neighbor detection mechanism, default is the OSPFDeadIntervalMechanism"
        },
        "retransmitInterval": {
          "type": "integer",
          "description": "The number of seconds between LSA retransmissions for adjacencies belonging to an OSPF interface. Ranges from 1 to 8192, default is 5"
        },
        "transmitDelay": {
          "type": "integer",
          "description": "Sets the estimated number of seconds required to send a link-state update packet on an OSPF interface. Ranges from 1 to 8192, default is 1"
        },
        "type": {
          "type": "string",
          "default": "ospfprotocolconfiguration"
        }
      },
      "required": [
        "retransmitInterval",
        "lostNeighborDetectionMechanism",
        "type",
        "transmitDelay"
      ]
    },
    "RouteLevel": {
      "type": "string",
      "enum": [
        "LEVEL_1",
        "LEVEL_1_2",
        "LEVEL_2"
      ]
    },
    "AdministrativeDistance": {
      "type": "object",
      "properties": {
        "interArea": {
          "type": "integer",
          "description": "Administrative distance for inter area routes. Ranges from 1 to 255, default is 110"
        },
        "intraArea": {
          "type": "integer",
          "description": "Administrative distance for inter area routes. Ranges from 1 to 255, default is 110"
        },
        "external": {
          "type": "integer",
          "description": "Administrative distance for external type 5 and type 7 routes. Ranges from 1 to 255, default is 110"
        },
        "type": {
          "type": "string",
          "default": "administrativedistance"
        }
      },
      "required": [
        "external",
        "type",
        "interArea",
        "intraArea"
      ]
    },
    "Area": {
      "type": "object",
      "properties": {
        "areaId": {
          "type": "string",
          "description": "The identifier of this area. Can be an IPv4 address or an integer ranging from 0 to 4294967295"
        },
        "areaNetworks": {
          "type": "array",
          "description": "Defines the networks on which OSPF runs for this area",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AreaNetwork"
          }
        },
        "authentication": {
          "type": "object",
          "$ref": "#/definitions/Authentication",
          "description": "The authentication to use for this area. Setting NONE has the same effect as not enabling authentication."
        },
        "defaultCost": {
          "type": "integer",
          "description": "Sets the summary default cost for Stub or NSSA area. Ranges from 0 to 16777214"
        },
        "filterList": {
          "type": "array",
          "description": "Represents the configuration to filter prefixes advertised in type 3 link-state advertisements (LSAs) between OSPF areas of an area border router",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PrefixFilter"
          }
        },
        "areaType": {
          "type": "object",
          "$ref": "#/definitions/AreaType",
          "description": "Represents the configuration of this area as Stub or NSSA"
        },
        "virtualLinks": {
          "type": "array",
          "description": "Represents the configuration of one or more virtual links from this area. Cannot be configured if the area type is Stub or NSSA",
          "items": {
            "type": "object",
            "$ref": "#/definitions/VirtualLink"
          }
        },
        "areaRanges": {
          "type": "array",
          "description": "Represents the configuration of route summarization between areas. For use only with area border routers",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AreaRange"
          }
        },
        "type": {
          "type": "string",
          "default": "area"
        }
      },
      "required": [
        "areaId",
        "type"
      ]
    },
    "AreaNetwork": {
      "type": "object",
      "properties": {
        "ipv4Network": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An IPv4 network object that defines the network on which OSPF should run for a given area"
        },
        "tagInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "Optional, if specified, the interface must be in the network identified by given network object. Useful if you want to prevent the changes to this interface when they are not in accordance with the OSPF process running on this interface"
        },
        "type": {
          "type": "string",
          "default": "areanetwork"
        }
      },
      "required": [
        "ipv4Network",
        "type"
      ]
    },
    "AreaRange": {
      "type": "object",
      "properties": {
        "addressNetwork": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "The network object that defines the network to use as a range for route summarization"
        },
        "advertise": {
          "type": "boolean",
          "description": "If false, sets the address range status to DoNotAdvertise. The Type 3 summary LSA is suppressed, and the component networks remain hidden from other networks. Default is true."
        },
        "type": {
          "type": "string",
          "default": "arearange"
        }
      },
      "required": [
        "addressNetwork",
        "type",
        "advertise"
      ]
    },
    "Authentication": {
      "type": "string",
      "enum": [
        "NONE",
        "PASSWORD",
        "MESSAGE_DIGEST"
      ]
    },
    "DefaultInformationOriginate": {
      "type": "object",
      "properties": {
        "always": {
          "type": "boolean",
          "description": "If true, always advertises default route, whether or not default route exists"
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the route metric configuration for this process"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "The RouteMap object to use. Specifies the routing process that generates the default route if the route map is satisfied"
        },
        "type": {
          "type": "string",
          "default": "defaultinformationoriginate"
        }
      },
      "required": [
        "routeMetric",
        "type"
      ]
    },
    "FilterDirection": {
      "type": "string",
      "enum": [
        "IN",
        "OUT"
      ]
    },
    "LogAdjacencyChanges": {
      "type": "object",
      "properties": {
        "logType": {
          "type": "object",
          "$ref": "#/definitions/LogType",
          "description": "The type of logging to use when logging the neighbor changes, default is DEFAULT"
        },
        "type": {
          "type": "string",
          "default": "logadjacencychanges"
        }
      },
      "required": [
        "logType",
        "type"
      ]
    },
    "LogType": {
      "type": "string",
      "enum": [
        "DEFAULT",
        "DETAILED"
      ]
    },
    "LsaThrottleTimer": {
      "type": "object",
      "properties": {
        "initialDelay": {
          "type": "integer",
          "description": "Delay to generate first occurrence of LSA in milliseconds. Ranges from 0 to 600000, default is 0"
        },
        "minimumDelay": {
          "type": "integer",
          "description": "Minimum delay between originating the same LSA in milliseconds. Ranges from 1 to 600000, default is 5000"
        },
        "maximumDelay": {
          "type": "integer",
          "description": "Maximum delay between originating the same LSA in milliseconds. Ranges from 1 to 600000, default is 5000"
        },
        "type": {
          "type": "string",
          "default": "lsathrottletimer"
        }
      },
      "required": [
        "maximumDelay",
        "initialDelay",
        "type",
        "minimumDelay"
      ]
    },
    "MD5Authentication": {
      "type": "object",
      "properties": {
        "md5KeyId": {
          "type": "integer",
          "description": "The identifier to associate with the message-digest key for MD5 authentication. Ranges from 1 to 255"
        },
        "md5Key": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An object of type secret that supplies the password to use while configuring the message-digest password for OSPF MD5 authentication. The password can be up to sixteen ascii characters, but cannot start with a number immediately followed by space"
        },
        "type": {
          "type": "string",
          "default": "md5authentication"
        }
      },
      "required": [
        "md5Key",
        "md5KeyId",
        "type"
      ]
    },
    "MetricType": {
      "type": "string",
      "enum": [
        "TYPE_1",
        "TYPE_2"
      ]
    },
    "Neighbor": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string",
          "description": "The IPv4 address of the OSPFv2 neighbor"
        },
        "neighborInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "The interface to use to communicate with the neighbor"
        },
        "type": {
          "type": "string",
          "default": "neighbor"
        }
      },
      "required": [
        "neighborInterface",
        "ipAddress",
        "type"
      ]
    },
    "NsfGracefulRestart": {
      "type": "object",
      "properties": {
        "nsfMechanism": {
          "type": "object",
          "$ref": "#/definitions/NsfMechanism",
          "description": "NSF Capability Mechanism to use, default is BOTH.<br>If CISCO, device will be configured with Link Local Signalling(lls) block capability<br>If IETF, device will be configured with opaque Link State Advertisement(LSA) capability<br>If Both, device will be configured as both LLS and opaque LSA capable<br>If None, device will be configured as NOT capable of LLS or opaque LSA"
        },
        "ietfStrictLsaChecking": {
          "type": "boolean",
          "description": "If true, enables the strict LSA checking feature that allows a helper router to terminate the graceful restart process if it detects a changed LSA that would cause flooding during the graceful restart process. Strict LSA checking is disabled by default. This setting takes effect only when the Nsf Mechanism is configured as IETF or BOTH"
        },
        "type": {
          "type": "string",
          "default": "nsfgracefulrestart"
        }
      },
      "required": [
        "nsfMechanism",
        "type"
      ]
    },
    "NsfMechanism": {
      "type": "string",
      "enum": [
        "CISCO",
        "IETF",
        "BOTH",
        "NONE"
      ]
    },
    "Nssa": {
      "type": "object",
      "properties": {
        "noRedistribution": {
          "type": "boolean",
          "description": "If true, no redistribution into this area"
        },
        "noSummary": {
          "type": "boolean",
          "description": "If true, no summary LSA is sent into this area"
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of type 7 default route that can be used to reach external destinations"
        },
        "type": {
          "type": "string",
          "default": "nssa"
        }
      },
      "required": [
        "type"
      ]
    },
    "OSPF": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "processId": {
          "type": "string",
          "description": "An identifier for the OSPF Process. Must be in the range 1 - 65535 inclusive."
        },
        "logAdjacencyChanges": {
          "type": "object",
          "$ref": "#/definitions/LogAdjacencyChanges",
          "description": "Represents the way adjacency changes must be logged. If null, disables logging for this process"
        },
        "processConfiguration": {
          "type": "object",
          "$ref": "#/definitions/ProcessConfiguration",
          "description": "Represents the advanced configuration for this process"
        },
        "areas": {
          "type": "array",
          "description": "Represents the areas to be configured for this process",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Area"
          }
        },
        "neighbors": {
          "type": "array",
          "description": "Represents the neighbors to be configured for this process",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Neighbor"
          }
        },
        "summaryAddresses": {
          "type": "array",
          "description": "Represents the summary addresses configured for route summarization when redistributing routes into this process. Each object represents the configuration of the advertisement on one summary route for all redistributed routes included for a network address and mask. Use AreaRange under Area to configure route summarization between OSPF areas",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SummaryAddress"
          }
        },
        "filterRules": {
          "type": "array",
          "description": "Represents the configuration of filtering incoming or outgoing routes using access control lists",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DistributeList"
          }
        },
        "redistributeProtocols": {
          "type": "array",
          "description": "Represents the configuration of a list of protocols whose routes are redistributed into this process",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RedistributeProtocol"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ospf"
        }
      },
      "required": [
        "processId",
        "processConfiguration",
        "type"
      ]
    },
    "OSPFWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/OSPF"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "PasswordAuthentication": {
      "type": "object",
      "properties": {
        "authKey": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An object of type secret that supplies the password to use while configuring the plain-text password for OSPF authentication. The password can be up to eight ascii characters, but cannot start with a number immediately followed by space"
        },
        "type": {
          "type": "string",
          "default": "passwordauthentication"
        }
      },
      "required": [
        "authKey",
        "type"
      ]
    },
    "PrefixFilter": {
      "type": "object",
      "properties": {
        "prefixList": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "The IPv4PrefixList object to use for filtering prefixes advertised in type 3 LSAs between OSPF areas"
        },
        "filterDirection": {
          "type": "object",
          "$ref": "#/definitions/FilterDirection",
          "description": "The direction in which the given prefix list must be applied. IN indicates that the list is applied to prefixes advertised to the specified area from other areas, OUT indicates the prefixes advertised out of the specified area to other areas. Default is IN."
        },
        "type": {
          "type": "string",
          "default": "prefixfilter"
        }
      },
      "required": [
        "prefixList",
        "type",
        "filterDirection"
      ]
    },
    "ProcessConfiguration": {
      "type": "object",
      "properties": {
        "routerId": {
          "type": "string",
          "description": "An IPv4 address, used to identify a specific device within an OSPF database. If null, a router id is automatically assigned by the system"
        },
        "rfc1583Compatible": {
          "type": "boolean",
          "description": "If true, calculates summary route costs according to RFC 1583"
        },
        "ignoreLsaMospf": {
          "type": "boolean",
          "description": "If true, suppresses the sending of syslog messages when the router receives unsupported LSA Type 6 MOSPF packets"
        },
        "administrativeDistance": {
          "type": "object",
          "$ref": "#/definitions/AdministrativeDistance",
          "description": "Represents the configuration of administrative distances for OSPF routes"
        },
        "timers": {
          "type": "object",
          "$ref": "#/definitions/Timers",
          "description": "Represents the configuration of timer values for this process"
        },
        "defaultInformationOriginate": {
          "type": "object",
          "$ref": "#/definitions/DefaultInformationOriginate",
          "description": "Represents the configuration of default external routes into OSPF routing domain"
        },
        "nsfGracefulRestart": {
          "type": "object",
          "$ref": "#/definitions/NsfGracefulRestart",
          "description": "Represents the configuration of Non-stop forward capability using either NSF Cisco (RFC 4811 and RFC 4812) or NSF IETF (RFC 3623)"
        },
        "type": {
          "type": "string",
          "default": "processconfiguration"
        }
      },
      "required": [
        "timers",
        "administrativeDistance",
        "type"
      ]
    },
    "RouteMetric": {
      "type": "object",
      "properties": {
        "metricValue": {
          "type": "integer",
          "description": "Default metric, specifies the metric used for generating the default route. Ranges from 1 to 16777214, default is 1."
        },
        "metricType": {
          "type": "object",
          "$ref": "#/definitions/MetricType",
          "description": "Specifies the external link type that is associated with the default route that is advertised into the OSPF domain, default is TYPE_2"
        },
        "type": {
          "type": "string",
          "default": "routemetric"
        }
      },
      "required": [
        "metricType",
        "metricValue",
        "type"
      ]
    },
    "SpfThrottleTimer": {
      "type": "object",
      "properties": {
        "initialDelay": {
          "type": "integer",
          "description": "Delay between receiving a change to SPF calculation in milliseconds. Ranges from 1 to 600000, default is 5000"
        },
        "minimumHoldTime": {
          "type": "integer",
          "description": "Delay between first and second SPF calculation in milliseconds. Ranges from 1 to 600000, default is 10000"
        },
        "maximumWaitTime": {
          "type": "integer",
          "description": "Maximum wait time in milliseconds for SPF calculations. Ranges from 1 to 600000, default is 10000"
        },
        "type": {
          "type": "string",
          "default": "spfthrottletimer"
        }
      },
      "required": [
        "minimumHoldTime",
        "maximumWaitTime",
        "initialDelay",
        "type"
      ]
    },
    "Stub": {
      "type": "object",
      "properties": {
        "noSummary": {
          "type": "boolean",
          "description": "If true, prevents sending a summary link advertisement (LSA Type 3) into the stub area"
        },
        "type": {
          "type": "string",
          "default": "stub"
        }
      },
      "required": [
        "type"
      ]
    },
    "SummaryAddress": {
      "type": "object",
      "properties": {
        "summaryNetwork": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "The network object to use that acts as an aggregate address for OSPF"
        },
        "advertise": {
          "type": "boolean",
          "description": "If false, not advertised when translating OSPF type-7 LSA. Default is true"
        },
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the summarized address. Ranges from 0 to 4294967295"
        },
        "type": {
          "type": "string",
          "default": "summaryaddress"
        }
      },
      "required": [
        "summaryNetwork",
        "type",
        "advertise"
      ]
    },
    "Timers": {
      "type": "object",
      "properties": {
        "lsaArrival": {
          "type": "integer",
          "description": "The minimum interval in milliseconds between accepting the same LSA from OSPF neighbors. Ranges from 0 to 600000, default is 1000"
        },
        "floodPacing": {
          "type": "integer",
          "description": "The time in milliseconds at which LSAs in the flooding queue are paced in between updates. Ranges from 5 to 100, default is 33"
        },
        "lsaGroup": {
          "type": "integer",
          "description": "The number of seconds in the interval at which LSAs are grouped, refreshed, check summed, or aged. Ranges from 10 to 1800, default is 240"
        },
        "retransmission": {
          "type": "integer",
          "description": "The time in milliseconds at which LSAs in the retransmission queue are paced. Ranges from 5 to 200, default is 66"
        },
        "lsaThrottleTimer": {
          "type": "object",
          "$ref": "#/definitions/LsaThrottleTimer",
          "description": "LSA throttle timer values in milliseconds (initial-delay ≤ min-delay ≤ max-delay)"
        },
        "spfThrottleTimer": {
          "type": "object",
          "$ref": "#/definitions/SpfThrottleTimer",
          "description": "SPF calculation timer values in milliseconds (initial delay ≤ minimum hold time ≤ maximum wait time"
        },
        "type": {
          "type": "string",
          "default": "timers"
        }
      },
      "required": [
        "spfThrottleTimer",
        "lsaThrottleTimer",
        "lsaGroup",
        "retransmission",
        "type",
        "lsaArrival",
        "floodPacing"
      ]
    },
    "VirtualLink": {
      "type": "object",
      "properties": {
        "routerId": {
          "type": "string",
          "description": "The router id of the remote device running OSPF"
        },
        "authentication": {
          "type": "object",
          "$ref": "#/definitions/AuthenticationBase",
          "description": "Represents the authentication configuration. If null, indicates no authentication"
        },
        "helloInterval": {
          "type": "integer",
          "description": "Specifies the time in seconds between the hello packets that are sent on an interface. The value must be the same for all routers and access servers that are attached to a common network. Valid values range from 1 to 8192. The default is 10."
        },
        "deadInterval": {
          "type": "integer",
          "description": "Specifies the time in seconds that hello packets are not seen before a neighbor indicates that the router is down. The default is four times the hello interval, or 40 seconds. Valid values range from 1 to 8192."
        },
        "retransmitInterval": {
          "type": "integer",
          "description": "The time in seconds between LSA retransmissions for adjacencies that belong to the interface. The retransmit interval is the expected round-trip delay between any two routers on the attached network. The value must be greater than the expected round-trip delay, and can range from 1 to 8192. The default is 5."
        },
        "transmitDelay": {
          "type": "integer",
          "description": "Specifies the estimated time in seconds that is required to send a link-state update packet on the interface. The integer value must be greater than zero. LSAs in the update packet have their own ages incremented by this amount before transmission. The range of values can be from 1 to 8192. The default is 1."
        },
        "type": {
          "type": "string",
          "default": "virtuallink"
        }
      },
      "required": [
        "retransmitInterval",
        "deadInterval",
        "routerId",
        "helloInterval",
        "type",
        "transmitDelay"
      ]
    },
    "IPV4PrefixListFilter": {
      "type": "object",
      "properties": {
        "filterDirection": {
          "type": "object",
          "$ref": "#/definitions/FilterDirection",
          "description": "Applies prefix list to either incoming or outgoing routes. FilterDirection.IN applies prefix list to incoming advertisements from that neighbor. FilterDirection.OUT applies prefix list to outgoing advertisements from that neighbor."
        },
        "prefixList": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type {@link IPV4PrefixList} that specifies the IPV4 PrefixList"
        },
        "type": {
          "type": "string",
          "default": "ipv4prefixlistfilter"
        }
      },
      "required": [
        "prefixList",
        "type",
        "filterDirection"
      ]
    },
    "IPV6PrefixListFilter": {
      "type": "object",
      "properties": {
        "filterDirection": {
          "type": "object",
          "$ref": "#/definitions/FilterDirection",
          "description": "Applies prefix list to either incoming or outgoing routes. FilterDirection.IN applies prefix list to incoming advertisements from that neighbor. FilterDirection.OUT applies prefix list to outgoing advertisements from that neighbor."
        },
        "prefixList": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "An instance of type {@link IPV6PrefixList} that specifies the IPV6 PrefixList"
        },
        "type": {
          "type": "string",
          "default": "ipv6prefixlistfilter"
        }
      },
      "required": [
        "prefixList",
        "type",
        "filterDirection"
      ]
    },
    "RedistributeBGP": {
      "type": "object",
      "properties": {
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the routes redistributed into OSPF. Ranges from 0 to 4294967295"
        },
        "subnets": {
          "type": "boolean",
          "description": "If true, considers subnets for redistribution into OSPF. Default is false."
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of the metrics to use while redistributing routes"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "A route map object that specifies the routing process that generates the default route if the route map is satisfied"
        },
        "asNumber": {
          "type": "string",
          "description": "The AS number of the BGP routing process"
        },
        "type": {
          "type": "string",
          "default": "redistributebgp"
        }
      },
      "required": [
        "asNumber",
        "type"
      ]
    },
    "RedistributeConnected": {
      "type": "object",
      "properties": {
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the routes redistributed into OSPF. Ranges from 0 to 4294967295"
        },
        "subnets": {
          "type": "boolean",
          "description": "If true, considers subnets for redistribution into OSPF. Default is false."
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of the metrics to use while redistributing routes"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "A route map object that specifies the routing process that generates the default route if the route map is satisfied"
        },
        "type": {
          "type": "string",
          "default": "redistributeconnected"
        }
      },
      "required": [
        "type"
      ]
    },
    "RedistributeEIGRP": {
      "type": "object",
      "properties": {
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the routes redistributed into OSPF. Ranges from 0 to 4294967295"
        },
        "subnets": {
          "type": "boolean",
          "description": "If true, considers subnets for redistribution into OSPF. Default is false."
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of the metrics to use while redistributing routes"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "A route map object that specifies the routing process that generates the default route if the route map is satisfied"
        },
        "asNumber": {
          "type": "string",
          "description": "The AS number of the EIGRP routing process"
        },
        "type": {
          "type": "string",
          "default": "redistributeeigrp"
        }
      },
      "required": [
        "asNumber",
        "type"
      ]
    },
    "RedistributeISIS": {
      "type": "object",
      "properties": {
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the routes redistributed into OSPF. Ranges from 0 to 4294967295"
        },
        "subnets": {
          "type": "boolean",
          "description": "If true, considers subnets for redistribution into OSPF. Default is false."
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of the metrics to use while redistributing routes"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "A route map object that specifies the routing process that generates the default route if the route map is satisfied"
        },
        "routeLevel": {
          "type": "object",
          "$ref": "#/definitions/RouteLevel",
          "description": "The routing level for the IS-IS routing process. LEVEL_1 indicates intra-area routing, LEVEL_2 indicates inter-area routing, and LEVEL_1_2 indicates both levels. Default is LEVEL_2"
        },
        "type": {
          "type": "string",
          "default": "redistributeisis"
        }
      },
      "required": [
        "type",
        "routeLevel"
      ]
    },
    "RedistributeISISIPv6": {
      "type": "object",
      "properties": {
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the routes redistributed into OSPF. Ranges from 0 to 4294967295"
        },
        "subnets": {
          "type": "boolean",
          "description": "If true, considers subnets for redistribution into OSPF. Default is false."
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of the metrics to use while redistributing routes"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "A route map object that specifies the routing process that generates the default route if the route map is satisfied"
        },
        "routeLevel": {
          "type": "object",
          "$ref": "#/definitions/RouteLevel",
          "description": "The routing level for the IS-IS routing process. LEVEL_1 indicates intra-area routing, LEVEL_2 indicates inter-area routing, and LEVEL_1_2 indicates both levels. Default is LEVEL_2"
        },
        "includeConnected": {
          "type": "boolean",
          "description": "If true, includes all ISIS enabled IPv6 connected interfaces to be redistributed into this process"
        },
        "type": {
          "type": "string",
          "default": "redistributeisisipv6"
        }
      },
      "required": [
        "includeConnected",
        "type",
        "routeLevel"
      ]
    },
    "RedistributeOSPF": {
      "type": "object",
      "properties": {
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the routes redistributed into OSPF. Ranges from 0 to 4294967295"
        },
        "subnets": {
          "type": "boolean",
          "description": "If true, considers subnets for redistribution into OSPF. Default is false."
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of the metrics to use while redistributing routes"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "A route map object that specifies the routing process that generates the default route if the route map is satisfied"
        },
        "processId": {
          "type": "string",
          "description": "The process id of the OSPF process"
        },
        "matchExternal1": {
          "type": "boolean",
          "description": "If true, redistributes external type 1 routes"
        },
        "matchExternal2": {
          "type": "boolean",
          "description": "If true, redistributes external type 2 routes"
        },
        "matchInternal": {
          "type": "boolean",
          "description": "If true, redistributes OSPF internal routes"
        },
        "matchNssaExternal1": {
          "type": "boolean",
          "description": "If true, redistributes nssa-external type 1 routes"
        },
        "matchNssaExternal2": {
          "type": "boolean",
          "description": "If true, redistributes nssa-external type 2 routes"
        },
        "type": {
          "type": "string",
          "default": "redistributeospf"
        }
      },
      "required": [
        "processId",
        "matchInternal",
        "matchNssaExternal2",
        "matchNssaExternal1",
        "type",
        "matchExternal2",
        "matchExternal1"
      ]
    },
    "RedistributeOSPFv3": {
      "type": "object",
      "properties": {
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the routes redistributed into OSPF. Ranges from 0 to 4294967295"
        },
        "subnets": {
          "type": "boolean",
          "description": "If true, considers subnets for redistribution into OSPF. Default is false."
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of the metrics to use while redistributing routes"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "A route map object that specifies the routing process that generates the default route if the route map is satisfied"
        },
        "processId": {
          "type": "string",
          "description": "The process id of the OSPF process"
        },
        "matchExternal1": {
          "type": "boolean",
          "description": "If true, redistributes external type 1 routes"
        },
        "matchExternal2": {
          "type": "boolean",
          "description": "If true, redistributes external type 2 routes"
        },
        "matchInternal": {
          "type": "boolean",
          "description": "If true, redistributes OSPF internal routes"
        },
        "matchNssaExternal1": {
          "type": "boolean",
          "description": "If true, redistributes nssa-external type 1 routes"
        },
        "matchNssaExternal2": {
          "type": "boolean",
          "description": "If true, redistributes nssa-external type 2 routes"
        },
        "includeConnected": {
          "type": "boolean",
          "description": "If true, includes all OSPFv3 enabled IPv6 connected interfaces to be redistributed into this process"
        },
        "type": {
          "type": "string",
          "default": "redistributeospfv3"
        }
      },
      "required": [
        "includeConnected",
        "processId",
        "matchInternal",
        "matchNssaExternal2",
        "matchNssaExternal1",
        "type",
        "matchExternal2",
        "matchExternal1"
      ]
    },
    "RedistributeRIP": {
      "type": "object",
      "properties": {
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the routes redistributed into OSPF. Ranges from 0 to 4294967295"
        },
        "subnets": {
          "type": "boolean",
          "description": "If true, considers subnets for redistribution into OSPF. Default is false."
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of the metrics to use while redistributing routes"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "A route map object that specifies the routing process that generates the default route if the route map is satisfied"
        },
        "type": {
          "type": "string",
          "default": "redistributerip"
        }
      },
      "required": [
        "type"
      ]
    },
    "RedistributeStatic": {
      "type": "object",
      "properties": {
        "tagNumber": {
          "type": "integer",
          "description": "A number to tag the routes redistributed into OSPF. Ranges from 0 to 4294967295"
        },
        "subnets": {
          "type": "boolean",
          "description": "If true, considers subnets for redistribution into OSPF. Default is false."
        },
        "routeMetric": {
          "type": "object",
          "$ref": "#/definitions/RouteMetric",
          "description": "Represents the configuration of the metrics to use while redistributing routes"
        },
        "routeMap": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel",
          "description": "A route map object that specifies the routing process that generates the default route if the route map is satisfied"
        },
        "type": {
          "type": "string",
          "default": "redistributestatic"
        }
      },
      "required": [
        "type"
      ]
    },
    "BlacklistAction": {
      "type": "string",
      "enum": [
        "BLOCK",
        "MONITOR"
      ]
    },
    "FeedUpdateFrequency": {
      "type": "string",
      "enum": [
        "DISABLED",
        "THIRTY_MINS",
        "ONE_HOUR",
        "TWO_HOURS",
        "FOUR_HOURS",
        "SIX_HOURS",
        "EIGHT_HOURS",
        "TWELVE_HOURS",
        "ONE_DAY",
        "TWO_DAYS",
        "ONE_WEEK"
      ]
    },
    "NetworkFeed": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string"
        },
        "updateFrequency": {
          "type": "object",
          "$ref": "#/definitions/FeedUpdateFrequency"
        },
        "feedURL": {
          "type": "string"
        },
        "checksumURL": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "networkfeed"
        }
      },
      "required": [
        "feedURL",
        "type"
      ]
    },
    "NetworkFeedCategory": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "networkfeedcategory"
        }
      },
      "required": [
        "type"
      ]
    },
    "NetworkFeedCategoryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/NetworkFeedCategory"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SecurityIntelligenceNetworkPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "whitelist": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "blacklistForBlock": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "securityintelligencenetworkpolicy"
        }
      },
      "required": [
        "type"
      ]
    },
    "SecurityIntelligenceNetworkPolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SecurityIntelligenceNetworkPolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SecurityIntelligencePolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "securityIntelligenceNetworkPolicy": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "securityIntelligenceURLPolicy": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "logEnabled": {
          "type": "boolean"
        },
        "syslogServer": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "securityintelligencepolicy"
        }
      },
      "required": [
        "securityIntelligenceNetworkPolicy",
        "securityIntelligenceURLPolicy",
        "type"
      ]
    },
    "SecurityIntelligencePolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SecurityIntelligencePolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SecurityIntelligenceURLPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "whitelist": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "blacklistForBlock": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "securityintelligenceurlpolicy"
        }
      },
      "required": [
        "type"
      ]
    },
    "SecurityIntelligenceURLPolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SecurityIntelligenceURLPolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SystemFeedObject": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string"
        },
        "updateFrequency": {
          "type": "object",
          "$ref": "#/definitions/FeedUpdateFrequency"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "systemfeedobject"
        }
      },
      "required": [
        "type"
      ]
    },
    "SystemFeedObjectWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SystemFeedObject"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "URLFeed": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string"
        },
        "updateFrequency": {
          "type": "object",
          "$ref": "#/definitions/FeedUpdateFrequency"
        },
        "feedURL": {
          "type": "string"
        },
        "checksumURL": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "urlfeed"
        }
      },
      "required": [
        "feedURL",
        "type"
      ]
    },
    "URLFeedCategory": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "urlfeedcategory"
        }
      },
      "required": [
        "type"
      ]
    },
    "URLFeedCategoryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/URLFeedCategory"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AuthorizationStatus": {
      "type": "string",
      "enum": [
        "AUTHORIZED",
        "AUTH_EXPIRED",
        "EVAL",
        "NOT_AUTHORIZED",
        "OUT_OF_COMPLIANCE",
        "RENEW_AUTH_FAILED",
        "UNREGISTERED"
      ]
    },
    "ConnectionType": {
      "type": "string",
      "enum": [
        "REGISTER",
        "EVALUATION"
      ]
    },
    "FeatureType": {
      "type": "string",
      "enum": [
        "BASE",
        "MALWARE",
        "THREAT",
        "URLFILTERING",
        "RAVPN"
      ]
    },
    "License": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        },
        "compliant": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "licenseType": {
          "type": "object",
          "$ref": "#/definitions/LicenseType"
        },
        "type": {
          "type": "string",
          "default": "license"
        }
      },
      "required": [
        "licenseType",
        "count",
        "type"
      ]
    },
    "LicenseWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/License"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "LicenseJobHistory": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "licensejobhistory"
        }
      },
      "required": [
        "type"
      ]
    },
    "LicenseJobHistoryWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/LicenseJobHistory"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "LicenseRegistrationJobHistory": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/JobHistoryEntity$JobHistoryStatus"
        },
        "statusMessage": {
          "type": "string"
        },
        "scheduleUuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "licenseregistrationjobhistory"
        }
      },
      "required": [
        "type"
      ]
    },
    "LicenseType": {
      "type": "string",
      "enum": [
        "BASE",
        "MALWARE",
        "THREAT",
        "URLFILTERING",
        "APEX",
        "PLUS",
        "VPNOnly"
      ]
    },
    "RegistrationStatus": {
      "type": "string",
      "enum": [
        "EVAL",
        "REGISTERED",
        "RENEW_CERT_FAILED",
        "UNREGISTERED"
      ]
    },
    "SmartAgentConnection": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "connectionType": {
          "type": "object",
          "$ref": "#/definitions/ConnectionType"
        },
        "token": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "smartagentconnection"
        }
      },
      "required": [
        "type",
        "connectionType"
      ]
    },
    "SmartAgentConnectionWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SmartAgentConnection"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SmartAgentStatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "registrationStatus": {
          "type": "object",
          "$ref": "#/definitions/RegistrationStatus"
        },
        "registrationTimeStamp": {
          "type": "integer"
        },
        "authorizationStatus": {
          "type": "object",
          "$ref": "#/definitions/AuthorizationStatus"
        },
        "authorizationTimeStamp": {
          "type": "integer"
        },
        "virtualAccount": {
          "type": "string"
        },
        "exportControl": {
          "type": "boolean"
        },
        "evaluationStartTime": {
          "type": "integer"
        },
        "evaluationRemainingDays": {
          "type": "integer"
        },
        "syncTimeStamp": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "smartagentstatus"
        }
      },
      "required": [
        "type"
      ]
    },
    "SmartAgentStatusWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SmartAgentStatus"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SmartAgentSyncRequest": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "sync": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "smartagentsyncrequest"
        }
      },
      "required": [
        "type",
        "sync"
      ]
    },
    "SmartAgentSyncRequestWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SmartAgentSyncRequest"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "FlowBit": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "flowbit"
        }
      },
      "required": [
        "type"
      ]
    },
    "FlowBitState": {
      "type": "string",
      "enum": [
        "SET",
        "SETX",
        "UNSET",
        "IS_SET",
        "IS_NOT_SET"
      ]
    },
    "IPSVariableNetworkGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ipsvariablenetworkgroup"
        },
        "includedNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "excludedNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "IPSVariablePortGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ipsvariableportgroup"
        },
        "includedPorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "excludedPorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "IPSVariableType": {
      "type": "string",
      "enum": [
        "PORT_GROUP",
        "NETWORK_GROUP"
      ]
    },
    "IntrusionPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rules": {
          "type": "object",
          "$ref": "#/definitions/LinksReference"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "intrusionpolicy"
        }
      },
      "required": [
        "type"
      ]
    },
    "IntrusionPolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IntrusionPolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IntrusionPolicyRuleUpdate": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ruleConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "intrusionpolicyruleupdate"
        }
      },
      "required": [
        "type"
      ]
    },
    "IntrusionPolicyRuleUpdateWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IntrusionPolicyRuleUpdate"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IntrusionRule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "gid": {
          "type": "integer"
        },
        "sid": {
          "type": "integer"
        },
        "revision": {
          "type": "integer"
        },
        "msg": {
          "type": "string"
        },
        "ruleData": {
          "type": "string"
        },
        "defaultState": {
          "type": "object",
          "$ref": "#/definitions/IntrusionRuleState"
        },
        "overrideState": {
          "type": "object",
          "$ref": "#/definitions/IntrusionRuleState"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "intrusionrule"
        }
      },
      "required": [
        "type"
      ]
    },
    "IntrusionRuleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IntrusionRule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IntrusionRuleConfig": {
      "type": "object",
      "properties": {
        "state": {
          "type": "object",
          "$ref": "#/definitions/IntrusionRuleState"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "IntrusionRuleState": {
      "type": "string",
      "enum": [
        "DISABLED",
        "ALERT",
        "DROP"
      ]
    },
    "IntrusionSettings": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "syslogServer": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "intrusionsettings"
        }
      },
      "required": [
        "type"
      ]
    },
    "IntrusionSettingsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IntrusionSettings"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SRUIntrusionPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "advancedConfig": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "sruintrusionpolicy"
        }
      },
      "required": [
        "type"
      ]
    },
    "FlowBitRuleRelation": {
      "type": "object",
      "properties": {
        "objId": {
          "type": "integer"
        },
        "flowBit": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "rule": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "state": {
          "type": "object",
          "$ref": "#/definitions/FlowBitState"
        }
      }
    },
    "IntrusionRuleRelation": {
      "type": "object",
      "properties": {
        "objId": {
          "type": "integer"
        },
        "ipsPolicy": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "rule": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "ruleState": {
          "type": "object",
          "$ref": "#/definitions/IntrusionRuleState"
        }
      }
    },
    "CertificateStatus": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "object",
          "$ref": "#/definitions/CertificateStatus$CertificateStatusChoice"
        },
        "isSelfSigned": {
          "type": "object",
          "$ref": "#/definitions/CertificateStatus$CertificateStatusChoice"
        },
        "type": {
          "type": "string",
          "default": "certificatestatus"
        }
      },
      "required": [
        "isValid",
        "type",
        "isSelfSigned"
      ]
    },
    "CertificateStatus$CertificateStatusChoice": {
      "type": "string",
      "enum": [
        "YES",
        "NO",
        "ANY"
      ]
    },
    "DistinguishedName": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "dn": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "distinguishedname"
        }
      },
      "required": [
        "dn",
        "type"
      ]
    },
    "DistinguishedNameGroup": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "distiniguishedNames": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "distinguishednamegroup"
        }
      },
      "required": [
        "type"
      ]
    },
    "SSLPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "undecryptableActions": {
          "type": "object",
          "$ref": "#/definitions/SSLUndecryptableActions"
        },
        "decryptionCACertificate": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "internalCertificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "defaultAction": {
          "type": "object",
          "$ref": "#/definitions/SSLPolicyDefaultAction"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "sslpolicy"
        }
      },
      "required": [
        "defaultAction",
        "undecryptableActions",
        "type"
      ]
    },
    "SSLPolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SSLPolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SSLPolicyDefaultAction": {
      "type": "object",
      "properties": {
        "policyAction": {
          "type": "object",
          "$ref": "#/definitions/SSLRule$SSLRuleAction"
        },
        "eventLogAction": {
          "type": "object",
          "$ref": "#/definitions/SSLRule$EventLogActionSSL"
        },
        "syslogServer": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "type": {
          "type": "string",
          "default": "sslpolicydefaultaction"
        }
      },
      "required": [
        "policyAction",
        "eventLogAction",
        "type"
      ]
    },
    "SSLRule": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ruleId": {
          "type": "integer"
        },
        "sourceZones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationZones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "sourceNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "sourcePorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "destinationPorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ruleAction": {
          "type": "object",
          "$ref": "#/definitions/SSLRule$SSLRuleAction"
        },
        "eventLogAction": {
          "type": "object",
          "$ref": "#/definitions/SSLRule$EventLogActionSSL"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "embeddedAppFilter": {
          "type": "object",
          "$ref": "#/definitions/EmbeddedAppFilterBase"
        },
        "urlCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/URLCategoryMatcher"
          }
        },
        "subjectDNs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "issuerDNs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "certificateStatus": {
          "type": "object",
          "$ref": "#/definitions/CertificateStatus"
        },
        "syslogServer": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "sslv3": {
          "type": "boolean"
        },
        "tls10": {
          "type": "boolean"
        },
        "tls11": {
          "type": "boolean"
        },
        "tls12": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "sslrule"
        }
      },
      "required": [
        "certificateStatus",
        "sslv3",
        "tls12",
        "type",
        "tls11",
        "tls10"
      ]
    },
    "SSLRuleWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SSLRule"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SSLRule$SSLRuleAction": {
      "type": "string",
      "enum": [
        "DECRYPT_RE_SIGN",
        "DECRYPT_KNOWN_KEY",
        "DO_NOT_DECRYPT",
        "BLOCK"
      ]
    },
    "SSLRule$EventLogActionSSL": {
      "type": "string",
      "enum": [
        "LOG_FLOW_END",
        "LOG_NONE"
      ]
    },
    "SSLUndecryptableActions": {
      "type": "object",
      "properties": {
        "compressedSession": {
          "type": "object",
          "$ref": "#/definitions/SSLUndecryptableActions$UndecryptableActionChoice"
        },
        "sslV2Session": {
          "type": "object",
          "$ref": "#/definitions/SSLUndecryptableActions$UndecryptableActionChoice"
        },
        "unknownCipherSuite": {
          "type": "object",
          "$ref": "#/definitions/SSLUndecryptableActions$UndecryptableActionChoice"
        },
        "unsupportedCipherSuite": {
          "type": "object",
          "$ref": "#/definitions/SSLUndecryptableActions$UndecryptableActionChoice"
        },
        "sessionNotCached": {
          "type": "object",
          "$ref": "#/definitions/SSLUndecryptableActions$UndecryptableActionChoice"
        },
        "handShakeErrors": {
          "type": "object",
          "$ref": "#/definitions/SSLUndecryptableActions$UndecryptableActionChoice"
        },
        "decryptionErrors": {
          "type": "object",
          "$ref": "#/definitions/SSLUndecryptableActions$DecryptionErrorsChoice"
        },
        "type": {
          "type": "string",
          "default": "sslundecryptableactions"
        }
      },
      "required": [
        "handShakeErrors",
        "decryptionErrors",
        "sslV2Session",
        "unknownCipherSuite",
        "compressedSession",
        "unsupportedCipherSuite",
        "sessionNotCached",
        "type"
      ]
    },
    "SSLUndecryptableActions$UndecryptableActionChoice": {
      "type": "string",
      "enum": [
        "INHERIT_DEFAULT_ACTION",
        "DO_NOT_DECRYPT",
        "BLOCK",
        "BLOCK_WITH_RESET"
      ]
    },
    "SSLUndecryptableActions$DecryptionErrorsChoice": {
      "type": "string",
      "enum": [
        "BLOCK",
        "BLOCK_WITH_RESET"
      ]
    },
    "TrafficInterruptionCause": {
      "type": "string",
      "enum": [
        "SSL_ENABLED",
        "SSL_DISABLED",
        "MTU_CHANGED",
        "VDB_UPDATE"
      ]
    },
    "TrafficInterruptionReasons": {
      "type": "object",
      "properties": {
        "reasons": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/TrafficInterruptionCause"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "TrafficInterruptionReasons"
        }
      },
      "required": [
        "type"
      ]
    },
    "TrafficInterruptionReasonsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/TrafficInterruptionReasons"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "ConnectTest": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string"
        },
        "connected": {
          "type": "boolean"
        },
        "msg": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "ConnectTest"
        }
      },
      "required": [
        "destination",
        "type"
      ]
    },
    "ConnectTestWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectTest"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "FileChunkContent": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string"
        },
        "chunkIndex": {
          "type": "integer"
        },
        "chunkContent": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "FileChunkContent"
        }
      },
      "required": [
        "type"
      ]
    },
    "FileChunksInfo": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string"
        },
        "numberOfChunks": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "FileChunksInfo"
        }
      },
      "required": [
        "type"
      ]
    },
    "UserUtils": {
      "type": "object"
    },
    "AnyConnectClientProfile": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "diskFileName": {
          "type": "string"
        },
        "md5Checksum": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "anyconnectclientprofile"
        }
      },
      "required": [
        "type"
      ]
    },
    "AnyConnectClientProfileWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AnyConnectClientProfile"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AnyConnectGroupPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "banner": {
          "type": "string"
        },
        "maxConnectionTimeout": {
          "type": "integer"
        },
        "idleTimeout": {
          "type": "integer"
        },
        "clientProfiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "browserProxyType": {
          "type": "object",
          "$ref": "#/definitions/AnyConnectGroupPolicy$BrowserProxyType"
        },
        "proxyServer": {
          "type": "string"
        },
        "proxyPort": {
          "type": "integer"
        },
        "proxyExceptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ServerHostAndPort"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "anyconnectgrouppolicy"
        }
      },
      "required": [
        "type",
        "browserProxyType"
      ]
    },
    "AnyConnectGroupPolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AnyConnectGroupPolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AnyConnectGroupPolicy$BrowserProxyType": {
      "type": "string",
      "enum": [
        "NO_PROXY",
        "NO_MODIFY",
        "AUTO_DETECT",
        "USE_SERVER"
      ]
    },
    "AnyConnectPackageFile": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "diskFileName": {
          "type": "string"
        },
        "md5Checksum": {
          "type": "string"
        },
        "platformType": {
          "type": "object",
          "$ref": "#/definitions/AnyConnectPackageFile$PackagePlatformType"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "anyconnectpackagefile"
        }
      },
      "required": [
        "platformType",
        "type"
      ]
    },
    "AnyConnectPackageFileWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AnyConnectPackageFile"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AnyConnectPackageFile$PackagePlatformType": {
      "type": "string",
      "enum": [
        "LINUX",
        "MACOS",
        "WINDOWS"
      ]
    },
    "AnyConnectPackages": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packageFiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "anyconnectpackages"
        }
      },
      "required": [
        "type"
      ]
    },
    "AnyConnectPackagesWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AnyConnectPackages"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AnyConnectProfile": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "groupPolicy": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "authenticationIdentitySource": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "fallbackLocalIdentitySource": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "authMethod": {
          "type": "object",
          "$ref": "#/definitions/AnyConnectProfile$ClientAuthMethod"
        },
        "serverCertificate": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "clientCACertificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "usernameFromCertificate": {
          "type": "object",
          "$ref": "#/definitions/AnyConnectProfile$UsernameFromCertificate"
        },
        "usernamePrimaryField": {
          "type": "object",
          "$ref": "#/definitions/AnyConnectProfile$CertificateField"
        },
        "usernameSecondaryField": {
          "type": "object",
          "$ref": "#/definitions/AnyConnectProfile$CertificateField"
        },
        "prefillUsernameFromCertificate": {
          "type": "boolean"
        },
        "disablePrefilledUsernameEdit": {
          "type": "boolean"
        },
        "stripGroupFromUsername": {
          "type": "boolean"
        },
        "stripRealmFromUsername": {
          "type": "boolean"
        },
        "outsideInterface": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "outsideFqdn": {
          "type": "string"
        },
        "ipv4LocalAddressPool": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "ipv6LocalAddressPool": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "dnsServers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domainName": {
          "type": "string"
        },
        "exemptNatRule": {
          "type": "boolean"
        },
        "splitTunnel": {
          "type": "boolean"
        },
        "insideInterfaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "insideNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "anyconnectprofile"
        }
      },
      "required": [
        "outsideInterface",
        "splitTunnel",
        "serverCertificate",
        "exemptNatRule",
        "authMethod",
        "type"
      ]
    },
    "AnyConnectProfileWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AnyConnectProfile"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "AnyConnectProfile$CertificateField": {
      "type": "string",
      "enum": [
        "NONE",
        "C_COUNTRY",
        "CN_COMMMON_NAME",
        "DNQ_DN_QUALIFIER",
        "EA_EMAIL_ADDRESS",
        "GENQ_GENERATIONAL_QUALIFIER",
        "GN_GIVEN_NAME",
        "I_INITIAL",
        "L_LOCALITY",
        "N_NAME",
        "O_ORGANISATION",
        "OU_ORGANISATIONAL_UNIT",
        "SER_SERIAL_NUMBER",
        "SN_SURNAME",
        "SP_STATE_PROVINCE",
        "T_TITLE",
        "UID_USER_ID",
        "UPN_USER_PRINCIPAL_NAME"
      ]
    },
    "AnyConnectProfile$UsernameFromCertificate": {
      "type": "string",
      "enum": [
        "ENTIRE_DN",
        "SPECIFIED_FIELD"
      ]
    },
    "AnyConnectProfile$ClientAuthMethod": {
      "type": "string",
      "enum": [
        "AAA",
        "CLIENT_CERTIFICATE",
        "AAA_AND_CLIENT_CERTIFICATE"
      ]
    },
    "AnyConnectVpnConnection": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "connectionProfile": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "groupPolicy": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "clientPackages": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "anyconnectvpnconnection"
        }
      },
      "required": [
        "type"
      ]
    },
    "AnyConnectVpnConnectionWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/AnyConnectVpnConnection"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IkePolicyBase$CliTokenIf": {
      "type": "object",
      "properties": {
        "cliToken": {
          "type": "string"
        }
      }
    },
    "IkevOnePolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "lifeTime": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "authenticationType": {
          "type": "object",
          "$ref": "#/definitions/IkevOnePolicy$AuthenticationType"
        },
        "encryptionType": {
          "type": "object",
          "$ref": "#/definitions/IkevOnePolicy$IkevOneEncryptionType"
        },
        "hashType": {
          "type": "object",
          "$ref": "#/definitions/IkevOnePolicy$HashType"
        },
        "groupType": {
          "type": "object",
          "$ref": "#/definitions/IkevOnePolicy$IkevOneGroupType"
        },
        "summaryLabel": {
          "type": "string"
        },
        "cryptoRestricted": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "default": "ikevonepolicy"
        }
      },
      "required": [
        "groupType",
        "encryptionType",
        "authenticationType",
        "priority",
        "type",
        "hashType",
        "enabled"
      ]
    },
    "IkevOnePolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IkevOnePolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IkevOnePolicy$IkevOneGroupType": {
      "type": "string",
      "enum": [
        "GROUP1",
        "GROUP2",
        "GROUP5"
      ]
    },
    "IkevOnePolicy$HashType": {
      "type": "string",
      "enum": [
        "SHA",
        "MD5"
      ]
    },
    "IkevOnePolicy$IkevOneEncryptionType": {
      "type": "string",
      "enum": [
        "AES",
        "AES192",
        "AES256",
        "DES",
        "THREE_DES"
      ]
    },
    "IkevOnePolicy$AuthenticationType": {
      "type": "string",
      "enum": [
        "RSA_SIG",
        "PRE_SHARE"
      ]
    },
    "IkevOneProposal": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "encryptionMethod": {
          "type": "object",
          "$ref": "#/definitions/IkevOneProposal$EncryptionMethodType"
        },
        "authenticationMethod": {
          "type": "object",
          "$ref": "#/definitions/IkevOneProposal$AuthenticationMethodType"
        },
        "mode": {
          "type": "object",
          "$ref": "#/definitions/IkevOneProposal$ModeType"
        },
        "summaryLabel": {
          "type": "string"
        },
        "cryptoRestricted": {
          "type": "boolean"
        },
        "defaultAssignable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "default": "ikevoneproposal"
        }
      },
      "required": [
        "mode",
        "authenticationMethod",
        "type",
        "encryptionMethod"
      ]
    },
    "IkevOneProposalWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IkevOneProposal"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IkevOneProposal$ModeType": {
      "type": "string",
      "enum": [
        "TRANSPORT",
        "TUNNEL"
      ]
    },
    "IkevOneProposal$AuthenticationMethodType": {
      "type": "string",
      "enum": [
        "ESP_MD5_HMAC",
        "ESP_NONE",
        "ESP_SHA_HMAC"
      ]
    },
    "IkevOneProposal$EncryptionMethodType": {
      "type": "string",
      "enum": [
        "ESP_3DES",
        "ESP_AES",
        "ESP_AES192",
        "ESP_AES256",
        "ESP_DES",
        "ESP_NULL"
      ]
    },
    "IkevTwoPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "lifeTime": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "encryptionTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IkevTwoPolicy$IkevTwoEncryptionType"
          }
        },
        "groupTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IkevTwoPolicy$IkevTwoGroupType"
          }
        },
        "integrityTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IkevTwoPolicy$IntegrityType"
          }
        },
        "prfTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IkevTwoPolicy$PrfType"
          }
        },
        "summaryLabel": {
          "type": "string"
        },
        "cryptoRestricted": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "default": "ikevtwopolicy"
        }
      },
      "required": [
        "priority",
        "type",
        "enabled"
      ]
    },
    "IkevTwoPolicyWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IkevTwoPolicy"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IkevTwoPolicy$PrfType": {
      "type": "string",
      "enum": [
        "SHA",
        "MD5",
        "SHA256",
        "SHA384",
        "SHA512"
      ]
    },
    "IkevTwoPolicy$IkevTwoGroupType": {
      "type": "string",
      "enum": [
        "GROUP1",
        "GROUP2",
        "GROUP5",
        "GROUP14",
        "GROUP19",
        "GROUP20",
        "GROUP21",
        "GROUP24"
      ]
    },
    "IkevTwoPolicy$IntegrityType": {
      "type": "string",
      "enum": [
        "SHA",
        "SHA256",
        "SHA384",
        "SHA512",
        "MD5",
        "NULL"
      ]
    },
    "IkevTwoPolicy$IkevTwoEncryptionType": {
      "type": "string",
      "enum": [
        "AES",
        "AES192",
        "AES256",
        "DES",
        "THREE_DES",
        "AES_GCM",
        "AES_GCM192",
        "AES_GCM256",
        "NULL"
      ]
    },
    "IkevTwoProposal": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "encryptionTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IkevTwoProposal$IkevTwoProposalEncryptType"
          }
        },
        "integrityTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IkevTwoProposal$IkevTwoProposalIntegrityType"
          }
        },
        "summaryLabel": {
          "type": "string"
        },
        "cryptoRestricted": {
          "type": "boolean"
        },
        "defaultAssignable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystemDefined": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "default": "ikevtwoproposal"
        }
      },
      "required": [
        "type"
      ]
    },
    "IkevTwoProposalWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/IkevTwoProposal"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "IkevTwoProposal$IkevTwoProposalIntegrityType": {
      "type": "string",
      "enum": [
        "MD5",
        "SHA1",
        "SHA256",
        "SHA384",
        "SHA512",
        "NULL"
      ]
    },
    "IkevTwoProposal$IkevTwoProposalEncryptType": {
      "type": "string",
      "enum": [
        "THREE_DES",
        "AES",
        "AES192",
        "AES256",
        "AES_GCM",
        "AES_GCM192",
        "AES_GCM256",
        "AES_GMAC",
        "AES_GMAC192",
        "AES_GMAC256",
        "DES",
        "NULL"
      ]
    },
    "SToSConnectionProfile": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "outsideInterfaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "localNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "remotePeerIpAddress": {
          "type": "string"
        },
        "remoteNetworks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ikev1Enabled": {
          "type": "boolean"
        },
        "ikev2Enabled": {
          "type": "boolean"
        },
        "ikev1PreSharedKey": {
          "type": "string"
        },
        "diffieHellmanGroup": {
          "type": "object",
          "$ref": "#/definitions/SToSConnectionProfile$PerfectForwardSecrecyGroupType"
        },
        "ikev2LocalPreSharedKey": {
          "type": "string"
        },
        "ikev2RemotePeerPreSharedKey": {
          "type": "string"
        },
        "ikev1Proposals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "ikev2Proposals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReferenceModel"
          }
        },
        "interfaceForNatExempt": {
          "type": "object",
          "$ref": "#/definitions/ReferenceModel"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "stosconnectionprofile"
        }
      },
      "required": [
        "outsideInterfaces",
        "ikev1Enabled",
        "ikev2Enabled",
        "type",
        "remotePeerIpAddress"
      ]
    },
    "SToSConnectionProfileWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/SToSConnectionProfile"
        },
        {
          "$ref": "#/definitions/LinksWrapper"
        }
      ]
    },
    "SToSConnectionProfile$PerfectForwardSecrecyGroupType": {
      "type": "string",
      "enum": [
        "GROUP1",
        "GROUP2",
        "GROUP5",
        "GROUP14",
        "GROUP19",
        "GROUP20",
        "GROUP21",
        "GROUP24"
      ]
    },
    "ServerHostAndPort": {
      "type": "object",
      "properties": {
        "serverHost": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "default": "serverhostandport"
        }
      },
      "required": [
        "type",
        "serverHost"
      ]
    },
    "NGFWErrorMessage": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      },
      "required": [
        "description"
      ]
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "enum": [
            "General",
            "Validation",
            "Deployment"
          ]
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NGFWErrorMessage"
          }
        },
        "severity": {
          "type": "object",
          "$ref": "#/definitions/ErrorResponse$Severity"
        }
      },
      "required": [
        "key",
        "messages",
        "severity"
      ]
    },
    "ErrorResponse$Severity": {
      "type": "string",
      "enum": [
        "ERROR",
        "WARN"
      ]
    },
    "Paging": {
      "type": "object",
      "properties": {
        "prev": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "next": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "count": {
          "type": "integer"
        },
        "pages": {
          "type": "integer"
        }
      },
      "required": [
        "prev",
        "next",
        "limit",
        "offset",
        "count",
        "pages"
      ]
    },
    "ErrorWrapper": {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorResponse"
        }
      }
    },
    "LinksWrapper": {
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/Links"
        }
      }
    },
    "TokenPayloadUnion": {
      "type": "object",
      "properties": {
        "grant_type": {
          "type": "string",
          "enum": [
            "custom_token",
            "refresh_token",
            "revoke_token",
            "password"
          ]
        },
        "access_token": {
          "type": "string"
        },
        "desired_expires_in": {
          "type": "integer"
        },
        "desired_refresh_expires_in": {
          "type": "integer"
        },
        "desired_subject": {
          "type": "string"
        },
        "desired_refresh_count": {
          "type": "integer"
        },
        "refresh_token": {
          "type": "string"
        },
        "token_to_revoke": {
          "type": "string"
        },
        "custom_token_id_to_revoke": {
          "type": "string"
        },
        "custom_token_subject_to_revoke": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "grant_type"
      ]
    },
    "TokenStatus": {
      "type": "object",
      "required": [
        "status_code",
        "message"
      ],
      "properties": {
        "status_code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "TokenResponseUnion": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer",
          "default": 1800
        },
        "token_type": {
          "type": "string",
          "default": "Bearer"
        },
        "refresh_token": {
          "type": "string"
        },
        "refresh_expires_in": {
          "type": "integer",
          "default": 2400
        },
        "status_code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ReferenceModel": {
      "type": "object",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AnyConnectVpnConnectionUncompressedModel": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "connectionProfile": {
          "type": "object",
          "$ref": "#/definitions/AnyConnectProfile"
        },
        "groupPolicy": {
          "type": "object",
          "$ref": "#/definitions/AnyConnectGroupPolicy"
        },
        "clientPackages": {
          "type": "object",
          "$ref": "#/definitions/AnyConnectPackages"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "anyconnectvpnconnection"
        }
      },
      "required": [
        "type"
      ]
    },
    "InetAddressBase": {
      "type": "object",
      "properties": {}
    },
    "DeviceLogFilterBase": {
      "type": "object",
      "properties": {}
    },
    "AFAggregateAddress": {
      "type": "object",
      "properties": {}
    },
    "AFBase": {
      "type": "object",
      "properties": {}
    },
    "AFNetworkBase": {
      "type": "object",
      "properties": {}
    },
    "NeighborBase": {
      "type": "object",
      "properties": {}
    },
    "NeighborHops": {
      "type": "object",
      "properties": {}
    },
    "DistributeList": {
      "type": "object",
      "properties": {}
    },
    "OSPFLostNeighborDetectionMechanism": {
      "type": "object",
      "properties": {}
    },
    "AreaType": {
      "type": "object",
      "properties": {}
    },
    "AuthenticationBase": {
      "type": "object",
      "properties": {}
    },
    "PrefixListFilter": {
      "type": "object",
      "properties": {}
    },
    "RedistributeProtocol": {
      "type": "object",
      "properties": {}
    }
  },
  "tags": [
    {
      "name": "AAASetting"
    },
    {
      "name": "ASPathList"
    },
    {
      "name": "AccessPolicy"
    },
    {
      "name": "AccessRule"
    },
    {
      "name": "ActiveDirectoryRealm"
    },
    {
      "name": "ActiveUserSessions"
    },
    {
      "name": "AnyConnectClientProfile"
    },
    {
      "name": "AnyConnectGroupPolicy"
    },
    {
      "name": "AnyConnectPackageFile"
    },
    {
      "name": "AnyConnectPackages"
    },
    {
      "name": "AnyConnectProfile"
    },
    {
      "name": "AnyConnectVpnConnection"
    },
    {
      "name": "Application"
    },
    {
      "name": "ApplicationCategory"
    },
    {
      "name": "ApplicationFilter"
    },
    {
      "name": "ApplicationTag"
    },
    {
      "name": "ArchivedBackup"
    },
    {
      "name": "AuditEntityChange"
    },
    {
      "name": "AuditEvent"
    },
    {
      "name": "BGP"
    },
    {
      "name": "BackupFile"
    },
    {
      "name": "BackupImmediate"
    },
    {
      "name": "BackupScheduled"
    },
    {
      "name": "BaseEntityDiff"
    },
    {
      "name": "BreakHAStatus"
    },
    {
      "name": "BridgeGroupInterface"
    },
    {
      "name": "CertFileUploadStatus"
    },
    {
      "name": "Certificate"
    },
    {
      "name": "CliDeploymentError"
    },
    {
      "name": "Clipboard"
    },
    {
      "name": "CloudCommunicationSettings"
    },
    {
      "name": "CloudConfig"
    },
    {
      "name": "CloudManagement"
    },
    {
      "name": "CloudServicesInfo"
    },
    {
      "name": "Command"
    },
    {
      "name": "CommandAutoComplete"
    },
    {
      "name": "ConnectTest"
    },
    {
      "name": "Continent"
    },
    {
      "name": "Country"
    },
    {
      "name": "DHCPServerContainer"
    },
    {
      "name": "DNS"
    },
    {
      "name": "DNSServerGroup"
    },
    {
      "name": "DataDNSSettings"
    },
    {
      "name": "DataInterfaceManagementAccess"
    },
    {
      "name": "Deployment"
    },
    {
      "name": "DeploymentData"
    },
    {
      "name": "DeploymentStatus"
    },
    {
      "name": "DeviceDNSSettings"
    },
    {
      "name": "DeviceHostname"
    },
    {
      "name": "DeviceLogSettings"
    },
    {
      "name": "DiskUsage"
    },
    {
      "name": "Download"
    },
    {
      "name": "ExpandedCommunityList"
    },
    {
      "name": "ExportConfigJobHistory"
    },
    {
      "name": "ExtendedAccessList"
    },
    {
      "name": "ExternalCACertificate"
    },
    {
      "name": "ExternalCertificate"
    },
    {
      "name": "FeatureInformation"
    },
    {
      "name": "FilePolicy"
    },
    {
      "name": "FileUploadStatus"
    },
    {
      "name": "FlexConfigObject"
    },
    {
      "name": "FlexConfigPolicy"
    },
    {
      "name": "GeoLocation"
    },
    {
      "name": "GeolocationUpdateImmediate"
    },
    {
      "name": "GeolocationUpdateSchedule"
    },
    {
      "name": "HAAction"
    },
    {
      "name": "HAConfiguration"
    },
    {
      "name": "HAFailoverConfiguration"
    },
    {
      "name": "HAStatus"
    },
    {
      "name": "HTTPAccessList"
    },
    {
      "name": "ICMPv4PortObject"
    },
    {
      "name": "ICMPv6PortObject"
    },
    {
      "name": "IPV4PrefixList"
    },
    {
      "name": "IPV6PrefixList"
    },
    {
      "name": "IdentityPolicy"
    },
    {
      "name": "IdentityRule"
    },
    {
      "name": "IdentityServicesEngine"
    },
    {
      "name": "IkevOnePolicy"
    },
    {
      "name": "IkevOneProposal"
    },
    {
      "name": "IkevTwoPolicy"
    },
    {
      "name": "IkevTwoProposal"
    },
    {
      "name": "InitialProvision"
    },
    {
      "name": "Interface"
    },
    {
      "name": "InterfaceInfo"
    },
    {
      "name": "InternalCACertificate"
    },
    {
      "name": "InternalCertificate"
    },
    {
      "name": "IntrusionPolicy"
    },
    {
      "name": "IntrusionPolicyRuleUpdate"
    },
    {
      "name": "IntrusionRule"
    },
    {
      "name": "IntrusionSettings"
    },
    {
      "name": "Job"
    },
    {
      "name": "JobHistoryBackup"
    },
    {
      "name": "JobHistoryCloudManagement"
    },
    {
      "name": "JobHistoryDeployment"
    },
    {
      "name": "JobHistoryEntity"
    },
    {
      "name": "JobHistoryGeolocation"
    },
    {
      "name": "JobHistoryHaConfigSync"
    },
    {
      "name": "JobHistorySruUpdate"
    },
    {
      "name": "JobHistoryVDBUpdate"
    },
    {
      "name": "JoinHAStatus"
    },
    {
      "name": "License"
    },
    {
      "name": "LicenseJobHistory"
    },
    {
      "name": "LocalIdentitySource"
    },
    {
      "name": "ManagementIP"
    },
    {
      "name": "ManualNatRule"
    },
    {
      "name": "ManualNatRuleContainer"
    },
    {
      "name": "NAT"
    },
    {
      "name": "NTP"
    },
    {
      "name": "NTPStatus"
    },
    {
      "name": "NetworkFeedCategory"
    },
    {
      "name": "NetworkObject"
    },
    {
      "name": "NetworkObjectGroup"
    },
    {
      "name": "OSPF"
    },
    {
      "name": "OSPFInterfaceSettings"
    },
    {
      "name": "ObjectNatRule"
    },
    {
      "name": "ObjectNatRuleContainer"
    },
    {
      "name": "PhysicalInterface"
    },
    {
      "name": "PolicyList"
    },
    {
      "name": "PortObject"
    },
    {
      "name": "PortObjectGroup"
    },
    {
      "name": "PostUpgradeFlags"
    },
    {
      "name": "ProtocolObject"
    },
    {
      "name": "RadiusIdentitySource"
    },
    {
      "name": "RadiusIdentitySourceGroup"
    },
    {
      "name": "RestoreImmediate"
    },
    {
      "name": "RolePermission"
    },
    {
      "name": "RouteMap"
    },
    {
      "name": "SRUUpdateImmediate"
    },
    {
      "name": "SRUUpdateSchedule"
    },
    {
      "name": "SSHAccessList"
    },
    {
      "name": "SSLPolicy"
    },
    {
      "name": "SSLRule"
    },
    {
      "name": "SToSConnectionProfile"
    },
    {
      "name": "ScheduleExportConfig"
    },
    {
      "name": "ScheduleTroubleshoot"
    },
    {
      "name": "Secret"
    },
    {
      "name": "SecurityIntelligence"
    },
    {
      "name": "SecurityIntelligenceNetworkPolicy"
    },
    {
      "name": "SecurityIntelligencePolicy"
    },
    {
      "name": "SecurityIntelligenceURLPolicy"
    },
    {
      "name": "SecurityIntelligenceUpdateFeedsImmediate"
    },
    {
      "name": "SecurityIntelligenceUpdateFeedsSchedule"
    },
    {
      "name": "SecurityZone"
    },
    {
      "name": "SmartAgentConnection"
    },
    {
      "name": "SmartAgentStatus"
    },
    {
      "name": "SmartAgentSyncRequest"
    },
    {
      "name": "SmartLicensing"
    },
    {
      "name": "SpecialRealm"
    },
    {
      "name": "StandardAccessList"
    },
    {
      "name": "StandardCommunityList"
    },
    {
      "name": "StaticRouteEntry"
    },
    {
      "name": "StaticRouteEntryContainer"
    },
    {
      "name": "SubInterface"
    },
    {
      "name": "SyslogServer"
    },
    {
      "name": "SystemFeedObject"
    },
    {
      "name": "SystemInformation"
    },
    {
      "name": "TCPPortObject"
    },
    {
      "name": "Telemetry"
    },
    {
      "name": "TestDirectory"
    },
    {
      "name": "TestIdentityServicesEngineConnectivity"
    },
    {
      "name": "TestIdentitySource"
    },
    {
      "name": "TimeZones"
    },
    {
      "name": "Token"
    },
    {
      "name": "TrafficInterruptionReasons"
    },
    {
      "name": "TrafficUser"
    },
    {
      "name": "TrafficUserGroup"
    },
    {
      "name": "TrendingReport"
    },
    {
      "name": "TroubleshootFile"
    },
    {
      "name": "TroubleshootJobHistory"
    },
    {
      "name": "UDPPortObject"
    },
    {
      "name": "URLCategory"
    },
    {
      "name": "URLFeedCategory"
    },
    {
      "name": "URLObject"
    },
    {
      "name": "URLObjectGroup"
    },
    {
      "name": "URLReputation"
    },
    {
      "name": "UnlockBox"
    },
    {
      "name": "Upgrade"
    },
    {
      "name": "UpgradeFile"
    },
    {
      "name": "Upload"
    },
    {
      "name": "User"
    },
    {
      "name": "VDBUpdateImmediate"
    },
    {
      "name": "VDBUpdateSchedule"
    },
    {
      "name": "WebAnalyticsSetting"
    }
  ],
  "paths": {
    "/operational/systeminfo/{objId}": {
      "get": {
        "tags": [
          "SystemInformation"
        ],
        "operationId": "getSystemInformation",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SystemInformationWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/command": {
      "post": {
        "tags": [
          "Command"
        ],
        "operationId": "addCommand",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CommandWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Command"
            }
          }
        ]
      }
    },
    "/operational/commandautocomplete/{objId}": {
      "get": {
        "tags": [
          "CommandAutoComplete"
        ],
        "operationId": "getCommandAutoComplete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CommandAutoCompleteWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/featureinfo/{objId}": {
      "get": {
        "tags": [
          "FeatureInformation"
        ],
        "operationId": "getFeatureInformation",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FeatureInformationWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/telemetry/{objId}": {
      "get": {
        "tags": [
          "Telemetry"
        ],
        "operationId": "getTelemetry",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TelemetryWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/httpaccesslists": {
      "get": {
        "tags": [
          "HTTPAccessList"
        ],
        "operationId": "getHTTPAccessListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "HTTPAccessListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HTTPAccessListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/httpaccesslists/{objId}": {
      "get": {
        "tags": [
          "HTTPAccessList"
        ],
        "operationId": "getHTTPAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HTTPAccessListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "HTTPAccessList"
        ],
        "operationId": "editHTTPAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HTTPAccessListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HTTPAccessList"
            }
          }
        ]
      }
    },
    "/devicesettings/default/sshaccesslists": {
      "get": {
        "tags": [
          "SSHAccessList"
        ],
        "operationId": "getSSHAccessListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SSHAccessListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SSHAccessListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/sshaccesslists/{objId}": {
      "get": {
        "tags": [
          "SSHAccessList"
        ],
        "operationId": "getSSHAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SSHAccessListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SSHAccessList"
        ],
        "operationId": "editSSHAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SSHAccessListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSHAccessList"
            }
          }
        ]
      }
    },
    "/devicesettings/default/managementaccess": {
      "get": {
        "tags": [
          "DataInterfaceManagementAccess"
        ],
        "operationId": "getDataInterfaceManagementAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "DataInterfaceManagementAccessList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataInterfaceManagementAccessWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "DataInterfaceManagementAccess"
        ],
        "operationId": "addDataInterfaceManagementAccess",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DataInterfaceManagementAccessWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataInterfaceManagementAccess"
            }
          }
        ]
      }
    },
    "/devicesettings/default/managementaccess/{objId}": {
      "get": {
        "tags": [
          "DataInterfaceManagementAccess"
        ],
        "operationId": "getDataInterfaceManagementAccess",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DataInterfaceManagementAccessWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "DataInterfaceManagementAccess"
        ],
        "operationId": "editDataInterfaceManagementAccess",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DataInterfaceManagementAccessWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataInterfaceManagementAccess"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "DataInterfaceManagementAccess"
        ],
        "operationId": "deleteDataInterfaceManagementAccess",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/devicehostnames": {
      "get": {
        "tags": [
          "DeviceHostname"
        ],
        "operationId": "getDeviceHostnameList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "DeviceHostnameList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeviceHostnameWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/devicehostnames/{objId}": {
      "get": {
        "tags": [
          "DeviceHostname"
        ],
        "operationId": "getDeviceHostname",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DeviceHostnameWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "DeviceHostname"
        ],
        "operationId": "editDeviceHostname",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DeviceHostnameWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceHostname"
            }
          }
        ]
      }
    },
    "/devicesettings/default/cloudcommunicationsettings": {
      "get": {
        "tags": [
          "CloudCommunicationSettings"
        ],
        "operationId": "getCloudCommunicationSettingsList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "CloudCommunicationSettingsList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CloudCommunicationSettingsWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/cloudcommunicationsettings/{objId}": {
      "get": {
        "tags": [
          "CloudCommunicationSettings"
        ],
        "operationId": "getCloudCommunicationSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CloudCommunicationSettingsWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "CloudCommunicationSettings"
        ],
        "operationId": "editCloudCommunicationSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CloudCommunicationSettingsWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudCommunicationSettings"
            }
          }
        ]
      }
    },
    "/devicesettings/default/managementips": {
      "get": {
        "tags": [
          "ManagementIP"
        ],
        "operationId": "getManagementIPList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ManagementIPList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ManagementIPWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/managementips/{objId}": {
      "get": {
        "tags": [
          "ManagementIP"
        ],
        "operationId": "getManagementIP",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ManagementIPWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "ManagementIP"
        ],
        "operationId": "editManagementIP",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ManagementIPWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementIP"
            }
          }
        ]
      }
    },
    "/object/networks": {
      "get": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "getNetworkObjectList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "NetworkObjectList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NetworkObjectWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "addNetworkObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NetworkObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetworkObject"
            }
          }
        ]
      }
    },
    "/object/networks/{objId}": {
      "get": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "getNetworkObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NetworkObjectWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "editNetworkObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NetworkObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetworkObject"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "deleteNetworkObject",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/networkgroups": {
      "get": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "getNetworkObjectGroupList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "NetworkObjectGroupList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NetworkObjectGroupWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "addNetworkObjectGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NetworkObjectGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetworkObjectGroup"
            }
          }
        ]
      }
    },
    "/object/networkgroups/{objId}": {
      "get": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "getNetworkObjectGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NetworkObjectGroupWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "editNetworkObjectGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NetworkObjectGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetworkObjectGroup"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "NetworkObject"
        ],
        "operationId": "deleteNetworkObjectGroup",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/tcpports": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getTCPPortObjectList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "TCPPortObjectList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TCPPortObjectWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "PortObject"
        ],
        "operationId": "addTCPPortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TCPPortObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TCPPortObject"
            }
          }
        ]
      }
    },
    "/object/tcpports/{objId}": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getTCPPortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TCPPortObjectWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "PortObject"
        ],
        "operationId": "editTCPPortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TCPPortObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TCPPortObject"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "PortObject"
        ],
        "operationId": "deleteTCPPortObject",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/udpports": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getUDPPortObjectList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "UDPPortObjectList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UDPPortObjectWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "PortObject"
        ],
        "operationId": "addUDPPortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UDPPortObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UDPPortObject"
            }
          }
        ]
      }
    },
    "/object/udpports/{objId}": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getUDPPortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UDPPortObjectWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "PortObject"
        ],
        "operationId": "editUDPPortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UDPPortObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UDPPortObject"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "PortObject"
        ],
        "operationId": "deleteUDPPortObject",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/protocols": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getProtocolObjectList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ProtocolObjectList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProtocolObjectWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "PortObject"
        ],
        "operationId": "addProtocolObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ProtocolObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProtocolObject"
            }
          }
        ]
      }
    },
    "/object/protocols/{objId}": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getProtocolObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ProtocolObjectWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "PortObject"
        ],
        "operationId": "editProtocolObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ProtocolObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProtocolObject"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "PortObject"
        ],
        "operationId": "deleteProtocolObject",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/icmpv4ports": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getICMPv4PortObjectList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ICMPv4PortObjectList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ICMPv4PortObjectWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "PortObject"
        ],
        "operationId": "addICMPv4PortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ICMPv4PortObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ICMPv4PortObject"
            }
          }
        ]
      }
    },
    "/object/icmpv4ports/{objId}": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getICMPv4PortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ICMPv4PortObjectWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "PortObject"
        ],
        "operationId": "editICMPv4PortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ICMPv4PortObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ICMPv4PortObject"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "PortObject"
        ],
        "operationId": "deleteICMPv4PortObject",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/icmpv6ports": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getICMPv6PortObjectList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ICMPv6PortObjectList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ICMPv6PortObjectWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "PortObject"
        ],
        "operationId": "addICMPv6PortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ICMPv6PortObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ICMPv6PortObject"
            }
          }
        ]
      }
    },
    "/object/icmpv6ports/{objId}": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getICMPv6PortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ICMPv6PortObjectWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "PortObject"
        ],
        "operationId": "editICMPv6PortObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ICMPv6PortObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ICMPv6PortObject"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "PortObject"
        ],
        "operationId": "deleteICMPv6PortObject",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/portgroups": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getPortObjectGroupList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "PortObjectGroupList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PortObjectGroupWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "PortObject"
        ],
        "operationId": "addPortObjectGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PortObjectGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortObjectGroup"
            }
          }
        ]
      }
    },
    "/object/portgroups/{objId}": {
      "get": {
        "tags": [
          "PortObject"
        ],
        "operationId": "getPortObjectGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PortObjectGroupWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "PortObject"
        ],
        "operationId": "editPortObjectGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PortObjectGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortObjectGroup"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "PortObject"
        ],
        "operationId": "deletePortObjectGroup",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/systemfeedobjects": {
      "get": {
        "tags": [
          "SystemFeedObject"
        ],
        "operationId": "getSystemFeedObjectList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SystemFeedObjectList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SystemFeedObjectWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/systemfeedobjects/{objId}": {
      "get": {
        "tags": [
          "SystemFeedObject"
        ],
        "operationId": "getSystemFeedObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SystemFeedObjectWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SystemFeedObject"
        ],
        "operationId": "editSystemFeedObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SystemFeedObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemFeedObject"
            }
          }
        ]
      }
    },
    "/object/urlfeedcategories": {
      "get": {
        "tags": [
          "URLFeedCategory"
        ],
        "operationId": "getURLFeedCategoryList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "URLFeedCategoryList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/URLFeedCategoryWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/urlfeedcategories/{objId}": {
      "get": {
        "tags": [
          "URLFeedCategory"
        ],
        "operationId": "getURLFeedCategory",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/URLFeedCategoryWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/networkfeedcategories": {
      "get": {
        "tags": [
          "NetworkFeedCategory"
        ],
        "operationId": "getNetworkFeedCategoryList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "NetworkFeedCategoryList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NetworkFeedCategoryWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/networkfeedcategories/{objId}": {
      "get": {
        "tags": [
          "NetworkFeedCategory"
        ],
        "operationId": "getNetworkFeedCategory",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NetworkFeedCategoryWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/securityzones": {
      "get": {
        "tags": [
          "SecurityZone"
        ],
        "operationId": "getSecurityZoneList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SecurityZoneList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SecurityZoneWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SecurityZone"
        ],
        "operationId": "addSecurityZone",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityZoneWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityZone"
            }
          }
        ]
      }
    },
    "/object/securityzones/{objId}": {
      "get": {
        "tags": [
          "SecurityZone"
        ],
        "operationId": "getSecurityZone",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityZoneWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SecurityZone"
        ],
        "operationId": "editSecurityZone",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityZoneWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityZone"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "SecurityZone"
        ],
        "operationId": "deleteSecurityZone",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/integration/identityservicesengine": {
      "get": {
        "tags": [
          "IdentityServicesEngine"
        ],
        "operationId": "getIdentityServicesEngineList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IdentityServicesEngineList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IdentityServicesEngineWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "IdentityServicesEngine"
        ],
        "operationId": "addIdentityServicesEngine",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IdentityServicesEngineWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityServicesEngine"
            }
          }
        ]
      }
    },
    "/integration/identityservicesengine/{objId}": {
      "get": {
        "tags": [
          "IdentityServicesEngine"
        ],
        "operationId": "getIdentityServicesEngine",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IdentityServicesEngineWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IdentityServicesEngine"
        ],
        "operationId": "editIdentityServicesEngine",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IdentityServicesEngineWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityServicesEngine"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "IdentityServicesEngine"
        ],
        "operationId": "deleteIdentityServicesEngine",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/standardaccesslists": {
      "get": {
        "tags": [
          "StandardAccessList"
        ],
        "operationId": "getStandardAccessListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "StandardAccessListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/StandardAccessListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "StandardAccessList"
        ],
        "operationId": "addStandardAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StandardAccessListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StandardAccessList"
            }
          }
        ]
      }
    },
    "/object/standardaccesslists/{objId}": {
      "get": {
        "tags": [
          "StandardAccessList"
        ],
        "operationId": "getStandardAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StandardAccessListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "StandardAccessList"
        ],
        "operationId": "editStandardAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StandardAccessListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StandardAccessList"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "StandardAccessList"
        ],
        "operationId": "deleteStandardAccessList",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/extendedaccesslists": {
      "get": {
        "tags": [
          "ExtendedAccessList"
        ],
        "operationId": "getExtendedAccessListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ExtendedAccessListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExtendedAccessListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "ExtendedAccessList"
        ],
        "operationId": "addExtendedAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExtendedAccessListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedAccessList"
            }
          }
        ]
      }
    },
    "/object/extendedaccesslists/{objId}": {
      "get": {
        "tags": [
          "ExtendedAccessList"
        ],
        "operationId": "getExtendedAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExtendedAccessListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "ExtendedAccessList"
        ],
        "operationId": "editExtendedAccessList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExtendedAccessListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedAccessList"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "ExtendedAccessList"
        ],
        "operationId": "deleteExtendedAccessList",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/aspathlists": {
      "get": {
        "tags": [
          "ASPathList"
        ],
        "operationId": "getASPathListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ASPathListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ASPathListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "ASPathList"
        ],
        "operationId": "addASPathList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ASPathListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ASPathList"
            }
          }
        ]
      }
    },
    "/object/aspathlists/{objId}": {
      "get": {
        "tags": [
          "ASPathList"
        ],
        "operationId": "getASPathList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ASPathListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "ASPathList"
        ],
        "operationId": "editASPathList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ASPathListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ASPathList"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "ASPathList"
        ],
        "operationId": "deleteASPathList",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/routemaps": {
      "get": {
        "tags": [
          "RouteMap"
        ],
        "operationId": "getRouteMapList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "RouteMapList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RouteMapWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "RouteMap"
        ],
        "operationId": "addRouteMap",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RouteMapWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteMap"
            }
          }
        ]
      }
    },
    "/object/routemaps/{objId}": {
      "get": {
        "tags": [
          "RouteMap"
        ],
        "operationId": "getRouteMap",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RouteMapWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "RouteMap"
        ],
        "operationId": "editRouteMap",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RouteMapWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteMap"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "RouteMap"
        ],
        "operationId": "deleteRouteMap",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/standardcommunitylists": {
      "get": {
        "tags": [
          "StandardCommunityList"
        ],
        "operationId": "getStandardCommunityListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "StandardCommunityListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/StandardCommunityListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "StandardCommunityList"
        ],
        "operationId": "addStandardCommunityList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StandardCommunityListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StandardCommunityList"
            }
          }
        ]
      }
    },
    "/object/standardcommunitylists/{objId}": {
      "get": {
        "tags": [
          "StandardCommunityList"
        ],
        "operationId": "getStandardCommunityList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StandardCommunityListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "StandardCommunityList"
        ],
        "operationId": "editStandardCommunityList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StandardCommunityListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StandardCommunityList"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "StandardCommunityList"
        ],
        "operationId": "deleteStandardCommunityList",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/expandedcommunitylists": {
      "get": {
        "tags": [
          "ExpandedCommunityList"
        ],
        "operationId": "getExpandedCommunityListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ExpandedCommunityListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExpandedCommunityListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "ExpandedCommunityList"
        ],
        "operationId": "addExpandedCommunityList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExpandedCommunityListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpandedCommunityList"
            }
          }
        ]
      }
    },
    "/object/expandedcommunitylists/{objId}": {
      "get": {
        "tags": [
          "ExpandedCommunityList"
        ],
        "operationId": "getExpandedCommunityList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExpandedCommunityListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "ExpandedCommunityList"
        ],
        "operationId": "editExpandedCommunityList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExpandedCommunityListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpandedCommunityList"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "ExpandedCommunityList"
        ],
        "operationId": "deleteExpandedCommunityList",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/ipv4prefixlists": {
      "get": {
        "tags": [
          "IPV4PrefixList"
        ],
        "operationId": "getIPV4PrefixListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IPV4PrefixListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IPV4PrefixListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "IPV4PrefixList"
        ],
        "operationId": "addIPV4PrefixList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IPV4PrefixListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPV4PrefixList"
            }
          }
        ]
      }
    },
    "/object/ipv4prefixlists/{objId}": {
      "get": {
        "tags": [
          "IPV4PrefixList"
        ],
        "operationId": "getIPV4PrefixList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IPV4PrefixListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IPV4PrefixList"
        ],
        "operationId": "editIPV4PrefixList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IPV4PrefixListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPV4PrefixList"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "IPV4PrefixList"
        ],
        "operationId": "deleteIPV4PrefixList",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/ipv6prefixlists": {
      "get": {
        "tags": [
          "IPV6PrefixList"
        ],
        "operationId": "getIPV6PrefixListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IPV6PrefixListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IPV6PrefixListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "IPV6PrefixList"
        ],
        "operationId": "addIPV6PrefixList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IPV6PrefixListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPV6PrefixList"
            }
          }
        ]
      }
    },
    "/object/ipv6prefixlists/{objId}": {
      "get": {
        "tags": [
          "IPV6PrefixList"
        ],
        "operationId": "getIPV6PrefixList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IPV6PrefixListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IPV6PrefixList"
        ],
        "operationId": "editIPV6PrefixList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IPV6PrefixListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPV6PrefixList"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "IPV6PrefixList"
        ],
        "operationId": "deleteIPV6PrefixList",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/policylists": {
      "get": {
        "tags": [
          "PolicyList"
        ],
        "operationId": "getPolicyListList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "PolicyListList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PolicyListWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "PolicyList"
        ],
        "operationId": "addPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PolicyListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyList"
            }
          }
        ]
      }
    },
    "/object/policylists/{objId}": {
      "get": {
        "tags": [
          "PolicyList"
        ],
        "operationId": "getPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PolicyListWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "PolicyList"
        ],
        "operationId": "editPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PolicyListWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyList"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "PolicyList"
        ],
        "operationId": "deletePolicyList",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/interfaces": {
      "get": {
        "tags": [
          "Interface"
        ],
        "operationId": "getPhysicalInterfaceList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "PhysicalInterfaceList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PhysicalInterfaceWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/interfaces/{objId}": {
      "get": {
        "tags": [
          "Interface"
        ],
        "operationId": "getPhysicalInterface",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PhysicalInterfaceWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Interface"
        ],
        "operationId": "editPhysicalInterface",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PhysicalInterfaceWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalInterface"
            }
          }
        ]
      }
    },
    "/object/applications": {
      "get": {
        "tags": [
          "Application"
        ],
        "operationId": "getApplicationList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ApplicationList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/countries": {
      "get": {
        "tags": [
          "Country"
        ],
        "operationId": "getCountryList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "CountryList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CountryWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/countries/{objId}": {
      "get": {
        "tags": [
          "Country"
        ],
        "operationId": "getCountry",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CountryWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/continents": {
      "get": {
        "tags": [
          "Continent"
        ],
        "operationId": "getContinentList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ContinentList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContinentWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/continents/{objId}": {
      "get": {
        "tags": [
          "Continent"
        ],
        "operationId": "getContinent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ContinentWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/applicationtags": {
      "get": {
        "tags": [
          "Application"
        ],
        "operationId": "getApplicationTagList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ApplicationTagList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationTagWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/applicationcategories": {
      "get": {
        "tags": [
          "Application"
        ],
        "operationId": "getApplicationCategoryList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ApplicationCategoryList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationCategoryWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/urlcategories": {
      "get": {
        "tags": [
          "URLCategory"
        ],
        "operationId": "getURLCategoryList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "URLCategoryList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/URLCategoryWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/urlreputation": {
      "get": {
        "tags": [
          "URLReputation"
        ],
        "operationId": "getURLReputationList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "URLReputationList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/URLReputationWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/geolocations": {
      "get": {
        "tags": [
          "GeoLocation"
        ],
        "operationId": "getGeoLocationList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "GeoLocationList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GeoLocationWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "GeoLocation"
        ],
        "operationId": "addGeoLocation",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GeoLocationWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeoLocation"
            }
          }
        ]
      }
    },
    "/object/geolocations/{objId}": {
      "get": {
        "tags": [
          "GeoLocation"
        ],
        "operationId": "getGeoLocation",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GeoLocationWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "GeoLocation"
        ],
        "operationId": "editGeoLocation",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GeoLocationWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeoLocation"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "GeoLocation"
        ],
        "operationId": "deleteGeoLocation",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/urls": {
      "get": {
        "tags": [
          "URLObject"
        ],
        "operationId": "getURLObjectList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "URLObjectList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/URLObjectWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "URLObject"
        ],
        "operationId": "addURLObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/URLObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/URLObject"
            }
          }
        ]
      }
    },
    "/object/urls/{objId}": {
      "get": {
        "tags": [
          "URLObject"
        ],
        "operationId": "getURLObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/URLObjectWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "URLObject"
        ],
        "operationId": "editURLObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/URLObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/URLObject"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "URLObject"
        ],
        "operationId": "deleteURLObject",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/urlgroups": {
      "get": {
        "tags": [
          "URLObject"
        ],
        "operationId": "getURLObjectGroupList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "URLObjectGroupList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/URLObjectGroupWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "URLObject"
        ],
        "operationId": "addURLObjectGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/URLObjectGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/URLObjectGroup"
            }
          }
        ]
      }
    },
    "/object/urlgroups/{objId}": {
      "get": {
        "tags": [
          "URLObject"
        ],
        "operationId": "getURLObjectGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/URLObjectGroupWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "URLObject"
        ],
        "operationId": "editURLObjectGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/URLObjectGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/URLObjectGroup"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "URLObject"
        ],
        "operationId": "deleteURLObjectGroup",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/deploy": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "operationId": "getDeploymentList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "DeploymentStatusList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeploymentStatusWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Deployment"
        ],
        "operationId": "addDeployment",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DeploymentStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": []
      }
    },
    "/operational/deploy/{objId}": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "operationId": "getDeployment",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DeploymentStatusWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Deployment"
        ],
        "operationId": "deleteDeployment",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/action/ha/join": {
      "get": {
        "tags": [
          "JoinHAStatus"
        ],
        "operationId": "getJoinHAStatusList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "JoinHAStatusList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JoinHAStatusWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "JoinHAStatus"
        ],
        "operationId": "addJoinHAStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JoinHAStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": []
      }
    },
    "/devices/default/action/ha/break": {
      "get": {
        "tags": [
          "BreakHAStatus"
        ],
        "operationId": "getBreakHAStatusList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "BreakHAStatusList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BreakHAStatusWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "BreakHAStatus"
        ],
        "operationId": "addBreakHAStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BreakHAStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "clearIntfs",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ]
      }
    },
    "/devices/default/action/ha/join/{objId}": {
      "get": {
        "tags": [
          "JoinHAStatus"
        ],
        "operationId": "getJoinHAStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JoinHAStatusWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/action/ha/break/{objId}": {
      "get": {
        "tags": [
          "BreakHAStatus"
        ],
        "operationId": "getBreakHAStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BreakHAStatusWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/action/ha/resume": {
      "post": {
        "tags": [
          "HAAction"
        ],
        "operationId": "startHAResume",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HAStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": []
      }
    },
    "/devices/default/action/ha/suspend": {
      "post": {
        "tags": [
          "HAAction"
        ],
        "operationId": "startHASuspend",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HAStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": []
      }
    },
    "/devices/default/action/ha/failover": {
      "post": {
        "tags": [
          "HAAction"
        ],
        "operationId": "startHAFailover",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HAStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": []
      }
    },
    "/devices/default/action/ha/reset": {
      "post": {
        "tags": [
          "HAAction"
        ],
        "operationId": "addHAStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HAStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": []
      }
    },
    "/operational/deploymentdata/{objId}": {
      "get": {
        "tags": [
          "DeploymentData"
        ],
        "operationId": "getDeploymentData",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DeploymentDataWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/trafficinterruptionreasons/{objId}": {
      "get": {
        "tags": [
          "TrafficInterruptionReasons"
        ],
        "operationId": "getTrafficInterruptionReasons",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TrafficInterruptionReasonsWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/pendingchanges/clipboard/{objId}": {
      "get": {
        "tags": [
          "Clipboard"
        ],
        "operationId": "getClipboard",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ClipboardWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/downloadconfig/{objId}": {
      "get": {
        "tags": [
          "Download"
        ],
        "operationId": "getdownloadconfig",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/action/exportconfig": {
      "get": {
        "tags": [
          "ScheduleExportConfig"
        ],
        "operationId": "getScheduleExportConfigList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ScheduleExportConfigList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ScheduleExportConfigWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "ScheduleExportConfig"
        ],
        "operationId": "addScheduleExportConfig",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ScheduleExportConfigWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleExportConfig"
            }
          }
        ]
      }
    },
    "/jobs/exportconfigjob": {
      "get": {
        "tags": [
          "ExportConfigJobHistory"
        ],
        "operationId": "getExportConfigJobHistoryList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ExportConfigJobHistoryList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExportConfigJobHistoryWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/action/pendingchanges/download/{objId}": {
      "get": {
        "tags": [
          "Download"
        ],
        "operationId": "getdownload",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/operational/pendingchanges": {
      "get": {
        "tags": [
          "BaseEntityDiff"
        ],
        "operationId": "getBaseEntityDiffList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "BaseEntityDiffList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BaseEntityDiffWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/operational/auditevents": {
      "get": {
        "tags": [
          "AuditEvent"
        ],
        "operationId": "getAuditEventList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AuditEventList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AuditEventWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/operational/auditevents/{objId}": {
      "get": {
        "tags": [
          "AuditEvent"
        ],
        "operationId": "getAuditEvent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AuditEventWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/auditevents/{parentId}/changes": {
      "get": {
        "tags": [
          "AuditEntityChange"
        ],
        "operationId": "getAuditEntityChangeList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AuditEntityChangeList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AuditEntityChangeWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/deploymenterrors/{objId}": {
      "get": {
        "tags": [
          "CliDeploymentError"
        ],
        "operationId": "getCliDeploymentError",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CliDeploymentErrorWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/backup": {
      "get": {
        "tags": [
          "BackupImmediate"
        ],
        "operationId": "getBackupImmediateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "BackupImmediateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BackupImmediateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "BackupImmediate"
        ],
        "operationId": "addBackupImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BackupImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupImmediate"
            }
          }
        ]
      }
    },
    "/action/backup/{objId}": {
      "get": {
        "tags": [
          "BackupImmediate"
        ],
        "operationId": "getBackupImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BackupImmediateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "BackupImmediate"
        ],
        "operationId": "editBackupImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BackupImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupImmediate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "BackupImmediate"
        ],
        "operationId": "deleteBackupImmediate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/scheduledbackup": {
      "get": {
        "tags": [
          "BackupScheduled"
        ],
        "operationId": "getBackupScheduledList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "BackupScheduledList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BackupScheduledWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "BackupScheduled"
        ],
        "operationId": "addBackupScheduled",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BackupScheduledWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupScheduled"
            }
          }
        ]
      }
    },
    "/action/scheduledbackup/{objId}": {
      "get": {
        "tags": [
          "BackupScheduled"
        ],
        "operationId": "getBackupScheduled",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BackupScheduledWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "BackupScheduled"
        ],
        "operationId": "editBackupScheduled",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BackupScheduledWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupScheduled"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "BackupScheduled"
        ],
        "operationId": "deleteBackupScheduled",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/restore": {
      "get": {
        "tags": [
          "RestoreImmediate"
        ],
        "operationId": "getRestoreImmediateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "RestoreImmediateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RestoreImmediateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "RestoreImmediate"
        ],
        "operationId": "addRestoreImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RestoreImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestoreImmediate"
            }
          }
        ]
      }
    },
    "/action/restore/{objId}": {
      "get": {
        "tags": [
          "RestoreImmediate"
        ],
        "operationId": "getRestoreImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RestoreImmediateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "RestoreImmediate"
        ],
        "operationId": "editRestoreImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RestoreImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestoreImmediate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "RestoreImmediate"
        ],
        "operationId": "deleteRestoreImmediate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/managedentity/archivedbackups": {
      "get": {
        "tags": [
          "ArchivedBackup"
        ],
        "operationId": "getArchivedBackupList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ArchivedBackupList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ArchivedBackupWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/managedentity/archivedbackups/{objId}": {
      "get": {
        "tags": [
          "ArchivedBackup"
        ],
        "operationId": "getArchivedBackup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ArchivedBackupWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "ArchivedBackup"
        ],
        "operationId": "deleteArchivedBackup",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/bridgegroupinterfaces": {
      "get": {
        "tags": [
          "Interface"
        ],
        "operationId": "getBridgeGroupInterfaceList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "BridgeGroupInterfaceList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BridgeGroupInterfaceWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Interface"
        ],
        "operationId": "addBridgeGroupInterface",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BridgeGroupInterfaceWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BridgeGroupInterface"
            }
          }
        ]
      }
    },
    "/devices/default/bridgegroupinterfaces/{objId}": {
      "get": {
        "tags": [
          "Interface"
        ],
        "operationId": "getBridgeGroupInterface",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BridgeGroupInterfaceWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Interface"
        ],
        "operationId": "editBridgeGroupInterface",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BridgeGroupInterfaceWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BridgeGroupInterface"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Interface"
        ],
        "operationId": "deleteBridgeGroupInterface",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/updategeolocation": {
      "get": {
        "tags": [
          "GeolocationUpdateImmediate"
        ],
        "operationId": "getGeolocationUpdateImmediateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "GeolocationUpdateImmediateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GeolocationUpdateImmediateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "GeolocationUpdateImmediate"
        ],
        "operationId": "addGeolocationUpdateImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GeolocationUpdateImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeolocationUpdateImmediate"
            }
          }
        ]
      }
    },
    "/action/updategeolocation/{objId}": {
      "get": {
        "tags": [
          "GeolocationUpdateImmediate"
        ],
        "operationId": "getGeolocationUpdateImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GeolocationUpdateImmediateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "GeolocationUpdateImmediate"
        ],
        "operationId": "editGeolocationUpdateImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GeolocationUpdateImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeolocationUpdateImmediate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "GeolocationUpdateImmediate"
        ],
        "operationId": "deleteGeolocationUpdateImmediate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/managedentity/geolocationupdateschedules": {
      "get": {
        "tags": [
          "GeolocationUpdateSchedule"
        ],
        "operationId": "getGeolocationUpdateScheduleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "GeolocationUpdateScheduleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GeolocationUpdateScheduleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "GeolocationUpdateSchedule"
        ],
        "operationId": "addGeolocationUpdateSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GeolocationUpdateScheduleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeolocationUpdateSchedule"
            }
          }
        ]
      }
    },
    "/managedentity/geolocationupdateschedules/{objId}": {
      "get": {
        "tags": [
          "GeolocationUpdateSchedule"
        ],
        "operationId": "getGeolocationUpdateSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GeolocationUpdateScheduleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "GeolocationUpdateSchedule"
        ],
        "operationId": "editGeolocationUpdateSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GeolocationUpdateScheduleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeolocationUpdateSchedule"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "GeolocationUpdateSchedule"
        ],
        "operationId": "deleteGeolocationUpdateSchedule",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/updatesru": {
      "get": {
        "tags": [
          "SRUUpdateImmediate"
        ],
        "operationId": "getSRUUpdateImmediateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SRUUpdateImmediateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SRUUpdateImmediateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SRUUpdateImmediate"
        ],
        "operationId": "addSRUUpdateImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SRUUpdateImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SRUUpdateImmediate"
            }
          }
        ]
      }
    },
    "/action/updatesru/{objId}": {
      "get": {
        "tags": [
          "SRUUpdateImmediate"
        ],
        "operationId": "getSRUUpdateImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SRUUpdateImmediateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SRUUpdateImmediate"
        ],
        "operationId": "editSRUUpdateImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SRUUpdateImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SRUUpdateImmediate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "SRUUpdateImmediate"
        ],
        "operationId": "deleteSRUUpdateImmediate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/managedentity/sruupdateschedules": {
      "get": {
        "tags": [
          "SRUUpdateSchedule"
        ],
        "operationId": "getSRUUpdateScheduleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SRUUpdateScheduleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SRUUpdateScheduleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SRUUpdateSchedule"
        ],
        "operationId": "addSRUUpdateSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SRUUpdateScheduleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SRUUpdateSchedule"
            }
          }
        ]
      }
    },
    "/managedentity/sruupdateschedules/{objId}": {
      "get": {
        "tags": [
          "SRUUpdateSchedule"
        ],
        "operationId": "getSRUUpdateSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SRUUpdateScheduleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SRUUpdateSchedule"
        ],
        "operationId": "editSRUUpdateSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SRUUpdateScheduleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SRUUpdateSchedule"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "SRUUpdateSchedule"
        ],
        "operationId": "deleteSRUUpdateSchedule",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/updatevdb": {
      "get": {
        "tags": [
          "VDBUpdateImmediate"
        ],
        "operationId": "getVDBUpdateImmediateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "VDBUpdateImmediateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VDBUpdateImmediateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "VDBUpdateImmediate"
        ],
        "operationId": "addVDBUpdateImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/VDBUpdateImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VDBUpdateImmediate"
            }
          }
        ]
      }
    },
    "/action/updatevdb/{objId}": {
      "get": {
        "tags": [
          "VDBUpdateImmediate"
        ],
        "operationId": "getVDBUpdateImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/VDBUpdateImmediateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "VDBUpdateImmediate"
        ],
        "operationId": "editVDBUpdateImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/VDBUpdateImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VDBUpdateImmediate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "VDBUpdateImmediate"
        ],
        "operationId": "deleteVDBUpdateImmediate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/managedentity/vdbupdateschedules": {
      "get": {
        "tags": [
          "VDBUpdateSchedule"
        ],
        "operationId": "getVDBUpdateScheduleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "VDBUpdateScheduleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VDBUpdateScheduleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "VDBUpdateSchedule"
        ],
        "operationId": "addVDBUpdateSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/VDBUpdateScheduleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VDBUpdateSchedule"
            }
          }
        ]
      }
    },
    "/managedentity/vdbupdateschedules/{objId}": {
      "get": {
        "tags": [
          "VDBUpdateSchedule"
        ],
        "operationId": "getVDBUpdateSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/VDBUpdateScheduleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "VDBUpdateSchedule"
        ],
        "operationId": "editVDBUpdateSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/VDBUpdateScheduleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VDBUpdateSchedule"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "VDBUpdateSchedule"
        ],
        "operationId": "deleteVDBUpdateSchedule",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/securityintelligenceupdatefeeds": {
      "get": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsImmediate"
        ],
        "operationId": "getSecurityIntelligenceUpdateFeedsImmediateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SecurityIntelligenceUpdateFeedsImmediateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsImmediateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsImmediate"
        ],
        "operationId": "addSecurityIntelligenceUpdateFeedsImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsImmediate"
            }
          }
        ]
      }
    },
    "/action/securityintelligenceupdatefeeds/{objId}": {
      "get": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsImmediate"
        ],
        "operationId": "getSecurityIntelligenceUpdateFeedsImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsImmediateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsImmediate"
        ],
        "operationId": "editSecurityIntelligenceUpdateFeedsImmediate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsImmediateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsImmediate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsImmediate"
        ],
        "operationId": "deleteSecurityIntelligenceUpdateFeedsImmediate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/managedentity/securityintelligencefeedsupdateschedules": {
      "get": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsSchedule"
        ],
        "operationId": "getSecurityIntelligenceUpdateFeedsScheduleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SecurityIntelligenceUpdateFeedsScheduleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsScheduleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsSchedule"
        ],
        "operationId": "addSecurityIntelligenceUpdateFeedsSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsScheduleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsSchedule"
            }
          }
        ]
      }
    },
    "/managedentity/securityintelligencefeedsupdateschedules/{objId}": {
      "get": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsSchedule"
        ],
        "operationId": "getSecurityIntelligenceUpdateFeedsSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsScheduleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsSchedule"
        ],
        "operationId": "editSecurityIntelligenceUpdateFeedsSchedule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsScheduleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityIntelligenceUpdateFeedsSchedule"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "SecurityIntelligenceUpdateFeedsSchedule"
        ],
        "operationId": "deleteSecurityIntelligenceUpdateFeedsSchedule",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryEntityList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "JobHistoryEntityList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobHistoryEntityWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/backups": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryBackupList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "JobHistoryBackupList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobHistoryBackupWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/backups/{objId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryBackup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JobHistoryBackupWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "operationId": "deleteJobHistoryBackup",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/geolocationupdates": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryGeolocationList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "JobHistoryGeolocationList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobHistoryGeolocationWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/geolocationupdates/{objId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryGeolocation",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JobHistoryGeolocationWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "operationId": "deleteJobHistoryGeolocation",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/sruupdates": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistorySruUpdateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "JobHistorySruUpdateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobHistorySruUpdateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/sruupdates/{objId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistorySruUpdate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JobHistorySruUpdateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "operationId": "deleteJobHistorySruUpdate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/vdbupdates": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryVDBUpdateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "JobHistoryVDBUpdateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobHistoryVDBUpdateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/vdbupdates/{objId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryVDBUpdate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JobHistoryVDBUpdateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "operationId": "deleteJobHistoryVDBUpdate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/deployments": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryDeploymentList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "JobHistoryDeploymentList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobHistoryDeploymentWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/deployments/{objId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryDeployment",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JobHistoryDeploymentWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "operationId": "deleteJobHistoryDeployment",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/licenseregistrations": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getLicenseJobHistoryList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "LicenseJobHistoryList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LicenseJobHistoryWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/licenseregistrations/{objId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getLicenseJobHistory",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LicenseJobHistoryWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "operationId": "deleteLicenseJobHistory",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/cloudmanagementupdates": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryCloudManagementList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "JobHistoryCloudManagementList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobHistoryCloudManagementWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/cloudmanagementupdates/{objId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryCloudManagement",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JobHistoryCloudManagementWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "operationId": "deleteJobHistoryCloudManagement",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/haconfigsync": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryHaConfigSyncList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "JobHistoryHaConfigSyncList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobHistoryHaConfigSyncWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/haconfigsync/{objId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryHaConfigSync",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JobHistoryHaConfigSyncWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "operationId": "deleteJobHistoryHaConfigSync",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/jobs/{objId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "operationId": "getJobHistoryEntity",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/JobHistoryEntityWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "operationId": "deleteJobHistoryEntity",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/applicationfilters": {
      "get": {
        "tags": [
          "Application"
        ],
        "operationId": "getApplicationFilterList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ApplicationFilterList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationFilterWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Application"
        ],
        "operationId": "addApplicationFilter",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ApplicationFilterWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationFilter"
            }
          }
        ]
      }
    },
    "/object/applicationfilters/{objId}": {
      "get": {
        "tags": [
          "Application"
        ],
        "operationId": "getApplicationFilter",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ApplicationFilterWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Application"
        ],
        "operationId": "editApplicationFilter",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ApplicationFilterWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationFilter"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Application"
        ],
        "operationId": "deleteApplicationFilter",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/filepolicies": {
      "get": {
        "tags": [
          "FilePolicy"
        ],
        "operationId": "getFilePolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "FilePolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FilePolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/filepolicies/{objId}": {
      "get": {
        "tags": [
          "FilePolicy"
        ],
        "operationId": "getFilePolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FilePolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/intrusionpolicies": {
      "get": {
        "tags": [
          "IntrusionPolicy"
        ],
        "operationId": "getIntrusionPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IntrusionPolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IntrusionPolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/intrusionpolicies/{objId}": {
      "get": {
        "tags": [
          "IntrusionPolicy"
        ],
        "operationId": "getIntrusionPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IntrusionPolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/intrusionpolicies/{parentId}/intrusionrules": {
      "get": {
        "tags": [
          "IntrusionPolicy"
        ],
        "operationId": "getIntrusionRuleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IntrusionRuleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IntrusionRuleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/intrusionpolicies/{parentId}/intrusionrules/{objId}": {
      "get": {
        "tags": [
          "IntrusionPolicy"
        ],
        "operationId": "getIntrusionRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IntrusionRuleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/intrusionpolicies/{objId}/ruleupdates": {
      "put": {
        "tags": [
          "IntrusionPolicy"
        ],
        "operationId": "editIntrusionPolicyRuleUpdate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IntrusionPolicyRuleUpdateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntrusionPolicyRuleUpdate"
            }
          }
        ]
      }
    },
    "/object/intrusionsettings": {
      "get": {
        "tags": [
          "IntrusionSettings"
        ],
        "operationId": "getIntrusionSettingsList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IntrusionSettingsList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IntrusionSettingsWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/intrusionsettings/{objId}": {
      "get": {
        "tags": [
          "IntrusionSettings"
        ],
        "operationId": "getIntrusionSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IntrusionSettingsWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IntrusionSettings"
        ],
        "operationId": "editIntrusionSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IntrusionSettingsWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntrusionSettings"
            }
          }
        ]
      }
    },
    "/policy/accesspolicies/{parentId}/accessrules": {
      "get": {
        "tags": [
          "AccessPolicy"
        ],
        "operationId": "getAccessRuleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AccessRuleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AccessRuleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "AccessPolicy"
        ],
        "operationId": "addAccessRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AccessRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessRule"
            }
          }
        ]
      }
    },
    "/policy/accesspolicies/{parentId}/accessrules/{objId}": {
      "get": {
        "tags": [
          "AccessPolicy"
        ],
        "operationId": "getAccessRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AccessRuleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "AccessPolicy"
        ],
        "operationId": "editAccessRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AccessRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessRule"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "AccessPolicy"
        ],
        "operationId": "deleteAccessRule",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/accesspolicies": {
      "get": {
        "tags": [
          "AccessPolicy"
        ],
        "operationId": "getAccessPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AccessPolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AccessPolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/accesspolicies/{objId}": {
      "get": {
        "tags": [
          "AccessPolicy"
        ],
        "operationId": "getAccessPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AccessPolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "AccessPolicy"
        ],
        "operationId": "editAccessPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AccessPolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessPolicy"
            }
          }
        ]
      }
    },
    "/policy/manualnatpolicies/{parentId}/manualnatrules": {
      "get": {
        "tags": [
          "NAT"
        ],
        "operationId": "getManualNatRuleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ManualNatRuleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ManualNatRuleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "NAT"
        ],
        "operationId": "addManualNatRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ManualNatRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualNatRule"
            }
          }
        ]
      }
    },
    "/policy/manualnatpolicies/{parentId}/manualnatrules/{objId}": {
      "get": {
        "tags": [
          "NAT"
        ],
        "operationId": "getManualNatRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ManualNatRuleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "NAT"
        ],
        "operationId": "editManualNatRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ManualNatRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualNatRule"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "NAT"
        ],
        "operationId": "deleteManualNatRule",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/manualnatpolicies": {
      "get": {
        "tags": [
          "NAT"
        ],
        "operationId": "getManualNatRuleContainerList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ManualNatRuleContainerList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ManualNatRuleContainerWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/manualnatpolicies/{objId}": {
      "get": {
        "tags": [
          "NAT"
        ],
        "operationId": "getManualNatRuleContainer",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ManualNatRuleContainerWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/objectnatpolicies/{parentId}/objectnatrules": {
      "get": {
        "tags": [
          "NAT"
        ],
        "operationId": "getObjectNatRuleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ObjectNatRuleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ObjectNatRuleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "NAT"
        ],
        "operationId": "addObjectNatRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ObjectNatRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectNatRule"
            }
          }
        ]
      }
    },
    "/policy/objectnatpolicies/{parentId}/objectnatrules/{objId}": {
      "get": {
        "tags": [
          "NAT"
        ],
        "operationId": "getObjectNatRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ObjectNatRuleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "NAT"
        ],
        "operationId": "editObjectNatRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ObjectNatRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectNatRule"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "NAT"
        ],
        "operationId": "deleteObjectNatRule",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/objectnatpolicies": {
      "get": {
        "tags": [
          "NAT"
        ],
        "operationId": "getObjectNatRuleContainerList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ObjectNatRuleContainerList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ObjectNatRuleContainerWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/objectnatpolicies/{objId}": {
      "get": {
        "tags": [
          "NAT"
        ],
        "operationId": "getObjectNatRuleContainer",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ObjectNatRuleContainerWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/interfaces/{parentId}/subinterfaces": {
      "get": {
        "tags": [
          "Interface"
        ],
        "operationId": "getSubInterfaceList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SubInterfaceList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SubInterfaceWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Interface"
        ],
        "operationId": "addSubInterface",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SubInterfaceWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubInterface"
            }
          }
        ]
      }
    },
    "/devices/default/interfaces/{parentId}/subinterfaces/{objId}": {
      "get": {
        "tags": [
          "Interface"
        ],
        "operationId": "getSubInterface",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SubInterfaceWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Interface"
        ],
        "operationId": "editSubInterface",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SubInterfaceWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubInterface"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Interface"
        ],
        "operationId": "deleteSubInterface",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/uploaddiskfile": {
      "post": {
        "tags": [
          "Upload"
        ],
        "operationId": "postuploaddiskfile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FileUploadStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "formData",
            "name": "fileToUpload",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ]
      }
    },
    "/action/downloaddiskfile/{objId}": {
      "get": {
        "tags": [
          "Download"
        ],
        "operationId": "getdownloaddiskfile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/object/anyconnectclientprofiles": {
      "get": {
        "tags": [
          "AnyConnectClientProfile"
        ],
        "operationId": "getAnyConnectClientProfileList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AnyConnectClientProfileList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnyConnectClientProfileWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "AnyConnectClientProfile"
        ],
        "operationId": "addAnyConnectClientProfile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectClientProfileWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnyConnectClientProfile"
            }
          }
        ]
      }
    },
    "/object/anyconnectclientprofiles/{objId}": {
      "get": {
        "tags": [
          "AnyConnectClientProfile"
        ],
        "operationId": "getAnyConnectClientProfile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectClientProfileWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "AnyConnectClientProfile"
        ],
        "operationId": "editAnyConnectClientProfile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectClientProfileWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnyConnectClientProfile"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "AnyConnectClientProfile"
        ],
        "operationId": "deleteAnyConnectClientProfile",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/anyconnectpackagefiles": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectPackageFileList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AnyConnectPackageFileList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnyConnectPackageFileWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "addAnyConnectPackageFile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectPackageFileWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnyConnectPackageFile"
            }
          }
        ]
      }
    },
    "/devices/default/anyconnectpackagefiles/{objId}": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectPackageFile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectPackageFileWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "editAnyConnectPackageFile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectPackageFileWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnyConnectPackageFile"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "deleteAnyConnectPackageFile",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/anyconnectpackages": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectPackagesList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AnyConnectPackagesList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnyConnectPackagesWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "addAnyConnectPackages",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectPackagesWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnyConnectPackages"
            }
          }
        ]
      }
    },
    "/devices/default/anyconnectpackages/{objId}": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectPackages",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectPackagesWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "editAnyConnectPackages",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectPackagesWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnyConnectPackages"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "deleteAnyConnectPackages",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/anyconnectprofiles": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectProfileList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AnyConnectProfileList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnyConnectProfileWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/anyconnectprofiles/{objId}": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectProfile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectProfileWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "deleteAnyConnectProfile",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/anyconnectgrouppolicies": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectGroupPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AnyConnectGroupPolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnyConnectGroupPolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/anyconnectgrouppolicies/{objId}": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectGroupPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectGroupPolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "deleteAnyConnectGroupPolicy",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/anyconnectvpnconnections": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectVpnConnectionList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AnyConnectVpnConnectionList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnyConnectVpnConnectionWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "addAnyConnectVpnConnection",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectVpnConnectionWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnyConnectVpnConnectionUncompressedModel"
            }
          }
        ]
      }
    },
    "/devices/default/anyconnectvpnconnections/{objId}": {
      "get": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "getAnyConnectVpnConnection",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectVpnConnectionWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "editAnyConnectVpnConnection",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AnyConnectVpnConnectionWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnyConnectVpnConnectionUncompressedModel"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "AnyConnectVpnConnection"
        ],
        "operationId": "deleteAnyConnectVpnConnection",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/ikev1policies": {
      "get": {
        "tags": [
          "IkevOnePolicy"
        ],
        "operationId": "getIkevOnePolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IkevOnePolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IkevOnePolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "IkevOnePolicy"
        ],
        "operationId": "addIkevOnePolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevOnePolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IkevOnePolicy"
            }
          }
        ]
      }
    },
    "/object/ikev1policies/{objId}": {
      "get": {
        "tags": [
          "IkevOnePolicy"
        ],
        "operationId": "getIkevOnePolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevOnePolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IkevOnePolicy"
        ],
        "operationId": "editIkevOnePolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevOnePolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IkevOnePolicy"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "IkevOnePolicy"
        ],
        "operationId": "deleteIkevOnePolicy",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/ikev1proposals": {
      "get": {
        "tags": [
          "IkevOneProposal"
        ],
        "operationId": "getIkevOneProposalList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IkevOneProposalList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IkevOneProposalWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "IkevOneProposal"
        ],
        "operationId": "addIkevOneProposal",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevOneProposalWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IkevOneProposal"
            }
          }
        ]
      }
    },
    "/object/ikev1proposals/{objId}": {
      "get": {
        "tags": [
          "IkevOneProposal"
        ],
        "operationId": "getIkevOneProposal",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevOneProposalWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IkevOneProposal"
        ],
        "operationId": "editIkevOneProposal",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevOneProposalWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IkevOneProposal"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "IkevOneProposal"
        ],
        "operationId": "deleteIkevOneProposal",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/ikev2policies": {
      "get": {
        "tags": [
          "IkevTwoPolicy"
        ],
        "operationId": "getIkevTwoPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IkevTwoPolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IkevTwoPolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "IkevTwoPolicy"
        ],
        "operationId": "addIkevTwoPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevTwoPolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IkevTwoPolicy"
            }
          }
        ]
      }
    },
    "/object/ikev2policies/{objId}": {
      "get": {
        "tags": [
          "IkevTwoPolicy"
        ],
        "operationId": "getIkevTwoPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevTwoPolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IkevTwoPolicy"
        ],
        "operationId": "editIkevTwoPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevTwoPolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IkevTwoPolicy"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "IkevTwoPolicy"
        ],
        "operationId": "deleteIkevTwoPolicy",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/ikev2proposals": {
      "get": {
        "tags": [
          "IkevTwoProposal"
        ],
        "operationId": "getIkevTwoProposalList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IkevTwoProposalList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IkevTwoProposalWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "IkevTwoProposal"
        ],
        "operationId": "addIkevTwoProposal",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevTwoProposalWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IkevTwoProposal"
            }
          }
        ]
      }
    },
    "/object/ikev2proposals/{objId}": {
      "get": {
        "tags": [
          "IkevTwoProposal"
        ],
        "operationId": "getIkevTwoProposal",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevTwoProposalWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IkevTwoProposal"
        ],
        "operationId": "editIkevTwoProposal",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IkevTwoProposalWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IkevTwoProposal"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "IkevTwoProposal"
        ],
        "operationId": "deleteIkevTwoProposal",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/s2sconnectionprofiles": {
      "get": {
        "tags": [
          "SToSConnectionProfile"
        ],
        "operationId": "getSToSConnectionProfileList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SToSConnectionProfileList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SToSConnectionProfileWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SToSConnectionProfile"
        ],
        "operationId": "addSToSConnectionProfile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SToSConnectionProfileWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SToSConnectionProfile"
            }
          }
        ]
      }
    },
    "/devices/default/s2sconnectionprofiles/{objId}": {
      "get": {
        "tags": [
          "SToSConnectionProfile"
        ],
        "operationId": "getSToSConnectionProfile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SToSConnectionProfileWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SToSConnectionProfile"
        ],
        "operationId": "editSToSConnectionProfile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SToSConnectionProfileWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SToSConnectionProfile"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "SToSConnectionProfile"
        ],
        "operationId": "deleteSToSConnectionProfile",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/users": {
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "getUserList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "UserList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "operationId": "addUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ]
      }
    },
    "/object/users/{objId}": {
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "operationId": "editUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "operationId": "deleteUser",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/ntp": {
      "get": {
        "tags": [
          "NTP"
        ],
        "operationId": "getNTPList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "NTPList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NTPWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/ntp/{objId}": {
      "get": {
        "tags": [
          "NTP"
        ],
        "operationId": "getNTP",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NTPWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "NTP"
        ],
        "operationId": "editNTP",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NTPWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NTP"
            }
          }
        ]
      }
    },
    "/devicesettings/default/logsettings": {
      "get": {
        "tags": [
          "DeviceLogSettings"
        ],
        "operationId": "getDeviceLogSettingsList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "DeviceLogSettingsList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeviceLogSettingsWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/logsettings/{objId}": {
      "get": {
        "tags": [
          "DeviceLogSettings"
        ],
        "operationId": "getDeviceLogSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DeviceLogSettingsWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "DeviceLogSettings"
        ],
        "operationId": "editDeviceLogSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DeviceLogSettingsWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceLogSettings"
            }
          }
        ]
      }
    },
    "/object/syslogalerts": {
      "get": {
        "tags": [
          "SyslogServer"
        ],
        "operationId": "getSyslogServerList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SyslogServerList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SyslogServerWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SyslogServer"
        ],
        "operationId": "addSyslogServer",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SyslogServerWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyslogServer"
            }
          }
        ]
      }
    },
    "/object/syslogalerts/{objId}": {
      "get": {
        "tags": [
          "SyslogServer"
        ],
        "operationId": "getSyslogServer",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SyslogServerWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SyslogServer"
        ],
        "operationId": "editSyslogServer",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SyslogServerWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyslogServer"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "SyslogServer"
        ],
        "operationId": "deleteSyslogServer",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/timezones/{objId}": {
      "get": {
        "tags": [
          "TimeZones"
        ],
        "operationId": "getTimeZones",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TimeZonesWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/diskusage/{objId}": {
      "get": {
        "tags": [
          "DiskUsage"
        ],
        "operationId": "getDiskUsage",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DiskUsageWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/monitor/trendingreports/{objId}": {
      "get": {
        "tags": [
          "TrendingReport"
        ],
        "operationId": "getTrendingReport",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TrendingReportWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "time_duration",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/mgmtdnssettings": {
      "get": {
        "tags": [
          "DNS"
        ],
        "operationId": "getDeviceDNSSettingsList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "DeviceDNSSettingsList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeviceDNSSettingsWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/mgmtdnssettings/{objId}": {
      "get": {
        "tags": [
          "DNS"
        ],
        "operationId": "getDeviceDNSSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DeviceDNSSettingsWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "DNS"
        ],
        "operationId": "editDeviceDNSSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DeviceDNSSettingsWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceDNSSettings"
            }
          }
        ]
      }
    },
    "/devices/default/datadnssettings": {
      "get": {
        "tags": [
          "DNS"
        ],
        "operationId": "getDataDNSSettingsList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "DataDNSSettingsList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataDNSSettingsWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/datadnssettings/{objId}": {
      "get": {
        "tags": [
          "DNS"
        ],
        "operationId": "getDataDNSSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DataDNSSettingsWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "DNS"
        ],
        "operationId": "editDataDNSSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DataDNSSettingsWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataDNSSettings"
            }
          }
        ]
      }
    },
    "/object/dnsservergroups": {
      "get": {
        "tags": [
          "DNS"
        ],
        "operationId": "getDNSServerGroupList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "DNSServerGroupList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DNSServerGroupWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "DNS"
        ],
        "operationId": "addDNSServerGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DNSServerGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DNSServerGroup"
            }
          }
        ]
      }
    },
    "/object/dnsservergroups/{objId}": {
      "get": {
        "tags": [
          "DNS"
        ],
        "operationId": "getDNSServerGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DNSServerGroupWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "DNS"
        ],
        "operationId": "editDNSServerGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DNSServerGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DNSServerGroup"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "DNS"
        ],
        "operationId": "deleteDNSServerGroup",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/identitypolicies/{parentId}/identityrules": {
      "get": {
        "tags": [
          "IdentityPolicy"
        ],
        "operationId": "getIdentityRuleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IdentityRuleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IdentityRuleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "IdentityPolicy"
        ],
        "operationId": "addIdentityRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IdentityRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityRule"
            }
          }
        ]
      }
    },
    "/policy/identitypolicies/{parentId}/identityrules/{objId}": {
      "get": {
        "tags": [
          "IdentityPolicy"
        ],
        "operationId": "getIdentityRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IdentityRuleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IdentityPolicy"
        ],
        "operationId": "editIdentityRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IdentityRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityRule"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "IdentityPolicy"
        ],
        "operationId": "deleteIdentityRule",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/identitypolicies": {
      "get": {
        "tags": [
          "IdentityPolicy"
        ],
        "operationId": "getIdentityPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "IdentityPolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IdentityPolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/identitypolicies/{objId}": {
      "get": {
        "tags": [
          "IdentityPolicy"
        ],
        "operationId": "getIdentityPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IdentityPolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "IdentityPolicy"
        ],
        "operationId": "editIdentityPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IdentityPolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityPolicy"
            }
          }
        ]
      }
    },
    "/object/internalcertificates": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "operationId": "getInternalCertificateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "InternalCertificateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InternalCertificateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Certificate"
        ],
        "operationId": "addInternalCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InternalCertificateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InternalCertificate"
            }
          }
        ]
      }
    },
    "/object/internalcertificates/{objId}": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "operationId": "getInternalCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InternalCertificateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Certificate"
        ],
        "operationId": "editInternalCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InternalCertificateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InternalCertificate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Certificate"
        ],
        "operationId": "deleteInternalCertificate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/internalcacertificates": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "operationId": "getInternalCACertificateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "InternalCACertificateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InternalCACertificateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Certificate"
        ],
        "operationId": "addInternalCACertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InternalCACertificateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InternalCACertificate"
            }
          }
        ]
      }
    },
    "/object/internalcacertificates/{objId}": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "operationId": "getInternalCACertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InternalCACertificateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Certificate"
        ],
        "operationId": "editInternalCACertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InternalCACertificateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InternalCACertificate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Certificate"
        ],
        "operationId": "deleteInternalCACertificate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/downloadinternalcacertificate/{objId}": {
      "get": {
        "tags": [
          "Download"
        ],
        "operationId": "getdownloadinternalcacertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/object/externalcertificates": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "operationId": "getExternalCertificateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ExternalCertificateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExternalCertificateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Certificate"
        ],
        "operationId": "addExternalCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExternalCertificateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalCertificate"
            }
          }
        ]
      }
    },
    "/object/externalcertificates/{objId}": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "operationId": "getExternalCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExternalCertificateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Certificate"
        ],
        "operationId": "editExternalCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExternalCertificateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalCertificate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Certificate"
        ],
        "operationId": "deleteExternalCertificate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/externalcacertificates": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "operationId": "getExternalCACertificateList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ExternalCACertificateList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExternalCACertificateWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Certificate"
        ],
        "operationId": "addExternalCACertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExternalCACertificateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalCACertificate"
            }
          }
        ]
      }
    },
    "/object/externalcacertificates/{objId}": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "operationId": "getExternalCACertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExternalCACertificateWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Certificate"
        ],
        "operationId": "editExternalCACertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExternalCACertificateWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalCACertificate"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Certificate"
        ],
        "operationId": "deleteExternalCACertificate",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/realms": {
      "get": {
        "tags": [
          "ActiveDirectoryRealm"
        ],
        "operationId": "getActiveDirectoryRealmList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ActiveDirectoryRealmList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ActiveDirectoryRealmWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "ActiveDirectoryRealm"
        ],
        "operationId": "addActiveDirectoryRealm",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ActiveDirectoryRealmWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActiveDirectoryRealm"
            }
          }
        ]
      }
    },
    "/object/realms/{objId}": {
      "get": {
        "tags": [
          "ActiveDirectoryRealm"
        ],
        "operationId": "getActiveDirectoryRealm",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ActiveDirectoryRealmWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "ActiveDirectoryRealm"
        ],
        "operationId": "editActiveDirectoryRealm",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ActiveDirectoryRealmWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActiveDirectoryRealm"
            }
          }
        ]
      }
    },
    "/object/specialrealms": {
      "get": {
        "tags": [
          "SpecialRealm"
        ],
        "operationId": "getSpecialRealmList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SpecialRealmList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SpecialRealmWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/specialrealms/{objId}": {
      "get": {
        "tags": [
          "SpecialRealm"
        ],
        "operationId": "getSpecialRealm",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SpecialRealmWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/realms/{parentId}/trafficusers": {
      "get": {
        "tags": [
          "TrafficUser"
        ],
        "operationId": "getRealmTrafficUserList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "RealmTrafficUserList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TrafficUserWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/realms/{parentId}/trafficusers/{objId}": {
      "get": {
        "tags": [
          "TrafficUser"
        ],
        "operationId": "getRealmTrafficUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TrafficUserWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/specialrealms/{parentId}/trafficusers": {
      "get": {
        "tags": [
          "TrafficUser"
        ],
        "operationId": "getSpecialRealmTrafficUserList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SpecialRealmTrafficUserList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TrafficUserWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/specialrealms/{parentId}/trafficusers/{objId}": {
      "get": {
        "tags": [
          "TrafficUser"
        ],
        "operationId": "getSpecialRealmTrafficUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TrafficUserWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/realms/{parentId}/trafficusergroups": {
      "get": {
        "tags": [
          "TrafficUserGroup"
        ],
        "operationId": "getTrafficUserGroupList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "TrafficUserGroupList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TrafficUserGroupWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/realms/{parentId}/trafficusergroups/{objId}": {
      "get": {
        "tags": [
          "TrafficUserGroup"
        ],
        "operationId": "getTrafficUserGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TrafficUserGroupWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/routing/{parentId}/staticrouteentries": {
      "get": {
        "tags": [
          "StaticRouteEntry"
        ],
        "operationId": "getStaticRouteEntryList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "StaticRouteEntryList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/StaticRouteEntryWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "StaticRouteEntry"
        ],
        "operationId": "addStaticRouteEntry",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StaticRouteEntryWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StaticRouteEntry"
            }
          }
        ]
      }
    },
    "/devices/default/routing/{parentId}/staticrouteentries/{objId}": {
      "get": {
        "tags": [
          "StaticRouteEntry"
        ],
        "operationId": "getStaticRouteEntry",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StaticRouteEntryWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "StaticRouteEntry"
        ],
        "operationId": "editStaticRouteEntry",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StaticRouteEntryWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StaticRouteEntry"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "StaticRouteEntry"
        ],
        "operationId": "deleteStaticRouteEntry",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/routing": {
      "get": {
        "tags": [
          "StaticRouteEntryContainer"
        ],
        "operationId": "getStaticRouteEntryContainerList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "StaticRouteEntryContainerList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/StaticRouteEntryContainerWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/routing/{objId}": {
      "get": {
        "tags": [
          "StaticRouteEntryContainer"
        ],
        "operationId": "getStaticRouteEntryContainer",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StaticRouteEntryContainerWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/connecttest/{objId}": {
      "get": {
        "tags": [
          "ConnectTest"
        ],
        "operationId": "getConnectTest",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ConnectTestWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/downloadtroubleshoot/{objId}": {
      "get": {
        "tags": [
          "Download"
        ],
        "operationId": "getdownloadtroubleshoot",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/action/troubleshoot": {
      "get": {
        "tags": [
          "ScheduleTroubleshoot"
        ],
        "operationId": "getScheduleTroubleshootList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ScheduleTroubleshootList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ScheduleTroubleshootWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "ScheduleTroubleshoot"
        ],
        "operationId": "addScheduleTroubleshoot",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ScheduleTroubleshootWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleTroubleshoot"
            }
          }
        ]
      }
    },
    "/managedentity/jobs/troubleshootjob": {
      "get": {
        "tags": [
          "TroubleshootJobHistory"
        ],
        "operationId": "getTroubleshootJobHistoryList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "TroubleshootJobHistoryList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TroubleshootJobHistoryWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/action/troubleshoot/{objId}": {
      "get": {
        "tags": [
          "ScheduleTroubleshoot"
        ],
        "operationId": "getScheduleTroubleshoot",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ScheduleTroubleshootWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "ScheduleTroubleshoot"
        ],
        "operationId": "editScheduleTroubleshoot",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ScheduleTroubleshootWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleTroubleshoot"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "ScheduleTroubleshoot"
        ],
        "operationId": "deleteScheduleTroubleshoot",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/managedentity/upgradefiles": {
      "get": {
        "tags": [
          "UpgradeFile"
        ],
        "operationId": "getUpgradeFileList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "UpgradeFileList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UpgradeFileWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/managedentity/upgradefiles/{objId}": {
      "get": {
        "tags": [
          "UpgradeFile"
        ],
        "operationId": "getUpgradeFile",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UpgradeFileWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "UpgradeFile"
        ],
        "operationId": "deleteUpgradeFile",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/upgrade": {
      "post": {
        "tags": [
          "Upgrade"
        ],
        "operationId": "startUpgrade",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        }
      }
    },
    "/devicesettings/default/dhcpservercontainers": {
      "get": {
        "tags": [
          "DHCPServerContainer"
        ],
        "operationId": "getDHCPServerContainerList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "DHCPServerContainerList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DHCPServerContainerWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/dhcpservercontainers/{objId}": {
      "get": {
        "tags": [
          "DHCPServerContainer"
        ],
        "operationId": "getDHCPServerContainer",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DHCPServerContainerWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "DHCPServerContainer"
        ],
        "operationId": "editDHCPServerContainer",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DHCPServerContainerWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DHCPServerContainer"
            }
          }
        ]
      }
    },
    "/devicesettings/default/cloudconfig": {
      "get": {
        "tags": [
          "CloudConfig"
        ],
        "operationId": "getCloudConfigList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "CloudConfigList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CloudConfigWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/cloudconfig/{objId}": {
      "get": {
        "tags": [
          "CloudConfig"
        ],
        "operationId": "getCloudConfig",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CloudConfigWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "CloudConfig"
        ],
        "operationId": "editCloudConfig",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CloudConfigWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudConfig"
            }
          }
        ]
      }
    },
    "/action/uploadcert": {
      "post": {
        "tags": [
          "CertFileUploadStatus"
        ],
        "operationId": "postuploadcert",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CertFileUploadStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "formData",
            "name": "fileToUpload",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ]
      }
    },
    "/license/smartagentconnections": {
      "get": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "getSmartAgentConnectionList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SmartAgentConnectionList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SmartAgentConnectionWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "addSmartAgentConnection",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmartAgentConnectionWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartAgentConnection"
            }
          }
        ]
      }
    },
    "/license/smartagentconnections/{objId}": {
      "get": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "getSmartAgentConnection",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmartAgentConnectionWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "editSmartAgentConnection",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmartAgentConnectionWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartAgentConnection"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "deleteSmartAgentConnection",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/license/smartagentstatuses": {
      "get": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "getSmartAgentStatusList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SmartAgentStatusList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SmartAgentStatusWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/license/smartagentstatuses/{objId}": {
      "get": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "getSmartAgentStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmartAgentStatusWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/license/smartlicenses": {
      "get": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "getLicenseList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "LicenseList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LicenseWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "addLicense",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LicenseWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/License"
            }
          }
        ]
      }
    },
    "/license/smartlicenses/{objId}": {
      "get": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "getLicense",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LicenseWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "deleteLicense",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/license/smartagentsyncrequests": {
      "get": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "getSmartAgentSyncRequestList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SmartAgentSyncRequestList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SmartAgentSyncRequestWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "addSmartAgentSyncRequest",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmartAgentSyncRequestWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartAgentSyncRequest"
            }
          }
        ]
      }
    },
    "/license/smartagentsyncrequests/{objId}": {
      "get": {
        "tags": [
          "SmartLicensing"
        ],
        "operationId": "getSmartAgentSyncRequest",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmartAgentSyncRequestWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/uploadbackup": {
      "post": {
        "tags": [
          "Upload"
        ],
        "operationId": "postuploadbackup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FileUploadStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "formData",
            "name": "fileToUpload",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ]
      }
    },
    "/action/downloadbackup/{objId}": {
      "get": {
        "tags": [
          "Download"
        ],
        "operationId": "getdownloadbackup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/action/testrealm": {
      "post": {
        "tags": [
          "TestDirectory"
        ],
        "operationId": "addTestDirectory",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TestDirectoryWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestDirectory"
            }
          }
        ]
      }
    },
    "/action/testidentityservicesengineconnectivity": {
      "post": {
        "tags": [
          "TestIdentityServicesEngineConnectivity"
        ],
        "operationId": "addTestIdentityServicesEngineConnectivity",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TestIdentityServicesEngineConnectivityWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestIdentityServicesEngineConnectivity"
            }
          }
        ]
      }
    },
    "/operational/ntpstatus/{objId}": {
      "get": {
        "tags": [
          "NTPStatus"
        ],
        "operationId": "getNTPStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NTPStatusWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/interfaceinfo/{objId}": {
      "get": {
        "tags": [
          "InterfaceInfo"
        ],
        "operationId": "getInterfaceInfo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InterfaceInfoWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/uploadupgrade": {
      "post": {
        "tags": [
          "Upload"
        ],
        "operationId": "postuploadupgrade",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FileUploadStatusWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "formData",
            "name": "fileToUpload",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ]
      }
    },
    "/action/cloudmanagement": {
      "get": {
        "tags": [
          "CloudManagement"
        ],
        "operationId": "getCloudManagementList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "CloudManagementList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CloudManagementWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "CloudManagement"
        ],
        "operationId": "addCloudManagement",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CloudManagementWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudManagement"
            }
          }
        ]
      }
    },
    "/action/cloudmanagement/{objId}": {
      "get": {
        "tags": [
          "CloudManagement"
        ],
        "operationId": "getCloudManagement",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CloudManagementWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "CloudManagement"
        ],
        "operationId": "editCloudManagement",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CloudManagementWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudManagement"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "CloudManagement"
        ],
        "operationId": "deleteCloudManagement",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/sslpolicies": {
      "get": {
        "tags": [
          "SSLPolicy"
        ],
        "operationId": "getSSLPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SSLPolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SSLPolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/sslpolicies/{objId}": {
      "get": {
        "tags": [
          "SSLPolicy"
        ],
        "operationId": "getSSLPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SSLPolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SSLPolicy"
        ],
        "operationId": "editSSLPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SSLPolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSLPolicy"
            }
          }
        ]
      }
    },
    "/policy/sslpolicies/{parentId}/sslrules": {
      "get": {
        "tags": [
          "SSLPolicy"
        ],
        "operationId": "getSSLRuleList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SSLRuleList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SSLRuleWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "SSLPolicy"
        ],
        "operationId": "addSSLRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SSLRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSLRule"
            }
          }
        ]
      }
    },
    "/policy/sslpolicies/{parentId}/sslrules/{objId}": {
      "get": {
        "tags": [
          "SSLPolicy"
        ],
        "operationId": "getSSLRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SSLRuleWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SSLPolicy"
        ],
        "operationId": "editSSLRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SSLRuleWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSLRule"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "SSLPolicy"
        ],
        "operationId": "deleteSSLRule",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/policy/securityintelligencepolicies": {
      "get": {
        "tags": [
          "SecurityIntelligence"
        ],
        "operationId": "getSecurityIntelligencePolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SecurityIntelligencePolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SecurityIntelligencePolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/securityintelligencepolicies/{objId}": {
      "get": {
        "tags": [
          "SecurityIntelligence"
        ],
        "operationId": "getSecurityIntelligencePolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligencePolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SecurityIntelligence"
        ],
        "operationId": "editSecurityIntelligencePolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligencePolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityIntelligencePolicy"
            }
          }
        ]
      }
    },
    "/policy/securityintelligencenetworkpolicies": {
      "get": {
        "tags": [
          "SecurityIntelligence"
        ],
        "operationId": "getSecurityIntelligenceNetworkPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SecurityIntelligenceNetworkPolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SecurityIntelligenceNetworkPolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/securityintelligencenetworkpolicies/{objId}": {
      "get": {
        "tags": [
          "SecurityIntelligence"
        ],
        "operationId": "getSecurityIntelligenceNetworkPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceNetworkPolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SecurityIntelligence"
        ],
        "operationId": "editSecurityIntelligenceNetworkPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceNetworkPolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityIntelligenceNetworkPolicy"
            }
          }
        ]
      }
    },
    "/policy/securityintelligenceurlpolicies": {
      "get": {
        "tags": [
          "SecurityIntelligence"
        ],
        "operationId": "getSecurityIntelligenceURLPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SecurityIntelligenceURLPolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SecurityIntelligenceURLPolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/policy/securityintelligenceurlpolicies/{objId}": {
      "get": {
        "tags": [
          "SecurityIntelligence"
        ],
        "operationId": "getSecurityIntelligenceURLPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceURLPolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "SecurityIntelligence"
        ],
        "operationId": "editSecurityIntelligenceURLPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecurityIntelligenceURLPolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityIntelligenceURLPolicy"
            }
          }
        ]
      }
    },
    "/managemententity/postupgradeflags": {
      "get": {
        "tags": [
          "PostUpgradeFlags"
        ],
        "operationId": "getPostUpgradeFlagsList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "PostUpgradeFlagsList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PostUpgradeFlagsWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/managemententity/postupgradeflags/{objId}": {
      "get": {
        "tags": [
          "PostUpgradeFlags"
        ],
        "operationId": "getPostUpgradeFlags",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PostUpgradeFlagsWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "PostUpgradeFlags"
        ],
        "operationId": "editPostUpgradeFlags",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PostUpgradeFlagsWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostUpgradeFlags"
            }
          }
        ]
      }
    },
    "/devices/default/routing/virtualrouters/default/ospf": {
      "get": {
        "tags": [
          "OSPF"
        ],
        "operationId": "getOSPFList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "OSPFList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/OSPFWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "OSPF"
        ],
        "operationId": "addOSPF",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OSPFWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OSPF"
            }
          }
        ]
      }
    },
    "/devices/default/routing/virtualrouters/default/ospf/{objId}": {
      "get": {
        "tags": [
          "OSPF"
        ],
        "operationId": "getOSPF",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OSPFWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "OSPF"
        ],
        "operationId": "editOSPF",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OSPFWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OSPF"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "OSPF"
        ],
        "operationId": "deleteOSPF",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/routing/virtualrouters/default/ospfinterfacesettings": {
      "get": {
        "tags": [
          "OSPFInterfaceSettings"
        ],
        "operationId": "getOSPFInterfaceSettingsList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "OSPFInterfaceSettingsList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/OSPFInterfaceSettingsWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "OSPFInterfaceSettings"
        ],
        "operationId": "addOSPFInterfaceSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OSPFInterfaceSettingsWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OSPFInterfaceSettings"
            }
          }
        ]
      }
    },
    "/devices/default/routing/virtualrouters/default/ospfinterfacesettings/{objId}": {
      "get": {
        "tags": [
          "OSPFInterfaceSettings"
        ],
        "operationId": "getOSPFInterfaceSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OSPFInterfaceSettingsWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "OSPFInterfaceSettings"
        ],
        "operationId": "editOSPFInterfaceSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OSPFInterfaceSettingsWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OSPFInterfaceSettings"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "OSPFInterfaceSettings"
        ],
        "operationId": "deleteOSPFInterfaceSettings",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/routing/virtualrouters/default/bgp": {
      "get": {
        "tags": [
          "BGP"
        ],
        "operationId": "getBGPList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "BGPList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BGPWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "BGP"
        ],
        "operationId": "addBGP",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BGPWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGP"
            }
          }
        ]
      }
    },
    "/devices/default/routing/virtualrouters/default/bgp/{objId}": {
      "get": {
        "tags": [
          "BGP"
        ],
        "operationId": "getBGP",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BGPWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "BGP"
        ],
        "operationId": "editBGP",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BGPWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGP"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "BGP"
        ],
        "operationId": "deleteBGP",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/flexconfigobjects": {
      "get": {
        "tags": [
          "FlexConfigObject"
        ],
        "operationId": "getFlexConfigObjectList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "FlexConfigObjectList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FlexConfigObjectWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "FlexConfigObject"
        ],
        "operationId": "addFlexConfigObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FlexConfigObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlexConfigObject"
            }
          }
        ]
      }
    },
    "/object/flexconfigobjects/{objId}": {
      "get": {
        "tags": [
          "FlexConfigObject"
        ],
        "operationId": "getFlexConfigObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FlexConfigObjectWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "FlexConfigObject"
        ],
        "operationId": "editFlexConfigObject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FlexConfigObjectWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlexConfigObject"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "FlexConfigObject"
        ],
        "operationId": "deleteFlexConfigObject",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/flexconfigpolicies": {
      "get": {
        "tags": [
          "FlexConfigPolicy"
        ],
        "operationId": "getFlexConfigPolicyList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "FlexConfigPolicyList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FlexConfigPolicyWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "FlexConfigPolicy"
        ],
        "operationId": "addFlexConfigPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FlexConfigPolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlexConfigPolicy"
            }
          }
        ]
      }
    },
    "/object/flexconfigpolicies/{objId}": {
      "get": {
        "tags": [
          "FlexConfigPolicy"
        ],
        "operationId": "getFlexConfigPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FlexConfigPolicyWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "FlexConfigPolicy"
        ],
        "operationId": "editFlexConfigPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FlexConfigPolicyWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlexConfigPolicy"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "FlexConfigPolicy"
        ],
        "operationId": "deleteFlexConfigPolicy",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/secrets": {
      "get": {
        "tags": [
          "Secret"
        ],
        "operationId": "getSecretList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "SecretList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SecretWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Secret"
        ],
        "operationId": "addSecret",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecretWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          }
        ]
      }
    },
    "/object/secrets/{objId}": {
      "get": {
        "tags": [
          "Secret"
        ],
        "operationId": "getSecret",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecretWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Secret"
        ],
        "operationId": "editSecret",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SecretWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Secret"
        ],
        "operationId": "deleteSecret",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/cloudservicesinfo/{objId}": {
      "get": {
        "tags": [
          "CloudServicesInfo"
        ],
        "operationId": "getCloudServicesInfo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CloudServicesInfoWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/ha/configurations": {
      "get": {
        "tags": [
          "HAConfiguration"
        ],
        "operationId": "getHAConfigurationList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "HAConfigurationList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HAConfigurationWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/ha/configurations/{objId}": {
      "get": {
        "tags": [
          "HAConfiguration"
        ],
        "operationId": "getHAConfiguration",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HAConfigurationWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "HAConfiguration"
        ],
        "operationId": "editHAConfiguration",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HAConfigurationWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HAConfiguration"
            }
          }
        ]
      }
    },
    "/devices/default/ha/failoverconfigurations": {
      "get": {
        "tags": [
          "HAFailoverConfiguration"
        ],
        "operationId": "getHAFailoverConfigurationList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "HAFailoverConfigurationList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HAFailoverConfigurationWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devices/default/ha/failoverconfigurations/{objId}": {
      "get": {
        "tags": [
          "HAFailoverConfiguration"
        ],
        "operationId": "getHAFailoverConfiguration",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HAFailoverConfigurationWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "HAFailoverConfiguration"
        ],
        "operationId": "editHAFailoverConfiguration",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HAFailoverConfigurationWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HAFailoverConfiguration"
            }
          }
        ]
      }
    },
    "/devices/default/operational/ha/status/{objId}": {
      "get": {
        "tags": [
          "HAStatus"
        ],
        "operationId": "getHAStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HAStatusWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/radiusidentitysources": {
      "get": {
        "tags": [
          "RadiusIdentitySource"
        ],
        "operationId": "getRadiusIdentitySourceList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "RadiusIdentitySourceList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RadiusIdentitySourceWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "RadiusIdentitySource"
        ],
        "operationId": "addRadiusIdentitySource",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RadiusIdentitySourceWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RadiusIdentitySource"
            }
          }
        ]
      }
    },
    "/object/radiusidentitysources/{objId}": {
      "get": {
        "tags": [
          "RadiusIdentitySource"
        ],
        "operationId": "getRadiusIdentitySource",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RadiusIdentitySourceWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "RadiusIdentitySource"
        ],
        "operationId": "editRadiusIdentitySource",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RadiusIdentitySourceWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RadiusIdentitySource"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "RadiusIdentitySource"
        ],
        "operationId": "deleteRadiusIdentitySource",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/object/localidentitysources": {
      "get": {
        "tags": [
          "LocalIdentitySource"
        ],
        "operationId": "getLocalIdentitySourceList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "LocalIdentitySourceList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LocalIdentitySourceWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/object/localidentitysources/{objId}": {
      "get": {
        "tags": [
          "LocalIdentitySource"
        ],
        "operationId": "getLocalIdentitySource",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LocalIdentitySourceWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/action/testidentitysource": {
      "post": {
        "tags": [
          "TestIdentitySource"
        ],
        "operationId": "addTestIdentitySource",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TestIdentitySourceWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestIdentitySource"
            }
          }
        ]
      }
    },
    "/action/activeusersessions": {
      "get": {
        "tags": [
          "ActiveUserSessions"
        ],
        "operationId": "getActiveUserSessionsList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "ActiveUserSessionsList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ActiveUserSessionsWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/action/activeusersessions/{objId}": {
      "get": {
        "tags": [
          "ActiveUserSessions"
        ],
        "operationId": "getActiveUserSessions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ActiveUserSessionsWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "ActiveUserSessions"
        ],
        "operationId": "deleteActiveUserSessions",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/aaasettings": {
      "get": {
        "tags": [
          "AAASetting"
        ],
        "operationId": "getAAASettingList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "AAASettingList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AAASettingWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/aaasettings/{objId}": {
      "get": {
        "tags": [
          "AAASetting"
        ],
        "operationId": "getAAASetting",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AAASettingWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "AAASetting"
        ],
        "operationId": "editAAASetting",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AAASettingWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AAASetting"
            }
          }
        ]
      }
    },
    "/object/radiusidentitysourcegroups": {
      "get": {
        "tags": [
          "RadiusIdentitySourceGroup"
        ],
        "operationId": "getRadiusIdentitySourceGroupList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "RadiusIdentitySourceGroupList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RadiusIdentitySourceGroupWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "RadiusIdentitySourceGroup"
        ],
        "operationId": "addRadiusIdentitySourceGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RadiusIdentitySourceGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RadiusIdentitySourceGroup"
            }
          }
        ]
      }
    },
    "/object/radiusidentitysourcegroups/{objId}": {
      "get": {
        "tags": [
          "RadiusIdentitySourceGroup"
        ],
        "operationId": "getRadiusIdentitySourceGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RadiusIdentitySourceGroupWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "RadiusIdentitySourceGroup"
        ],
        "operationId": "editRadiusIdentitySourceGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RadiusIdentitySourceGroupWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RadiusIdentitySourceGroup"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "RadiusIdentitySourceGroup"
        ],
        "operationId": "deleteRadiusIdentitySourceGroup",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/operational/rolepermissions": {
      "get": {
        "tags": [
          "RolePermission"
        ],
        "operationId": "getRolePermissionList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "RolePermissionList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RolePermissionWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/operational/rolepermissions/{objId}": {
      "get": {
        "tags": [
          "RolePermission"
        ],
        "operationId": "getRolePermission",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RolePermissionWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/webanalyticssettings": {
      "get": {
        "tags": [
          "WebAnalyticsSetting"
        ],
        "operationId": "getWebAnalyticsSettingList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "WebAnalyticsSettingList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WebAnalyticsSettingWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/devicesettings/default/webanalyticssettings/{objId}": {
      "get": {
        "tags": [
          "WebAnalyticsSetting"
        ],
        "operationId": "getWebAnalyticsSetting",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/WebAnalyticsSettingWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "WebAnalyticsSetting"
        ],
        "operationId": "editWebAnalyticsSetting",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/WebAnalyticsSettingWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebAnalyticsSetting"
            }
          }
        ]
      }
    },
    "/devices/default/action/provision": {
      "get": {
        "tags": [
          "UnlockBox"
        ],
        "operationId": "getInitialProvisionList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "InitialProvisionList",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InitialProvisionWrapper"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              },
              "required": [
                "items",
                "paging"
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "UnlockBox"
        ],
        "operationId": "addInitialProvision",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InitialProvisionWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitialProvision"
            }
          }
        ]
      }
    },
    "/devices/default/action/provision/{objId}": {
      "get": {
        "tags": [
          "InitialProvision"
        ],
        "operationId": "getInitialProvision",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InitialProvisionWrapper"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "InitialProvision"
        ],
        "operationId": "editInitialProvision",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InitialProvisionWrapper"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitialProvision"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "InitialProvision"
        ],
        "operationId": "deleteInitialProvision",
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ErrorWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "objId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/fdm/token": {
      "post": {
        "operationId": "token",
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenPayloadUnion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TokenResponseUnion",
              "type": "object"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TokenStatus",
              "type": "object"
            }
          }
        }
      }
    }
  }
}